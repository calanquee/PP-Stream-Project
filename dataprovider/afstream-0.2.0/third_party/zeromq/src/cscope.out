cscope 15 $HOME/Dropbox/workspace/zeromq-4.0.5/src -q 0000002512 0000471591
	@address.cpp

20 
	~"addªss.hµ
"

21 
	~"îr.hµ
"

22 
	~"t˝_addªss.hµ
"

23 
	~"ùc_addªss.hµ
"

25 
	~<°rög
>

26 
	~<s°ªam
>

28 
	gzmq
::
addªss_t
::
	$addªss_t
 (

29 c⁄° 
°d
::
°rög
 &
¥Ÿocﬁ_
, c⁄° std::°rög &
addªss_
)

30 : 
	`¥Ÿocﬁ
 (
¥Ÿocﬁ_
),

31 
	$addªss
 (
addªss_
)

33 
	`mem£t
 (&
ªsﬁved
, 0,  (resolved));

34 
	}
}

36 
	gzmq
::
addªss_t
::~
	$addªss_t
 ()

38 i‡(
¥Ÿocﬁ
 == "tcp") {

39 i‡(
ªsﬁved
.
t˝_addr
) {

40 
dñëe
 
ªsﬁved
.
t˝_addr
;

41 
ªsﬁved
.
t˝_addr
 = 0;

44 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


46 i‡(
¥Ÿocﬁ
 == "ipc") {

47 i‡(
ªsﬁved
.
ùc_addr
) {

48 
dñëe
 
ªsﬁved
.
ùc_addr
;

49 
ªsﬁved
.
ùc_addr
 = 0;

53 
	}
}

55 
	gzmq
::
addªss_t
::
	$to_°rög
 (
°d
::
°rög
 &
addr_
) const

57 i‡(
¥Ÿocﬁ
 == "tcp") {

58 i‡(
ªsﬁved
.
t˝_addr
)

59  
ªsﬁved
.
t˝_addr
->
	`to_°rög
(
addr_
);

61 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


63 i‡(
¥Ÿocﬁ
 == "ipc") {

64 i‡(
ªsﬁved
.
ùc_addr
)

65  
ªsﬁved
.
ùc_addr
->
	`to_°rög
(
addr_
);

69 i‡(!
¥Ÿocﬁ
.
	`em±y
 (Ë&& !
addªss
.empty ()) {

70 
°d
::
°rög°ªam
 
s
;

71 
s
 << 
¥Ÿocﬁ
 << "://" << 
addªss
;

72 
addr_
 = 
s
.
	`°r
 ();

75 
addr_
.
	`˛ór
 ();

77 
	}
}

	@address.hpp

20 #i‚de‡
__ZMQ_ADDRESS_HPP_INCLUDED__


21 
	#__ZMQ_ADDRESS_HPP_INCLUDED__


	)

23 
	~<°rög
>

25 
«me•a˚
 
	gzmq


27 
˛ass
 
	gt˝_addªss_t
;

28 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


29 
˛ass
 
	gùc_addªss_t
;

31 
	saddªss_t
 {

32 
addªss_t
 (c⁄° 
°d
::
°rög
 &
¥Ÿocﬁ_
, c⁄° std::°rög &
addªss_
);

34 ~
addªss_t
 ();

36 c⁄° 
	g°d
::
°rög
 
¥Ÿocﬁ
;

37 c⁄° 
	g°d
::
°rög
 
addªss
;

41 
t˝_addªss_t
 *
	gt˝_addr
;

42 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


43 
ùc_addªss_t
 *
	gùc_addr
;

45 } 
	gªsﬁved
;

47 
to_°rög
 (
°d
::
°rög
 &
addr_
) const;

	@array.hpp

20 #i‚de‡
__ZMQ_ARRAY_INCLUDED__


21 
	#__ZMQ_ARRAY_INCLUDED__


	)

23 
	~<ve˘‹
>

24 
	~<Æg‹ôhm
>

26 
«me•a˚
 
	gzmq


34 
	gãm∂©e
 <
	gID
 = 0> cœs†
	c¨øy_ôem_t


36 
public
:

38 
ölöe
 
¨øy_ôem_t
 () :

39 
¨øy_ödex
 (-1)

45 
ölöe
 
vútuÆ
 ~
¨øy_ôem_t
 ()

49 
ölöe
 
£t_¨øy_ödex
 (
ödex_
)

51 
¨øy_ödex
 = 
ödex_
;

54 
ölöe
 
gë_¨øy_ödex
 ()

56  
	g¨øy_ödex
;

59 
	g¥iv©e
:

61 
¨øy_ödex
;

63 
¨øy_ôem_t
 (constárray_item_t&);

64 c⁄° 
	g¨øy_ôem_t
 &
	g›î©‹
 = (c⁄° 
¨øy_ôem_t
&);

71 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gID
 = 0> cœs†
	c¨øy_t


73 
¥iv©e
:

75 
¨øy_ôem_t
 <
	tID
> 
	tôem_t
;

77 
	gpublic
:

79 
ty≥«me
 
	t°d
::
	tve˘‹
 <
	tT
*>::
	tsize_ty≥
 size_type;

81 
ölöe
 
¨øy_t
 ()

85 
	gölöe
 ~
¨øy_t
 ()

89 
ölöe
 
size_ty≥
 
size
 ()

91  
	gôems
.
size
 ();

94 
ölöe
 
boﬁ
 
em±y
 ()

96  
	gôems
.
em±y
 ();

99 
ölöe
 
	gT
 *&
	g›î©‹
 [] (
size_ty≥
 
	gödex_
)

101  
	gôems
 [
ödex_
];

104 
ölöe
 
push_back
 (
T
 *
ôem_
)

106 i‡(
	gôem_
)

107 ((
	gôem_t
*Ë
	gôem_
)->
£t_¨øy_ödex
 ((Ë
ôems
.
size
 ());

108 
	gôems
.
push_back
 (
ôem_
);

111 
ölöe
 
îa£
 (
T
 *
ôem_
) {

112 
îa£
 (((
ôem_t
*Ë
ôem_
)->
gë_¨øy_ödex
 ());

115 
ölöe
 
îa£
 (
size_ty≥
 
ödex_
) {

116 i‡(
	gôems
.
back
 ())

117 ((
	gôem_t
*Ë
	gôems
.
back
 ())->
£t_¨øy_ödex
 ((Ë
ödex_
);

118 
	gôems
 [
ödex_
] = 
ôems
.
back
 ();

119 
	gôems
.
p›_back
 ();

122 
ölöe
 
sw≠
 (
size_ty≥
 
ödex1_
, size_ty≥ 
ödex2_
)

124 i‡(
	gôems
 [
ödex1_
])

125 ((
	gôem_t
*Ë
	gôems
 [
ödex1_
])->
£t_¨øy_ödex
 ((Ë
ödex2_
);

126 i‡(
	gôems
 [
ödex2_
])

127 ((
	gôem_t
*Ë
	gôems
 [
ödex2_
])->
£t_¨øy_ödex
 ((Ë
ödex1_
);

128 
	g°d
::
sw≠
 (
ôems
 [
ödex1_
], iãm†[
ödex2_
]);

131 
ölöe
 
˛ór
 ()

133 
	gôems
.
˛ór
 ();

136 
ölöe
 
size_ty≥
 
ödex
 (
T
 *
ôem_
)

138  (
	gsize_ty≥
Ë((
	gôem_t
*Ë
	gôem_
)->
gë_¨øy_ödex
 ();

141 
	g¥iv©e
:

143 
°d
::
	tve˘‹
 <
	tT
*> 
	tôems_t
;

144 
ôems_t
 
	gôems
;

146 
¨øy_t
 (constárray_t&);

147 c⁄° 
	g¨øy_t
 &
	g›î©‹
 = (c⁄° 
¨øy_t
&);

	@atomic_counter.hpp

20 #i‚de‡
__ZMQ_ATOMIC_COUNTER_HPP_INCLUDED__


21 
	#__ZMQ_ATOMIC_COUNTER_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

24 
	~"∂©f‹m.hµ
"

26 #i‡
deföed
 
ZMQ_FORCE_MUTEXES


27 
	#ZMQ_ATOMIC_COUNTER_MUTEX


	)

28 #ñi‡(
deföed
 
__i386__
 || deföed 
__x86_64__
Ë&& deföed 
__GNUC__


29 
	#ZMQ_ATOMIC_COUNTER_X86


	)

30 #ñi‡
deföed
 
__ARM_ARCH_7A__
 && deföed 
__GNUC__


31 
	#ZMQ_ATOMIC_COUNTER_ARM


	)

32 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS


33 
	#ZMQ_ATOMIC_COUNTER_WINDOWS


	)

34 #ñi‡(
deföed
 
ZMQ_HAVE_SOLARIS
 || deföed 
ZMQ_HAVE_NETBSD
)

35 
	#ZMQ_ATOMIC_COUNTER_ATOMIC_H


	)

36 #ñi‡
deföed
 
__tûe__


37 
	#ZMQ_ATOMIC_COUNTER_TILE


	)

39 
	#ZMQ_ATOMIC_COUNTER_MUTEX


	)

42 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_MUTEX


43 
	~"muãx.hµ
"

44 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_WINDOWS


45 
	~"wödows.hµ
"

46 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_ATOMIC_H


47 
	~<©omic.h
>

48 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_TILE


49 
	~<¨ch/©omic.h
>

52 
«me•a˚
 
	gzmq


58 ˛as†
	c©omic_cou¡î_t


60 
	gpublic
:

62 
uöt32_t
 
	töãgî_t
;

64 
ölöe
 
©omic_cou¡î_t
 (
öãgî_t
 
vÆue_
 = 0) :

65 
vÆue
 (
vÆue_
)

69 
ölöe
 ~
©omic_cou¡î_t
 ()

74 
ölöe
 
£t
 (
öãgî_t
 
vÆue_
)

76 
vÆue
 = 
vÆue_
;

80 
ölöe
 
öãgî_t
 
add
 (öãgî_à
ö¸emít_
)

82 
öãgî_t
 
	gﬁd_vÆue
;

84 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_WINDOWS


85 
	gﬁd_vÆue
 = 
I¡îlockedExch™geAdd
 ((
LONG
*Ë&
vÆue
, 
ö¸emít_
);

86 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_ATOMIC_H


87 
öãgî_t
 
	g√w_vÆue
 = 
©omic_add_32_nv
 (&
vÆue
, 
ö¸emít_
);

88 
	gﬁd_vÆue
 = 
√w_vÆue
 - 
ö¸emít_
;

89 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_TILE


90 
	gﬁd_vÆue
 = 
¨ch_©omic_add
 (&
vÆue
, 
ö¸emít_
);

91 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_X86


92 
__asm__
 volatile (

94 : "Ù" (
ﬁd_vÆue
), "=m" (
	gvÆue
)

95 : "0" (
ö¸emít_
), "m" (
	gvÆue
)

97 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_ARM


98 
öãgî_t
 
	gÊag
, 
	gtmp
;

99 
__asm__
 volatile (

107 : "=&r"(
ﬁd_vÆue
), "=&r"(
	gÊag
), "=&r"(
	gtmp
), "+Qo"(
	gvÆue
)

108 : "Ir"(
ö¸emít_
), "r"(&
	gvÆue
)

110 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_MUTEX


111 
	gsync
.
lock
 ();

112 
	gﬁd_vÆue
 = 
vÆue
;

113 
	gvÆue
 +
ö¸emít_
;

114 
	gsync
.
u∆ock
 ();

116 #îr‹ 
©omic_cou¡î
 
is
 
nŸ
 
im∂emíãd
 
this
 
∂©f‹m


118  
	gﬁd_vÆue
;

122 
ölöe
 
boﬁ
 
sub
 (
öãgî_t
 
de¸emít
)

124 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_WINDOWS


125 
LONG
 
	gdñè
 = - ((LONGË
de¸emít
);

126 
öãgî_t
 
	gﬁd
 = 
I¡îlockedExch™geAdd
 ((
LONG
*Ë&
vÆue
, 
dñè
);

127  
	gﬁd
 - 
	gde¸emít
 != 0;

128 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_ATOMIC_H


129 
öt32_t
 
	gdñè
 = - ((öt32_tË
de¸emít
);

130 
öãgî_t
 
	gnv
 = 
©omic_add_32_nv
 (&
vÆue
, 
dñè
);

131  
	gnv
 != 0;

132 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_TILE


133 
öt32_t
 
	gdñè
 = - ((öt32_tË
de¸emít
);

134 
öãgî_t
 
	gnv
 = 
¨ch_©omic_add
 (&
vÆue
, 
dñè
);

135  
	gnv
 != 0;

136 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_X86


137 
öãgî_t
 
	gﬁdvÆ
 = -
de¸emít
;

138 vﬁ©ûê
öãgî_t
 *
	gvÆ
 = &
vÆue
;

139 
__asm__
 volatile ("lock; xaddl %0,%1"

140 : "Ù" (
ﬁdvÆ
), "=m" (*
	gvÆ
)

141 : "0" (
ﬁdvÆ
), "m" (*
	gvÆ
)

143  
	gﬁdvÆ
 !
de¸emít
;

144 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_ARM


145 
öãgî_t
 
	gﬁd_vÆue
, 
	gÊag
, 
	gtmp
;

146 
__asm__
 volatile (

154 : "=&r"(
ﬁd_vÆue
), "=&r"(
	gÊag
), "=&r"(
	gtmp
), "+Qo"(
	gvÆue
)

155 : "Ir"(
de¸emít
), "r"(&
	gvÆue
)

157  
	gﬁd_vÆue
 - 
	gde¸emít
 != 0;

158 #ñi‡
deföed
 
ZMQ_ATOMIC_COUNTER_MUTEX


159 
	gsync
.
lock
 ();

160 
	gvÆue
 -
de¸emít
;

161 
boﬁ
 
	gªsu…
 = 
vÆue
 ? 
åue
 : 
Ál£
;

162 
	gsync
.
u∆ock
 ();

163  
	gªsu…
;

165 #îr‹ 
©omic_cou¡î
 
is
 
nŸ
 
im∂emíãd
 
this
 
∂©f‹m


169 
ölöe
 
öãgî_t
 
gë
 ()

171  
	gvÆue
;

174 
	g¥iv©e
:

176 vﬁ©ûê
öãgî_t
 
vÆue
;

177 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_MUTEX


178 
muãx_t
 
	gsync
;

181 
©omic_cou¡î_t
 (constátomic_counter_t&);

182 c⁄° 
	g©omic_cou¡î_t
& 
	g›î©‹
 = (c⁄° 
©omic_cou¡î_t
&);

188 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_WINDOWS


189 #unde‡
ZMQ_ATOMIC_COUNTER_WINDOWS


191 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_ATOMIC_H


192 #unde‡
ZMQ_ATOMIC_COUNTER_ATOMIC_H


194 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_X86


195 #unde‡
ZMQ_ATOMIC_COUNTER_X86


197 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_ARM


198 #unde‡
ZMQ_ATOMIC_COUNTER_ARM


200 #i‡
deföed
 
ZMQ_ATOMIC_COUNTER_MUTEX


201 #unde‡
ZMQ_ATOMIC_COUNTER_MUTEX


	@atomic_ptr.hpp

20 #i‚de‡
__ZMQ_ATOMIC_PTR_HPP_INCLUDED__


21 
	#__ZMQ_ATOMIC_PTR_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_FORCE_MUTEXES


26 
	#ZMQ_ATOMIC_PTR_MUTEX


	)

27 #ñi‡(
deföed
 
__i386__
 || deföed 
__x86_64__
Ë&& deföed 
__GNUC__


28 
	#ZMQ_ATOMIC_PTR_X86


	)

29 #ñi‡
deföed
 
__ARM_ARCH_7A__
 && deföed 
__GNUC__


30 
	#ZMQ_ATOMIC_PTR_ARM


	)

31 #ñi‡
deföed
 
__tûe__


32 
	#ZMQ_ATOMIC_PTR_TILE


	)

33 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS


34 
	#ZMQ_ATOMIC_PTR_WINDOWS


	)

35 #ñi‡(
deföed
 
ZMQ_HAVE_SOLARIS
 || deföed 
ZMQ_HAVE_NETBSD
)

36 
	#ZMQ_ATOMIC_PTR_ATOMIC_H


	)

38 
	#ZMQ_ATOMIC_PTR_MUTEX


	)

41 #i‡
deföed
 
ZMQ_ATOMIC_PTR_MUTEX


42 
	~"muãx.hµ
"

43 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_WINDOWS


44 
	~"wödows.hµ
"

45 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_ATOMIC_H


46 
	~<©omic.h
>

47 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_TILE


48 
	~<¨ch/©omic.h
>

51 
«me•a˚
 
	gzmq


56 
	gãm∂©e
 <
ty≥«me
 
	gT
> cœs†
	c©omic_±r_t


58 
	gpublic
:

61 
ölöe
 
©omic_±r_t
 ()

63 
±r
 = 
NULL
;

67 
	gölöe
 ~
©omic_±r_t
 ()

74 
ölöe
 
£t
 (
T
 *
±r_
)

76 
	gthis
->
	g±r
 = 
±r_
;

81 
ölöe
 
T
 *
xchg
 (T *
vÆ_
)

83 #i‡
deföed
 
ZMQ_ATOMIC_PTR_WINDOWS


84  (
	gT
*Ë
I¡îlockedExch™gePoöãr
 ((
PVOID
*Ë&
±r
, 
vÆ_
);

85 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_ATOMIC_H


86  (
	gT
*Ë
©omic_sw≠_±r
 (&
±r
, 
vÆ_
);

87 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_TILE


88  (
	gT
*Ë
¨ch_©omic_exch™ge
 (&
±r
, 
vÆ_
);

89 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_X86


90 
T
 *
	gﬁd
;

91 
__asm__
 volatile (

93 : "Ù" (
ﬁd
), "=m" (
	g±r
)

94 : "m" (
±r
), "0" (
	gvÆ_
));

95  
	gﬁd
;

96 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_ARM


97 
T
* 
	gﬁd
;

98 
	gÊag
;

99 
__asm__
 volatile (

106 : "=&r"(
Êag
), "=&r"(
	gﬁd
), "+Qo"(
	g±r
)

107 : "r"(&
±r
), "r"(
	gvÆ_
)

109  
	gﬁd
;

110 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_MUTEX


111 
	gsync
.
lock
 ();

112 
T
 *
	gﬁd
 = (T*Ë
±r
;

113 
	g±r
 = 
vÆ_
;

114 
	gsync
.
u∆ock
 ();

115  
	gﬁd
;

117 #îr‹ 
©omic_±r
 
is
 
nŸ
 
im∂emíãd
 
this
 
∂©f‹m


125 
ölöe
 
T
 *
ˇs
 (T *
cmp_
, T *
vÆ_
)

127 #i‡
deföed
 
ZMQ_ATOMIC_PTR_WINDOWS


128  (
	gT
*Ë
I¡îlockedCom∑ªExch™gePoöãr
 (

129 (vﬁ©ûê
PVOID
*Ë&
±r
, 
vÆ_
, 
cmp_
);

130 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_ATOMIC_H


131  (
	gT
*Ë
©omic_ˇs_±r
 (&
±r
, 
cmp_
, 
vÆ_
);

132 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_TILE


133  (
	gT
*Ë
¨ch_©omic_vÆ_com∑ª_™d_exch™ge
 (&
±r
, 
cmp_
, 
vÆ_
);

134 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_X86


135 
T
 *
	gﬁd
;

136 
__asm__
 volatile (

138 : "˜" (
ﬁd
), "=m" (
	g±r
)

139 : "r" (
vÆ_
), "m" (
	g±r
), "0" (
	gcmp_
)

141  
	gﬁd
;

142 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_ARM


143 
T
 *
	gﬁd
;

144 
	gÊag
;

145 
__asm__
 volatile (

155 : "=&r"(
Êag
), "=&r"(
	gﬁd
), "+Qo"(
	g±r
)

156 : "r"(&
±r
), "r"(
	gcmp_
), "r"(
	gvÆ_
)

158  
	gﬁd
;

159 #ñi‡
deföed
 
ZMQ_ATOMIC_PTR_MUTEX


160 
	gsync
.
lock
 ();

161 
T
 *
	gﬁd
 = (T*Ë
±r
;

162 i‡(
	g±r
 =
cmp_
)

163 
±r
 = 
vÆ_
;

164 
	gsync
.
u∆ock
 ();

165  
	gﬁd
;

167 #îr‹ 
©omic_±r
 
is
 
nŸ
 
im∂emíãd
 
this
 
∂©f‹m


171 
	g¥iv©e
:

173 vﬁ©ûê
T
 *
±r
;

174 #i‡
deföed
 
ZMQ_ATOMIC_PTR_MUTEX


175 
muãx_t
 
	gsync
;

178 
©omic_±r_t
 (constátomic_ptr_t&);

179 c⁄° 
	g©omic_±r_t
 &
	g›î©‹
 = (c⁄° 
©omic_±r_t
&);

185 #i‡
deföed
 
ZMQ_ATOMIC_PTR_WINDOWS


186 #unde‡
ZMQ_ATOMIC_PTR_WINDOWS


188 #i‡
deföed
 
ZMQ_ATOMIC_PTR_ATOMIC_H


189 #unde‡
ZMQ_ATOMIC_PTR_ATOMIC_H


191 #i‡
deföed
 
ZMQ_ATOMIC_PTR_X86


192 #unde‡
ZMQ_ATOMIC_PTR_X86


194 #i‡
deföed
 
ZMQ_ATOMIC_PTR_ARM


195 #unde‡
ZMQ_ATOMIC_PTR_ARM


197 #i‡
deföed
 
ZMQ_ATOMIC_PTR_MUTEX


198 #unde‡
ZMQ_ATOMIC_PTR_MUTEX


	@blob.hpp

20 #i‚de‡
__ZMQ_BLOB_HPP_INCLUDED__


21 
	#__ZMQ_BLOB_HPP_INCLUDED__


	)

23 
	~<°rög
>

24 
	~<°rög.h
>

30 #i‡(
deföed
(
__GNUC__
) && (__GNUC__ >= 3) && (__GNUC__ <= 4))

31 
«me•a˚
 
	g°d


33 
	gãm∂©e
<>

34 
	gch¨_åaôs
<>

36 
	tch¨_ty≥
;

38 
	töt_ty≥
;

39 
°ªampos
 
	tpos_ty≥
;

40 
°ªamoff
 
	toff_ty≥
;

41 
mb°©e_t
 
	t°©e_ty≥
;

44 
assign
(
ch¨_ty≥
& 
__c1
, c⁄° ch¨_ty≥& 
__c2
)

45 { 
	g__c1
 = 
__c2
; }

47 
boﬁ


48 
eq
(c⁄° 
ch¨_ty≥
& 
__c1
, c⁄° ch¨_ty≥& 
__c2
)

49 {  
	g__c1
 =
__c2
; }

51 
boﬁ


52 
…
(c⁄° 
ch¨_ty≥
& 
__c1
, c⁄° ch¨_ty≥& 
__c2
)

53 {  
	g__c1
 < 
	g__c2
; }

56 
com∑ª
(c⁄° 
ch¨_ty≥
* 
__s1
, c⁄° ch¨_ty≥* 
__s2
, 
size_t
 
__n
)

58 
size_t
 
	g__i
 = 0; __ò< 
	g__n
; ++__i)

59 i‡(!
eq
(
__s1
[
__i
], 
__s2
[__i]))

60  
…
(
__s1
[
__i
], 
__s2
[__i]) ? -1 : 1;

64 
size_t


65 
Àngth
(c⁄° 
ch¨_ty≥
* 
__s
)

67 c⁄° 
ch¨_ty≥
* 
	g__p
 = 
__s
;

68 
	g__p
)

69 ++
	g__p
;

70  (
	g__p
 - 
	g__s
);

73 c⁄° 
ch¨_ty≥
*

74 
föd
(c⁄° 
ch¨_ty≥
* 
__s
, 
size_t
 
__n
, c⁄° ch¨_ty≥& 
__a
)

76 c⁄° 
ch¨_ty≥
* 
	g__p
 = 
__s
; 
size_t
(
__p
 - __sË< 
	g__n
; ++__p)

77 i‡(*
	g__p
 =
__a
Ë 
__p
;

81 
ch¨_ty≥
*

82 
move
(
ch¨_ty≥
* 
__s1
, c⁄° ch¨_ty≥* 
__s2
, 
size_t
 
__n
)

83 {  (
	gch¨_ty≥
*Ë
memmove
(
__s1
, 
__s2
, 
__n
 * (
ch¨_ty≥
)); }

85 
ch¨_ty≥
*

86 
c›y
(
ch¨_ty≥
* 
__s1
, c⁄° ch¨_ty≥* 
__s2
, 
size_t
 
__n
)

87 {  (
	gch¨_ty≥
*Ë
mem˝y
(
__s1
, 
__s2
, 
__n
 * (
ch¨_ty≥
)); }

89 
ch¨_ty≥
*

90 
assign
(
ch¨_ty≥
* 
__s
, 
size_t
 
__n
, ch¨_ty≥ 
__a
)

92 
ch¨_ty≥
* 
	g__p
 = 
__s
; __∞< 
	g__s
 + 
	g__n
; ++__p)

93 
assign
(*
__p
, 
__a
);

94  
	g__s
;

97 
ch¨_ty≥


98 
to_ch¨_ty≥
(c⁄° 
öt_ty≥
& 
__c
)

99 {  
ch¨_ty≥
(
__c
); }

101 
öt_ty≥


102 
to_öt_ty≥
(c⁄° 
ch¨_ty≥
& 
__c
Ë{  
öt_ty≥
(__c); }

104 
boﬁ


105 
eq_öt_ty≥
(c⁄° 
öt_ty≥
& 
__c1
, c⁄° i¡_ty≥& 
__c2
)

106 {  
	g__c1
 =
__c2
; }

108 
öt_ty≥


109 
eof
(Ë{  
	g°©ic_ˇ°
<
	göt_ty≥
>(-1); }

111 
öt_ty≥


112 
nŸ_eof
(c⁄° 
öt_ty≥
& 
__c
)

113 {  
eq_öt_ty≥
(
__c
, 
eof
()Ë? 
öt_ty≥
(0) : __c; }

120 
«me•a˚
 
	gzmq


124 
	g°d
::
	tbasic_°rög
 <> 
	tblob_t
;

	@clock.cpp

20 
	~"˛ock.hµ
"

21 
	~"∂©f‹m.hµ
"

22 
	~"likñy.hµ
"

23 
	~"c⁄fig.hµ
"

24 
	~"îr.hµ
"

25 
	~"muãx.hµ
"

27 
	~<°ddef.h
>

29 #i‡
deföed
 
_MSC_VER


30 #i‡
deföed
 
_WIN32_WCE


31 
	~<cmnöåö.h
>

33 
	~<öåö.h
>

37 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS


38 
	~<sys/time.h
>

41 #i‡
deföed
 
HAVE_CLOCK_GETTIME
 || deföed 
HAVE_GETHRTIME


42 
	~<time.h
>

45 #ifde‡
ZMQ_HAVE_WINDOWS


46 
ULONGLONG
 (*
	tf_com∑tibÀ_gë_tick_cou¡64
)();

48 
	gzmq
::
muãx_t
 
com∑tibÀ_gë_tick_cou¡64_muãx
;

50 
ULONGLONG
 
	$com∑tibÀ_gë_tick_cou¡64
()

52 
com∑tibÀ_gë_tick_cou¡64_muãx
.
	`lock
();

53 
DWORD
 
s_wøp
 = 0;

54 
DWORD
 
s_œ°_tick
 = 0;

55 c⁄° 
DWORD
 
cuºít_tick
 = ::
	`GëTickCou¡
();

56 i‡(
cuºít_tick
 < 
s_œ°_tick
)

57 ++
s_wøp
;

59 
s_œ°_tick
 = 
cuºít_tick
;

60 c⁄° 
ULONGLONG
 
ªsu…
 = (
°©ic_ˇ°
<ULONGLONG>(
s_wøp
Ë<< 32Ë+ sètic_ˇ°<ULONGLONG>(
cuºít_tick
);

61 
com∑tibÀ_gë_tick_cou¡64_muãx
.
	`u∆ock
();

62  
ªsu…
;

63 
	}
}

65 
f_com∑tibÀ_gë_tick_cou¡64
 
	$öô_com∑tibÀ_gë_tick_cou¡64
()

67 
f_com∑tibÀ_gë_tick_cou¡64
 
func
 = 
NULL
;

68 
HMODULE
 
moduÀ
 = ::
	`LﬂdLibøryA
("Kernel32.dll");

69 i‡(
moduÀ
 !
NULL
)

70 
func
 = 
ªöãΩªt_ˇ°
<
f_com∑tibÀ_gë_tick_cou¡64
>(::
	`GëProcAddªss
(
moduÀ
, "GetTickCount64"));

72 i‡(
func
 =
NULL
)

73 
func
 = 
com∑tibÀ_gë_tick_cou¡64
;

75  
func
;

76 
	}
}

78 
f_com∑tibÀ_gë_tick_cou¡64
 
	gmy_gë_tick_cou¡64
 = 
öô_com∑tibÀ_gë_tick_cou¡64
();

81 
	gzmq
::
˛ock_t
::
	$˛ock_t
 () :

82 
	`œ°_tsc
 (
	`rdtsc
 ()),

83 #ifde‡
ZMQ_HAVE_WINDOWS


84 
	`œ°_time
 (
°©ic_ˇ°
<
uöt64_t
>((*
my_gë_tick_cou¡64
)()))

86 
	`œ°_time
 (
	`now_us
 () / 1000)

89 
	}
}

91 
	gzmq
::
˛ock_t
::~
	$˛ock_t
 ()

93 
	}
}

95 
uöt64_t
 
zmq
::
˛ock_t
::
	$now_us
 ()

97 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


100 
LARGE_INTEGER
 
ticksPîSec⁄d
;

101 
	`QuîyPîf‹m™˚Fªquícy
 (&
ticksPîSec⁄d
);

104 
LARGE_INTEGER
 
tick
;

105 
	`QuîyPîf‹m™˚Cou¡î
 (&
tick
);

109 
ticks_div
 = 
ticksPîSec⁄d
.
QuadP¨t
 / 1000000.0;

110  (
uöt64_t
Ë(
tick
.
QuadP¨t
 / 
ticks_div
);

112 #ñi‡
deföed
 
HAVE_CLOCK_GETTIME
 && deföed 
CLOCK_MONOTONIC


115 
time•ec
 
tv
;

116 
rc
 = 
	`˛ock_gëtime
 (
CLOCK_MONOTONIC
, &
tv
);

120 if–
rc
 != 0) {

122 
timevÆ
 
tv
;

123 
rc
 = 
	`gëtimeofday
 (&
tv
, 
NULL
);

124 
	`î∫o_as£π
 (
rc
 == 0);

125  (
tv
.
tv_£c
 * (
uöt64_t
Ë1000000 +Åv.
tv_u£c
);

127  (
tv
.
tv_£c
 * (
uöt64_t
Ë1000000 +Åv.
tv_n£c
 / 1000);

129 #ñi‡
deföed
 
HAVE_GETHRTIME


131  (
	`gëhπime
 () / 1000);

136 
timevÆ
 
tv
;

137 
rc
 = 
	`gëtimeofday
 (&
tv
, 
NULL
);

138 
	`î∫o_as£π
 (
rc
 == 0);

139  (
tv
.
tv_£c
 * (
uöt64_t
Ë1000000 +Åv.
tv_u£c
);

142 
	}
}

144 
uöt64_t
 
	gzmq
::
˛ock_t
::
	$now_ms
 ()

146 
uöt64_t
 
tsc
 = 
	`rdtsc
 ();

149 i‡(!
tsc
)

151 #ifde‡
ZMQ_HAVE_WINDOWS


156  
°©ic_ˇ°
<
uöt64_t
>((*
my_gë_tick_cou¡64
)());

158  
	`now_us
 () / 1000;

165 i‡(
	`likñy
 (
tsc
 - 
œ°_tsc
 <(
˛ock_¥ecisi⁄
 / 2) &&Åsc >=Üast_tsc))

166  
œ°_time
;

168 
œ°_tsc
 = 
tsc
;

169 #ifde‡
ZMQ_HAVE_WINDOWS


170 
œ°_time
 = 
°©ic_ˇ°
<
uöt64_t
>((*
my_gë_tick_cou¡64
)());

172 
œ°_time
 = 
	`now_us
 () / 1000;

174  
œ°_time
;

175 
	}
}

177 
uöt64_t
 
	gzmq
::
˛ock_t
::
	$rdtsc
 ()

179 #i‡(
deföed
 
_MSC_VER
 && (deföed 
_M_IX86
 || deföed 
_M_X64
))

180  
	`__rdtsc
 ();

181 #ñi‡(
deföed
 
__GNUC__
 && (deföed 
__i386__
 || deföed 
__x86_64__
))

182 
uöt32_t
 
low
, 
high
;

183 
__asm__
 vﬁ©ûê("rdtsc" : "˜" (
low
), "=d" (
high
));

184  (
uöt64_t
Ë
high
 << 32 | 
low
;

185 #ñi‡(
deföed
 
__SUNPRO_CC
 && (__SUNPRO_CC >0x5100Ë&& (deföed 
__i386
 || \

186 
deföed
 
__amd64
 || deföed 
__x86_64
))

188 
uöt64_t
 
u64vÆ
;

189 
uöt32_t
 
u32vÆ
 [2];

190 } 
tsc
;

191 
	`asm
("rdtsc" : "˜" (
tsc
.
u32vÆ
 [0]), "=d" (tsc.u32val [1]));

192  
tsc
.
u64vÆ
;

193 #ñi‡
	`deföed
(
__s390__
)

194 
uöt64_t
 
tsc
;

195 
	`asm
("\t°ck\t%0\n" : "=Q" (
tsc
) : : "cc");

196 (
tsc
);

200 
	}
}

	@clock.hpp

20 #i‚de‡
__ZMQ_CLOCK_HPP_INCLUDED__


21 
	#__ZMQ_CLOCK_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


28 ˛as†
	c˛ock_t


30 
	gpublic
:

32 
˛ock_t
 ();

33 ~
˛ock_t
 ();

36 
uöt64_t
 
rdtsc
 ();

39 
uöt64_t
 
now_us
 ();

43 
uöt64_t
 
now_ms
 ();

45 
	g¥iv©e
:

48 
uöt64_t
 
œ°_tsc
;

51 
uöt64_t
 
	gœ°_time
;

53 
˛ock_t
 (const clock_t&);

54 c⁄° 
	g˛ock_t
 &
	g›î©‹
 = (c⁄° 
˛ock_t
&);

	@command.hpp

20 #i‚de‡
__ZMQ_COMMAND_HPP_INCLUDED__


21 
	#__ZMQ_COMMAND_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


28 
˛ass
 
	gobje˘_t
;

29 
˛ass
 
	gown_t
;

30 
	gi_ígöe
;

31 
˛ass
 
	gpùe_t
;

32 
˛ass
 
	gsockë_ba£_t
;

36 
	scomm™d_t


39 
	gzmq
::
obje˘_t
 *
de°ö©i⁄
;

41 
	ety≥_t


43 
	g°›
,

44 
	g∂ug
,

45 
	gown
,

46 
	g©èch
,

47 
	gböd
,

48 
	ga˘iv©e_ªad
,

49 
	ga˘iv©e_wrôe
,

50 
	ghiccup
,

51 
	gpùe_ãrm
,

52 
	gpùe_ãrm_ack
,

53 
	gãrm_ªq
,

54 
	gãrm
,

55 
	gãrm_ack
,

56 
	gª≠
,

57 
	gª≠ed
,

58 
	gö¥oc_c⁄√˘ed
,

59 
	gd⁄e


60 } 
	gty≥
;

67 } 
	g°›
;

71 } 
	g∂ug
;

75 
	gzmq
::
own_t
 *
obje˘
;

76 } 
	gown
;

81 
i_ígöe
 *
	gígöe
;

82 } 
	g©èch
;

87 
	gzmq
::
pùe_t
 *
pùe
;

88 } 
	gböd
;

93 } 
	ga˘iv©e_ªad
;

98 
uöt64_t
 
	gmsgs_ªad
;

99 } 
	ga˘iv©e_wrôe
;

105 *
	gpùe
;

106 } 
	ghiccup
;

111 } 
	gpùe_ãrm
;

115 } 
	gpùe_ãrm_ack
;

120 
	gzmq
::
own_t
 *
obje˘
;

121 } 
	gãrm_ªq
;

125 
	glögî
;

126 } 
	gãrm
;

131 } 
	gãrm_ack
;

136 
	gzmq
::
sockë_ba£_t
 *
sockë
;

137 } 
	gª≠
;

141 } 
	gª≠ed
;

146 } 
	gd⁄e
;

148 } 
	g¨gs
;

	@config.hpp

20 #i‚de‡
__ZMQ_CONFIG_HPP_INCLUDED__


21 
	#__ZMQ_CONFIG_HPP_INCLUDED__


	)

23 
«me•a˚
 
	gzmq


33 
	gmesßge_pùe_gønuœrôy
 = 256,

36 
	gcomm™d_pùe_gønuœrôy
 = 16,

44 
	göbound_pﬁl_øã
 = 100,

50 
	gö_b©ch_size
 = 8192,

56 
	gout_b©ch_size
 = 8192,

59 
	gmax_wm_dñè
 = 1024,

62 
	gmax_io_evíts
 = 256,

68 
	gmax_comm™d_dñay
 = 3000000,

75 
	g˛ock_¥ecisi⁄
 = 1000000,

78 
	gpgm_max_çdu
 = 1500,

82 
	gsig«Àr_p‹t
 = 5905

	@ctx.cpp

20 
	~"∂©f‹m.hµ
"

21 #ifde‡
ZMQ_HAVE_WINDOWS


22 
	~"wödows.hµ
"

24 
	~<uni°d.h
>

27 
	~<√w
>

28 
	~<°rög.h
>

30 
	~"˘x.hµ
"

31 
	~"sockë_ba£.hµ
"

32 
	~"io_thªad.hµ
"

33 
	~"ª≠î.hµ
"

34 
	~"pùe.hµ
"

35 
	~"îr.hµ
"

36 
	~"msg.hµ
"

38 #ifde‡
HAVE_LIBSODIUM


39 
	~<sodium.h
>

42 
	#ZMQ_CTX_TAG_VALUE_GOOD
 0xabadˇ„

	)

43 
	#ZMQ_CTX_TAG_VALUE_BAD
 0xdódbìf

	)

45 
	$˛ù≥d_maxsockë
(
max_ªque°ed
)

47 i‡(
max_ªque°ed
 >
zmq
::
pﬁÀr_t
::
	`max_fds
 () && zmq::poller_t::max_fds () != -1)

48 
max_ªque°ed
 = 
zmq
::
pﬁÀr_t
::
	`max_fds
 () - 1;

50  
max_ªque°ed
;

51 
	}
}

53 
	gzmq
::
˘x_t
::
	$˘x_t
 () :

54 
	`èg
 (
ZMQ_CTX_TAG_VALUE_GOOD
),

55 
	`°¨tög
 (
åue
),

56 
	`ãrmö©ög
 (
Ál£
),

57 
	`ª≠î
 (
NULL
),

58 
	`¶Ÿ_cou¡
 (0),

59 
	`¶Ÿs
 (
NULL
),

60 
	`max_sockës
 (
	`˛ù≥d_maxsockë
 (
ZMQ_MAX_SOCKETS_DFLT
)),

61 
	`io_thªad_cou¡
 (
ZMQ_IO_THREADS_DFLT
),

62 
	$ùv6
 (
Ál£
)

64 #ifde‡
HAVE_FORK


65 
pid
 = 
	`gëpid
();

67 
	}
}

69 
boﬁ
 
	gzmq
::
˘x_t
::
	$check_èg
 ()

71  
èg
 =
ZMQ_CTX_TAG_VALUE_GOOD
;

72 
	}
}

74 
	gzmq
::
˘x_t
::~
	$˘x_t
 ()

77 
	`zmq_as£π
 (
sockës
.
	`em±y
 ());

81 
io_thªads_t
::
size_ty≥
 
i
 = 0; i !
io_thªads
.
	`size
 (); i++)

82 
io_thªads
 [
i
]->
	`°›
 ();

85 
io_thªads_t
::
size_ty≥
 
i
 = 0; i !
io_thªads
.
	`size
 (); i++)

86 
dñëe
 
io_thªads
 [
i
];

89 
dñëe
 
ª≠î
;

94 
	`‰ì
 (
¶Ÿs
);

98 #ifde‡
HAVE_LIBSODIUM


99 
	`øndombyãs_˛o£
();

103 
èg
 = 
ZMQ_CTX_TAG_VALUE_BAD
;

104 
	}
}

106 
	gzmq
::
˘x_t
::
	$ãrmö©e
 ()

109 
≥ndög_c⁄√˘i⁄s_t
 
c›y
 = 
≥ndög_c⁄√˘i⁄s
;

110 
≥ndög_c⁄√˘i⁄s_t
::
ôî©‹
 
p
 = 
c›y
.
	`begö
 ();Ö !c›y.
	`íd
 (); ++p) {

111 
zmq
::
sockë_ba£_t
 *
s
 = 
	`¸óã_sockë
 (
ZMQ_PAIR
);

112 
s
->
	`böd
 (
p
->
fú°
.
	`c_°r
 ());

113 
s
->
	`˛o£
 ();

116 
¶Ÿ_sync
.
	`lock
 ();

117 i‡(!
°¨tög
) {

119 #ifde‡
HAVE_FORK


120 i‡(
pid
 !
	`gëpid
())

124 
sockës_t
::
size_ty≥
 
i
 = 0; i !
sockës
.
	`size
 (); i++)

126 
sockës
[
i
]->
	`gë_maûbox
()->
	`f‹ked
();

129 
ãrm_maûbox
.
	`f‹ked
();

134 
boﬁ
 
ª°¨ãd
 = 
ãrmö©ög
;

135 
ãrmö©ög
 = 
åue
;

138 i‡(!
ª°¨ãd
) {

143 
sockës_t
::
size_ty≥
 
i
 = 0; i !
sockës
.
	`size
 (); i++)

144 
sockës
 [
i
]->
	`°›
 ();

145 i‡(
sockës
.
	`em±y
 ())

146 
ª≠î
->
	`°›
 ();

148 
¶Ÿ_sync
.
	`u∆ock
();

151 
comm™d_t
 
cmd
;

152 
rc
 = 
ãrm_maûbox
.
	`ªcv
 (&
cmd
, -1);

153 i‡(
rc
 =-1 && 
î∫o
 =
EINTR
)

155 
	`î∫o_as£π
 (
rc
 == 0);

156 
	`zmq_as£π
 (
cmd
.
ty≥
 =
comm™d_t
::
d⁄e
);

157 
¶Ÿ_sync
.
	`lock
 ();

158 
	`zmq_as£π
 (
sockës
.
	`em±y
 ());

160 
¶Ÿ_sync
.
	`u∆ock
 ();

163 
dñëe
 
this
;

166 
	}
}

168 
	gzmq
::
˘x_t
::
	$shutdown
 ()

170 
¶Ÿ_sync
.
	`lock
 ();

171 i‡(!
°¨tög
 && !
ãrmö©ög
) {

172 
ãrmö©ög
 = 
åue
;

177 
sockës_t
::
size_ty≥
 
i
 = 0; i !
sockës
.
	`size
 (); i++)

178 
sockës
 [
i
]->
	`°›
 ();

179 i‡(
sockës
.
	`em±y
 ())

180 
ª≠î
->
	`°›
 ();

182 
¶Ÿ_sync
.
	`u∆ock
 ();

185 
	}
}

187 
	gzmq
::
˘x_t
::
	$£t
 (
›ti⁄_
, 
›tvÆ_
)

189 
rc
 = 0;

190 i‡(
›ti⁄_
 =
ZMQ_MAX_SOCKETS
 && 
›tvÆ_
 >1 && o±vÆ_ =
	`˛ù≥d_maxsockë
 (optval_)) {

191 
›t_sync
.
	`lock
 ();

192 
max_sockës
 = 
›tvÆ_
;

193 
›t_sync
.
	`u∆ock
 ();

196 i‡(
›ti⁄_
 =
ZMQ_IO_THREADS
 && 
›tvÆ_
 >= 0) {

197 
›t_sync
.
	`lock
 ();

198 
io_thªad_cou¡
 = 
›tvÆ_
;

199 
›t_sync
.
	`u∆ock
 ();

202 i‡(
›ti⁄_
 =
ZMQ_IPV6
 && 
›tvÆ_
 >= 0) {

203 
›t_sync
.
	`lock
 ();

204 
ùv6
 = (
›tvÆ_
 != 0);

205 
›t_sync
.
	`u∆ock
 ();

208 
î∫o
 = 
EINVAL
;

209 
rc
 = -1;

211  
rc
;

212 
	}
}

214 
	gzmq
::
˘x_t
::
	$gë
 (
›ti⁄_
)

216 
rc
 = 0;

217 i‡(
›ti⁄_
 =
ZMQ_MAX_SOCKETS
)

218 
rc
 = 
max_sockës
;

220 i‡(
›ti⁄_
 =
ZMQ_IO_THREADS
)

221 
rc
 = 
io_thªad_cou¡
;

223 i‡(
›ti⁄_
 =
ZMQ_IPV6
)

224 
rc
 = 
ùv6
;

226 
î∫o
 = 
EINVAL
;

227 
rc
 = -1;

229  
rc
;

230 
	}
}

232 
	gzmq
::
sockë_ba£_t
 *
zmq
::
˘x_t
::
	$¸óã_sockë
 (
ty≥_
)

234 
¶Ÿ_sync
.
	`lock
 ();

235 i‡(
	`u∆ikñy
 (
°¨tög
)) {

237 
°¨tög
 = 
Ál£
;

240 
›t_sync
.
	`lock
 ();

241 
mazmq
 = 
max_sockës
;

242 
ios
 = 
io_thªad_cou¡
;

243 
›t_sync
.
	`u∆ock
 ();

244 
¶Ÿ_cou¡
 = 
mazmq
 + 
ios
 + 2;

245 
¶Ÿs
 = (
maûbox_t
**Ë
	`mÆloc
 ( (maûbox_t*Ë* 
¶Ÿ_cou¡
);

246 
	`Æloc_as£π
 (
¶Ÿs
);

249 
¶Ÿs
 [
ãrm_tid
] = &
ãrm_maûbox
;

252 
ª≠î
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ª≠î_t
 (
this
, 
ª≠î_tid
);

253 
	`Æloc_as£π
 (
ª≠î
);

254 
¶Ÿs
 [
ª≠î_tid
] = 
ª≠î
->
	`gë_maûbox
 ();

255 
ª≠î
->
	`°¨t
 ();

258 
i
 = 2; i !
ios
 + 2; i++) {

259 
io_thªad_t
 *
io_thªad
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`io_thªad_t
 (
this
, 
i
);

260 
	`Æloc_as£π
 (
io_thªad
);

261 
io_thªads
.
	`push_back
 (
io_thªad
);

262 
¶Ÿs
 [
i
] = 
io_thªad
->
	`gë_maûbox
 ();

263 
io_thªad
->
	`°¨t
 ();

267 
öt32_t
 
i
 = (öt32_tË
¶Ÿ_cou¡
 - 1;

268 
i
 >(
öt32_t
Ë
ios
 + 2; i--) {

269 
em±y_¶Ÿs
.
	`push_back
 (
i
);

270 
¶Ÿs
 [
i
] = 
NULL
;

275 i‡(
ãrmö©ög
) {

276 
¶Ÿ_sync
.
	`u∆ock
 ();

277 
î∫o
 = 
ETERM
;

278  
NULL
;

282 i‡(
em±y_¶Ÿs
.
	`em±y
 ()) {

283 
¶Ÿ_sync
.
	`u∆ock
 ();

284 
î∫o
 = 
EMFILE
;

285  
NULL
;

289 
uöt32_t
 
¶Ÿ
 = 
em±y_¶Ÿs
.
	`back
 ();

290 
em±y_¶Ÿs
.
	`p›_back
 ();

293 
sid
 = ((Ë
max_sockë_id
.
	`add
 (1)) + 1;

296 
sockë_ba£_t
 *
s
 = sockë_ba£_t::
	`¸óã
 (
ty≥_
, 
this
, 
¶Ÿ
, 
sid
);

297 i‡(!
s
) {

298 
em±y_¶Ÿs
.
	`push_back
 (
¶Ÿ
);

299 
¶Ÿ_sync
.
	`u∆ock
 ();

300  
NULL
;

302 
sockës
.
	`push_back
 (
s
);

303 
¶Ÿs
 [
¶Ÿ
] = 
s
->
	`gë_maûbox
 ();

305 
¶Ÿ_sync
.
	`u∆ock
 ();

306  
s
;

307 
	}
}

309 
	gzmq
::
˘x_t
::
	$de°roy_sockë
 (
˛ass
 
sockë_ba£_t
 *
sockë_
)

311 
¶Ÿ_sync
.
	`lock
 ();

314 
uöt32_t
 
tid
 = 
sockë_
->
	`gë_tid
 ();

315 
em±y_¶Ÿs
.
	`push_back
 (
tid
);

316 
¶Ÿs
 [
tid
] = 
NULL
;

319 
sockës
.
	`îa£
 (
sockë_
);

323 i‡(
ãrmö©ög
 && 
sockës
.
	`em±y
 ())

324 
ª≠î
->
	`°›
 ();

326 
¶Ÿ_sync
.
	`u∆ock
 ();

327 
	}
}

329 
	gzmq
::
obje˘_t
 *
zmq
::
˘x_t
::
	$gë_ª≠î
 ()

331  
ª≠î
;

332 
	}
}

334 
	gzmq
::
˘x_t
::
	$£nd_comm™d
 (
uöt32_t
 
tid_
, c⁄° 
comm™d_t
 &
comm™d_
)

336 
¶Ÿs
 [
tid_
]->
	`£nd
 (
comm™d_
);

337 
	}
}

339 
	gzmq
::
io_thªad_t
 *
zmq
::
˘x_t
::
	$choo£_io_thªad
 (
uöt64_t
 
afföôy_
)

341 i‡(
io_thªads
.
	`em±y
 ())

342  
NULL
;

345 
mö_lﬂd
 = -1;

346 
io_thªad_t
 *
£À˘ed_io_thªad
 = 
NULL
;

347 
io_thªads_t
::
size_ty≥
 
i
 = 0; i !
io_thªads
.
	`size
 (); i++) {

348 i‡(!
afföôy_
 || (afföôy_ & (
	`uöt64_t
 (1Ë<< 
i
))) {

349 
lﬂd
 = 
io_thªads
 [
i
]->
	`gë_lﬂd
 ();

350 i‡(
£À˘ed_io_thªad
 =
NULL
 || 
lﬂd
 < 
mö_lﬂd
) {

351 
mö_lﬂd
 = 
lﬂd
;

352 
£À˘ed_io_thªad
 = 
io_thªads
 [
i
];

356  
£À˘ed_io_thªad
;

357 
	}
}

359 
	gzmq
::
˘x_t
::
	$ªgi°î_ídpoöt
 (c⁄° *
addr_
, 
ídpoöt_t
 &
ídpoöt_
)

361 
ídpoöts_sync
.
	`lock
 ();

363 
boﬁ
 
ö£πed
 = 
ídpoöts
.
	`ö£π
 (
ídpoöts_t
::
	`vÆue_ty≥
 (

364 
°d
::
	`°rög
 (
addr_
), 
ídpoöt_
)).
£c⁄d
;

366 
ídpoöts_sync
.
	`u∆ock
 ();

368 i‡(!
ö£πed
) {

369 
î∫o
 = 
EADDRINUSE
;

374 
	}
}

376 
	gzmq
::
˘x_t
::
	$uƒegi°î_ídpoöts
 (
sockë_ba£_t
 *
sockë_
)

378 
ídpoöts_sync
.
	`lock
 ();

380 
ídpoöts_t
::
ôî©‹
 
ô
 = 
ídpoöts
.
	`begö
 ();

381 
ô
 !
ídpoöts
.
	`íd
 ()) {

382 i‡(
ô
->
£c⁄d
.
sockë
 =
sockë_
) {

383 
ídpoöts_t
::
ôî©‹
 
to_îa£
 = 
ô
;

384 ++
ô
;

385 
ídpoöts
.
	`îa£
 (
to_îa£
);

388 ++
ô
;

391 
ídpoöts_sync
.
	`u∆ock
 ();

392 
	}
}

394 
	gzmq
::
ídpoöt_t
 
zmq
::
˘x_t
::
	$föd_ídpoöt
 (c⁄° *
addr_
)

396 
ídpoöts_sync
.
	`lock
 ();

398 
ídpoöts_t
::
ôî©‹
 
ô
 = 
ídpoöts
.
	`föd
 (
addr_
);

399 i‡(
ô
 =
ídpoöts
.
	`íd
 ()) {

400 
ídpoöts_sync
.
	`u∆ock
 ();

401 
î∫o
 = 
ECONNREFUSED
;

402 
ídpoöt_t
 
em±y
 = {
NULL
, 
	`›ti⁄s_t
()};

403  
em±y
;

405 
ídpoöt_t
 
ídpoöt
 = 
ô
->
£c⁄d
;

411 
ídpoöt
.
sockë
->
	`öc_£qnum
 ();

413 
ídpoöts_sync
.
	`u∆ock
 ();

414  
ídpoöt
;

415 
	}
}

417 
	gzmq
::
˘x_t
::
	$≥nd_c⁄√˘i⁄
 (c⁄° *
addr_
, 
≥ndög_c⁄√˘i⁄_t
 &
≥ndög_c⁄√˘i⁄_
)

419 
ídpoöts_sync
.
	`lock
 ();

421 
ídpoöts_t
::
ôî©‹
 
ô
 = 
ídpoöts
.
	`föd
 (
addr_
);

422 i‡(
ô
 =
ídpoöts
.
	`íd
 ())

425 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
sockë
->
	`öc_£qnum
 ();

426 
≥ndög_c⁄√˘i⁄s
.
	`ö£π
 (
≥ndög_c⁄√˘i⁄s_t
::
	`vÆue_ty≥
 (
°d
::
	`°rög
 (
addr_
), 
≥ndög_c⁄√˘i⁄_
));

431 
	`c⁄√˘_ö¥oc_sockës
(
ô
->
£c⁄d
.
sockë
, it->£c⁄d.
›ti⁄s
, 
≥ndög_c⁄√˘i⁄_
, 
c⁄√˘_side
);

434 
ídpoöts_sync
.
	`u∆ock
 ();

435 
	}
}

437 
	gzmq
::
˘x_t
::
	$c⁄√˘_≥ndög
 (c⁄° *
addr_
, 
zmq
::
sockë_ba£_t
 *
böd_sockë_
)

439 
ídpoöts_sync
.
	`lock
 ();

441 
°d
::
∑ú
<
≥ndög_c⁄√˘i⁄s_t
::
ôî©‹
,Öídög_c⁄√˘i⁄s_t::ôî©‹> 
≥ndög
 = 
≥ndög_c⁄√˘i⁄s
.
	`equÆ_ønge
(
addr_
);

443 
≥ndög_c⁄√˘i⁄s_t
::
ôî©‹
 
p
 = 
≥ndög
.
fú°
;Ö !≥ndög.
£c⁄d
; ++p)

445 
	`c⁄√˘_ö¥oc_sockës
(
böd_sockë_
, 
ídpoöts
[
addr_
].
›ti⁄s
, 
p
->
£c⁄d
, 
böd_side
);

448 
≥ndög_c⁄√˘i⁄s
.
	`îa£
(
≥ndög
.
fú°
,Öídög.
£c⁄d
);

450 
ídpoöts_sync
.
	`u∆ock
 ();

451 
	}
}

453 
	gzmq
::
˘x_t
::
	$c⁄√˘_ö¥oc_sockës
(
zmq
::
sockë_ba£_t
 *
böd_sockë_
, 
›ti⁄s_t
& 
böd_›ti⁄s
, 
≥ndög_c⁄√˘i⁄_t
 &
≥ndög_c⁄√˘i⁄_
, 
side
 
side_
)

455 
böd_sockë_
->
	`öc_£qnum
();

456 
≥ndög_c⁄√˘i⁄_
.
böd_pùe
->
	`£t_tid
(
böd_sockë_
->
	`gë_tid
());

458 i‡(!
böd_›ti⁄s
.
ªcv_idítôy
) {

459 
msg_t
 
msg
;

460 c⁄° 
boﬁ
 
ok
 = 
≥ndög_c⁄√˘i⁄_
.
böd_pùe
->
	`ªad
 (&
msg
);

461 
	`zmq_as£π
 (
ok
);

462 c⁄° 
rc
 = 
msg
.
	`˛o£
 ();

463 
	`î∫o_as£π
 (
rc
 == 0);

466 i‡(
side_
 =
böd_side
)

468 
comm™d_t
 
cmd
;

469 
cmd
.
ty≥
 = 
comm™d_t
::
böd
;

470 
cmd
.
¨gs
.
böd
.
pùe
 = 
≥ndög_c⁄√˘i⁄_
.
böd_pùe
;

471 
böd_sockë_
->
	`¥o˚ss_comm™d
(
cmd
);

472 
böd_sockë_
->
	`£nd_ö¥oc_c⁄√˘ed
(
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
sockë
);

476 
≥ndög_c⁄√˘i⁄_
.
c⁄√˘_pùe
->
	`£nd_böd
(
böd_sockë_
,Öídög_c⁄√˘i⁄_.
böd_pùe
, 
Ál£
);

479 
¢dhwm
 = 0;

480 i‡(
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
¢dhwm
 !0 && 
böd_›ti⁄s
.
rcvhwm
 != 0)

481 
¢dhwm
 = 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.¢dhwm + 
böd_›ti⁄s
.
rcvhwm
;

482 
rcvhwm
 = 0;

483 i‡(
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
rcvhwm
 !0 && 
böd_›ti⁄s
.
¢dhwm
 != 0)

484 
rcvhwm
 = 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.rcvhwm + 
böd_›ti⁄s
.
¢dhwm
;

486 
boﬁ
 
c⁄Ê©e
 = 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.conflate &&

487 (
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
ty≥
 =
ZMQ_DEALER
 ||

488 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
ty≥
 =
ZMQ_PULL
 ||

489 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
ty≥
 =
ZMQ_PUSH
 ||

490 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 ||

491 
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
ty≥
 =
ZMQ_SUB
);

493 
hwms
 [2] = {
c⁄Ê©e
? -1 : 
¢dhwm
, c⁄Ê©e? -1 : 
rcvhwm
};

494 
≥ndög_c⁄√˘i⁄_
.
c⁄√˘_pùe
->
	`£t_hwms
(
hwms
 [1], hwms [0]);

495 
≥ndög_c⁄√˘i⁄_
.
böd_pùe
->
	`£t_hwms
(
hwms
 [0], hwms [1]);

497 i‡(
≥ndög_c⁄√˘i⁄_
.
ídpoöt
.
›ti⁄s
.
ªcv_idítôy
) {

498 
msg_t
 
id
;

499 
rc
 = 
id
.
	`öô_size
 (
böd_›ti⁄s
.
idítôy_size
);

500 
	`î∫o_as£π
 (
rc
 == 0);

501 
	`mem˝y
 (
id
.
	`d©a
 (), 
böd_›ti⁄s
.
idítôy
, böd_›ti⁄s.
idítôy_size
);

502 
id
.
	`£t_Êags
 (
msg_t
::
idítôy
);

503 
boﬁ
 
wrôãn
 = 
≥ndög_c⁄√˘i⁄_
.
böd_pùe
->
	`wrôe
 (&
id
);

504 
	`zmq_as£π
 (
wrôãn
);

505 
≥ndög_c⁄√˘i⁄_
.
böd_pùe
->
	`Êush
 ();

507 
	}
}

512 
	gzmq
::
©omic_cou¡î_t
 
zmq
::
˘x_t
::
max_sockë_id
;

	@ctx.hpp

20 #i‚de‡
__ZMQ_CTX_HPP_INCLUDED__


21 
	#__ZMQ_CTX_HPP_INCLUDED__


	)

23 
	~<m≠
>

24 
	~<ve˘‹
>

25 
	~<°rög
>

26 
	~<°d¨g.h
>

28 
	~"maûbox.hµ
"

29 
	~"¨øy.hµ
"

30 
	~"c⁄fig.hµ
"

31 
	~"muãx.hµ
"

32 
	~"°döt.hµ
"

33 
	~"›ti⁄s.hµ
"

34 
	~"©omic_cou¡î.hµ
"

36 
«me•a˚
 
	gzmq


39 
˛ass
 
	gobje˘_t
;

40 
˛ass
 
	gio_thªad_t
;

41 
˛ass
 
	gsockë_ba£_t
;

42 
˛ass
 
	gª≠î_t
;

43 
˛ass
 
	gpùe_t
;

48 
	sídpoöt_t


50 
sockë_ba£_t
 *
	gsockë
;

51 
›ti⁄s_t
 
	g›ti⁄s
;

54 
	s≥ndög_c⁄√˘i⁄_t


56 
ídpoöt_t
 
	gídpoöt
;

57 
pùe_t
* 
	gc⁄√˘_pùe
;

58 
pùe_t
* 
	gböd_pùe
;

64 ˛as†
	c˘x_t


66 
	gpublic
:

69 
˘x_t
 ();

72 
boﬁ
 
check_èg
 ();

78 
ãrmö©e
 ();

87 
shutdown
();

90 
£t
 (
›ti⁄_
, 
›tvÆ_
);

91 
gë
 (
›ti⁄_
);

94 
	gzmq
::
sockë_ba£_t
 *
¸óã_sockë
 (
ty≥_
);

95 
de°roy_sockë
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

98 
£nd_comm™d
 (
uöt32_t
 
tid_
, c⁄° 
comm™d_t
 &
comm™d_
);

103 
	gzmq
::
io_thªad_t
 *
choo£_io_thªad
 (
uöt64_t
 
afföôy_
);

106 
	gzmq
::
obje˘_t
 *
gë_ª≠î
 ();

109 
ªgi°î_ídpoöt
 (c⁄° *
addr_
, 
ídpoöt_t
 &
ídpoöt_
);

110 
uƒegi°î_ídpoöts
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

111 
ídpoöt_t
 
föd_ídpoöt
 (c⁄° *
addr_
);

112 
≥nd_c⁄√˘i⁄
 (c⁄° *
addr_
, 
≥ndög_c⁄√˘i⁄_t
 &
≥ndög_c⁄√˘i⁄_
);

113 
c⁄√˘_≥ndög
 (c⁄° *
addr_
, 
zmq
::
sockë_ba£_t
 *
böd_sockë_
);

116 
	gãrm_tid
 = 0,

117 
	gª≠î_tid
 = 1

120 ~
˘x_t
 ();

122 
	g¥iv©e
:

126 
uöt32_t
 
èg
;

131 
	g¨øy_t
 <
	tsockë_ba£_t
> 
	tsockës_t
;

132 
sockës_t
 
	gsockës
;

135 
	g°d
::
	tve˘‹
 <
	tuöt32_t
> 
	tem±y_¶Ÿs_t
;

136 
em±y_¶Ÿs_t
 
	gem±y_¶Ÿs
;

140 
boﬁ
 
	g°¨tög
;

143 
boﬁ
 
	gãrmö©ög
;

149 
muãx_t
 
	g¶Ÿ_sync
;

152 
	gzmq
::
ª≠î_t
 *
ª≠î
;

155 
	g°d
::
	tve˘‹
 <
	tzmq
::
	tio_thªad_t
*> 
	tio_thªads_t
;

156 
io_thªads_t
 
	gio_thªads
;

159 
uöt32_t
 
	g¶Ÿ_cou¡
;

160 
maûbox_t
 **
	g¶Ÿs
;

163 
maûbox_t
 
	gãrm_maûbox
;

166 
	g°d
::
	tm≠
 <
	t°d
::
	t°rög
, 
	tídpoöt_t
> 
	tídpoöts_t
;

167 
ídpoöts_t
 
	gídpoöts
;

170 
	g°d
::
	tmu…im≠
 <
	t°d
::
	t°rög
, 
	t≥ndög_c⁄√˘i⁄_t
> 
	t≥ndög_c⁄√˘i⁄s_t
;

171 
≥ndög_c⁄√˘i⁄s_t
 
	g≥ndög_c⁄√˘i⁄s
;

174 
muãx_t
 
	gídpoöts_sync
;

177 
©omic_cou¡î_t
 
	gmax_sockë_id
;

180 
	gmax_sockës
;

183 
	gio_thªad_cou¡
;

186 
boﬁ
 
	gùv6
;

189 
muãx_t
 
	g›t_sync
;

191 
˘x_t
 (const ctx_t&);

192 c⁄° 
	g˘x_t
 &
	g›î©‹
 = (c⁄° 
˘x_t
&);

194 #ifde‡
HAVE_FORK


196 
pid_t
 
	gpid
;

198 
	eside
 { 
	gc⁄√˘_side
, 
	gböd_side
 };

199 
c⁄√˘_ö¥oc_sockës
(
zmq
::
sockë_ba£_t
 *
böd_sockë_
, 
›ti⁄s_t
& 
böd_›ti⁄s
, 
≥ndög_c⁄√˘i⁄_t
 &
≥ndög_c⁄√˘i⁄_
, 
side
 
side_
);

	@curve_client.cpp

20 
	~"∂©f‹m.hµ
"

22 #ifde‡
HAVE_LIBSODIUM


24 
	~<sodium.h
>

26 #ifde‡
ZMQ_HAVE_WINDOWS


27 
	~"wödows.hµ
"

30 
	~"msg.hµ
"

31 
	~"£ssi⁄_ba£.hµ
"

32 
	~"îr.hµ
"

33 
	~"curve_˛õ¡.hµ
"

34 
	~"wúe.hµ
"

36 
	gzmq
::
curve_˛õ¡_t
::
	$curve_˛õ¡_t
 (c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

37 
	`mech™ism_t
 (
›ti⁄s_
),

38 
	$°©e
 (
£nd_hñlo
)

40 
	`mem˝y
 (
public_key
, 
›ti⁄s_
.
curve_public_key
, 
¸y±o_box_PUBLICKEYBYTES
);

41 
	`mem˝y
 (
£¸ë_key
, 
›ti⁄s_
.
curve_£¸ë_key
, 
¸y±o_box_SECRETKEYBYTES
);

42 
	`mem˝y
 (
£rvî_key
, 
›ti⁄s_
.
curve_£rvî_key
, 
¸y±o_box_PUBLICKEYBYTES
);

45 c⁄° 
rc
 = 
	`¸y±o_box_key∑ú
 (
˙_public
, 
˙_£¸ë
);

46 
	`zmq_as£π
 (
rc
 == 0);

47 
	}
}

49 
	gzmq
::
curve_˛õ¡_t
::~
	$curve_˛õ¡_t
 ()

51 
	}
}

53 
zmq
::
curve_˛õ¡_t
::
	$√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
)

55 
rc
 = 0;

57 
°©e
) {

58 
£nd_hñlo
:

59 
rc
 = 
	`¥odu˚_hñlo
 (
msg_
);

60 i‡(
rc
 == 0)

61 
°©e
 = 
ex≥˘_wñcome
;

63 
£nd_öôüã
:

64 
rc
 = 
	`¥odu˚_öôüã
 (
msg_
);

65 i‡(
rc
 == 0)

66 
°©e
 = 
ex≥˘_ªady
;

69 
î∫o
 = 
EAGAIN
;

70 
rc
 = -1;

72  
rc
;

73 
	}
}

75 
	gzmq
::
curve_˛õ¡_t
::
	$¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
)

77 
rc
 = 0;

79 
°©e
) {

80 
ex≥˘_wñcome
:

81 
rc
 = 
	`¥o˚ss_wñcome
 (
msg_
);

82 i‡(
rc
 == 0)

83 
°©e
 = 
£nd_öôüã
;

85 
ex≥˘_ªady
:

86 
rc
 = 
	`¥o˚ss_ªady
 (
msg_
);

87 i‡(
rc
 == 0)

88 
°©e
 = 
c⁄√˘ed
;

91 
î∫o
 = 
EPROTO
;

92 
rc
 = -1;

95 i‡(
rc
 == 0) {

96 
rc
 = 
msg_
->
	`˛o£
 ();

97 
	`î∫o_as£π
 (
rc
 == 0);

98 
rc
 = 
msg_
->
	`öô
 ();

99 
	`î∫o_as£π
 (
rc
 == 0);

101  
rc
;

102 
	}
}

104 
	gzmq
::
curve_˛õ¡_t
::
	$ícode
 (
msg_t
 *
msg_
)

106 
	`zmq_as£π
 (
°©e
 =
c⁄√˘ed
);

108 
uöt8_t
 
Êags
 = 0;

109 i‡(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
)

110 
Êags
 |= 0x01;

112 
uöt8_t
 
mesßge_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

113 
	`mem˝y
 (
mesßge_n⁄˚
, "CurveZMQMESSAGEC", 16);

114 
	`mem˝y
 (
mesßge_n⁄˚
 + 16, &
˙_n⁄˚
, 8);

116 c⁄° 
size_t
 
mÀn
 = 
¸y±o_box_ZEROBYTES
 + 1 + 
msg_
->
	`size
 ();

118 
uöt8_t
 *
mesßge_∂aöãxt
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
mÀn
));

119 
	`Æloc_as£π
 (
mesßge_∂aöãxt
);

121 
	`mem£t
 (
mesßge_∂aöãxt
, 0, 
¸y±o_box_ZEROBYTES
);

122 
mesßge_∂aöãxt
 [
¸y±o_box_ZEROBYTES
] = 
Êags
;

123 
	`mem˝y
 (
mesßge_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 1,

124 
msg_
->
	`d©a
 (), msg_->
	`size
 ());

126 
uöt8_t
 *
mesßge_box
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
mÀn
));

127 
	`Æloc_as£π
 (
mesßge_box
);

129 
rc
 = 
	`¸y±o_box_a·înm
 (
mesßge_box
, 
mesßge_∂aöãxt
,

130 
mÀn
, 
mesßge_n⁄˚
, 
˙_¥ecom
);

131 
	`zmq_as£π
 (
rc
 == 0);

133 
rc
 = 
msg_
->
	`˛o£
 ();

134 
	`zmq_as£π
 (
rc
 == 0);

136 
rc
 = 
msg_
->
	`öô_size
 (16 + 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

137 
	`zmq_as£π
 (
rc
 == 0);

139 
uöt8_t
 *
mesßge
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

141 
	`mem˝y
 (
mesßge
, "\x07MESSAGE", 8);

142 
	`mem˝y
 (
mesßge
 + 8, &
˙_n⁄˚
, 8);

143 
	`mem˝y
 (
mesßge
 + 16, 
mesßge_box
 + 
¸y±o_box_BOXZEROBYTES
,

144 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

146 
	`‰ì
 (
mesßge_∂aöãxt
);

147 
	`‰ì
 (
mesßge_box
);

149 
˙_n⁄˚
++;

152 
	}
}

154 
	gzmq
::
curve_˛õ¡_t
::
	$decode
 (
msg_t
 *
msg_
)

156 
	`zmq_as£π
 (
°©e
 =
c⁄√˘ed
);

158 i‡(
msg_
->
	`size
 () < 33) {

159 
î∫o
 = 
EPROTO
;

163 c⁄° 
uöt8_t
 *
mesßge
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

164 i‡(
	`memcmp
 (
mesßge
, "\x07MESSAGE", 8)) {

165 
î∫o
 = 
EPROTO
;

169 
uöt8_t
 
mesßge_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

170 
	`mem˝y
 (
mesßge_n⁄˚
, "CurveZMQMESSAGES", 16);

171 
	`mem˝y
 (
mesßge_n⁄˚
 + 16, 
mesßge
 + 8, 8);

173 c⁄° 
size_t
 
˛í
 = 
¸y±o_box_BOXZEROBYTES
 + (
msg_
->
	`size
 () - 16);

175 
uöt8_t
 *
mesßge_∂aöãxt
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
˛í
));

176 
	`Æloc_as£π
 (
mesßge_∂aöãxt
);

178 
uöt8_t
 *
mesßge_box
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
˛í
));

179 
	`Æloc_as£π
 (
mesßge_box
);

181 
	`mem£t
 (
mesßge_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

182 
	`mem˝y
 (
mesßge_box
 + 
¸y±o_box_BOXZEROBYTES
,

183 
mesßge
 + 16, 
msg_
->
	`size
 () - 16);

185 
rc
 = 
	`¸y±o_box_›í_a·înm
 (
mesßge_∂aöãxt
, 
mesßge_box
,

186 
˛í
, 
mesßge_n⁄˚
, 
˙_¥ecom
);

187 i‡(
rc
 == 0) {

188 
rc
 = 
msg_
->
	`˛o£
 ();

189 
	`zmq_as£π
 (
rc
 == 0);

191 
rc
 = 
msg_
->
	`öô_size
 (
˛í
 - 1 - 
¸y±o_box_ZEROBYTES
);

192 
	`zmq_as£π
 (
rc
 == 0);

194 c⁄° 
uöt8_t
 
Êags
 = 
mesßge_∂aöãxt
 [
¸y±o_box_ZEROBYTES
];

195 i‡(
Êags
 & 0x01)

196 
msg_
->
	`£t_Êags
 (
msg_t
::
m‹e
);

198 
	`mem˝y
 (
msg_
->
	`d©a
 (),

199 
mesßge_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 1,

200 
msg_
->
	`size
 ());

203 
î∫o
 = 
EPROTO
;

205 
	`‰ì
 (
mesßge_∂aöãxt
);

206 
	`‰ì
 (
mesßge_box
);

208  
rc
;

209 
	}
}

211 
boﬁ
 
	gzmq
::
curve_˛õ¡_t
::
	$is_h™dshake_com∂ëe
 () const

213  
°©e
 =
c⁄√˘ed
;

214 
	}
}

216 
	gzmq
::
curve_˛õ¡_t
::
	$¥odu˚_hñlo
 (
msg_t
 *
msg_
)

218 
uöt8_t
 
hñlo_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

219 
uöt8_t
 
hñlo_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 64];

220 
uöt8_t
 
hñlo_box
 [
¸y±o_box_BOXZEROBYTES
 + 80];

223 
	`mem˝y
 (
hñlo_n⁄˚
, "CurveZMQHELLO---", 16);

224 
	`mem˝y
 (
hñlo_n⁄˚
 + 16, &
˙_n⁄˚
, 8);

227 
	`mem£t
 (
hñlo_∂aöãxt
, 0,  hello_plaintext);

229 
rc
 = 
	`¸y±o_box
 (
hñlo_box
, 
hñlo_∂aöãxt
,

230  
hñlo_∂aöãxt
,

231 
hñlo_n⁄˚
, 
£rvî_key
, 
˙_£¸ë
);

232 
	`zmq_as£π
 (
rc
 == 0);

234 
rc
 = 
msg_
->
	`öô_size
 (200);

235 
	`î∫o_as£π
 (
rc
 == 0);

236 
uöt8_t
 *
hñlo
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

238 
	`mem˝y
 (
hñlo
, "\x05HELLO", 6);

240 
	`mem˝y
 (
hñlo
 + 6, "\1\0", 2);

242 
	`mem£t
 (
hñlo
 + 8, 0, 72);

244 
	`mem˝y
 (
hñlo
 + 80, 
˙_public
, 
¸y±o_box_PUBLICKEYBYTES
);

246 
	`mem˝y
 (
hñlo
 + 112, 
hñlo_n⁄˚
 + 16, 8);

248 
	`mem˝y
 (
hñlo
 + 120, 
hñlo_box
 + 
¸y±o_box_BOXZEROBYTES
, 80);

250 
˙_n⁄˚
++;

253 
	}
}

255 
	gzmq
::
curve_˛õ¡_t
::
	$¥o˚ss_wñcome
 (
msg_t
 *
msg_
)

257 i‡(
msg_
->
	`size
 () != 168) {

258 
î∫o
 = 
EPROTO
;

262 c⁄° 
uöt8_t
 * 
wñcome
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

263 i‡(
	`memcmp
 (
wñcome
, "\x07WELCOME", 8)) {

264 
î∫o
 = 
EPROTO
;

268 
uöt8_t
 
wñcome_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

269 
uöt8_t
 
wñcome_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 128];

270 
uöt8_t
 
wñcome_box
 [
¸y±o_box_BOXZEROBYTES
 + 144];

273 
	`mem£t
 (
wñcome_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

274 
	`mem˝y
 (
wñcome_box
 + 
¸y±o_box_BOXZEROBYTES
, 
wñcome
 + 24, 144);

276 
	`mem˝y
 (
wñcome_n⁄˚
, "WELCOME-", 8);

277 
	`mem˝y
 (
wñcome_n⁄˚
 + 8, 
wñcome
 + 8, 16);

279 
rc
 = 
	`¸y±o_box_›í
 (
wñcome_∂aöãxt
, 
wñcome_box
,

280  
wñcome_box
,

281 
wñcome_n⁄˚
, 
£rvî_key
, 
˙_£¸ë
);

282 i‡(
rc
 != 0) {

283 
î∫o
 = 
EPROTO
;

287 
	`mem˝y
 (
˙_£rvî
, 
wñcome_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
, 32);

288 
	`mem˝y
 (
˙_cookõ
, 
wñcome_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 32, 16 + 80);

291 
rc
 = 
	`¸y±o_box_bef‹ím
 (
˙_¥ecom
, 
˙_£rvî
, 
˙_£¸ë
);

292 
	`zmq_as£π
 (
rc
 == 0);

295 
	}
}

297 
	gzmq
::
curve_˛õ¡_t
::
	$¥odu˚_öôüã
 (
msg_t
 *
msg_
)

299 
uöt8_t
 
vouch_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

300 
uöt8_t
 
vouch_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 64];

301 
uöt8_t
 
vouch_box
 [
¸y±o_box_BOXZEROBYTES
 + 80];

304 
	`mem£t
 (
vouch_∂aöãxt
, 0, 
¸y±o_box_ZEROBYTES
);

305 
	`mem˝y
 (
vouch_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
, 
˙_public
, 32);

306 
	`mem˝y
 (
vouch_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 32, 
£rvî_key
, 32);

308 
	`mem˝y
 (
vouch_n⁄˚
, "VOUCH---", 8);

309 
	`øndombyãs
 (
vouch_n⁄˚
 + 8, 16);

311 
rc
 = 
	`¸y±o_box
 (
vouch_box
, 
vouch_∂aöãxt
,

312  
vouch_∂aöãxt
,

313 
vouch_n⁄˚
, 
˙_£rvî
, 
£¸ë_key
);

314 
	`zmq_as£π
 (
rc
 == 0);

317 
uöt8_t
 
öôüã_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

318 
uöt8_t
 
öôüã_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 128 + 256];

319 
uöt8_t
 
öôüã_box
 [
¸y±o_box_BOXZEROBYTES
 + 144 + 256];

322 
	`mem£t
 (
öôüã_∂aöãxt
, 0, 
¸y±o_box_ZEROBYTES
);

323 
	`mem˝y
 (
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
,

324 
public_key
, 32);

325 
	`mem˝y
 (
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 32,

326 
vouch_n⁄˚
 + 8, 16);

327 
	`mem˝y
 (
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 48,

328 
vouch_box
 + 
¸y±o_box_BOXZEROBYTES
, 80);

331 
uöt8_t
 *
±r
 = 
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 128;

334 c⁄° *
sockë_ty≥
 = 
	`sockë_ty≥_°rög
 (
›ti⁄s
.
ty≥
);

335 
±r
 +
	`add_¥›îty
 (±r, "Sockë-Ty≥", 
sockë_ty≥
, 
	`°æí
 (socket_type));

338 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_REQ


339 || 
›ti⁄s
.
ty≥
 =
ZMQ_DEALER


340 || 
›ti⁄s
.
ty≥
 =
ZMQ_ROUTER
)

341 
±r
 +
	`add_¥›îty
 (ptr, "Identity",

342 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

344 c⁄° 
size_t
 
mÀn
 = 
±r
 - 
öôüã_∂aöãxt
;

346 
	`mem˝y
 (
öôüã_n⁄˚
, "CurveZMQINITIATE", 16);

347 
	`mem˝y
 (
öôüã_n⁄˚
 + 16, &
˙_n⁄˚
, 8);

349 
rc
 = 
	`¸y±o_box
 (
öôüã_box
, 
öôüã_∂aöãxt
,

350 
mÀn
, 
öôüã_n⁄˚
, 
˙_£rvî
, 
˙_£¸ë
);

351 
	`zmq_as£π
 (
rc
 == 0);

353 
rc
 = 
msg_
->
	`öô_size
 (113 + 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

354 
	`î∫o_as£π
 (
rc
 == 0);

356 
uöt8_t
 *
öôüã
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

358 
	`mem˝y
 (
öôüã
, "\x08INITIATE", 9);

360 
	`mem˝y
 (
öôüã
 + 9, 
˙_cookõ
, 96);

362 
	`mem˝y
 (
öôüã
 + 105, &
˙_n⁄˚
, 8);

364 
	`mem˝y
 (
öôüã
 + 113, 
öôüã_box
 + 
¸y±o_box_BOXZEROBYTES
,

365 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

366 
˙_n⁄˚
++;

369 
	}
}

371 
	gzmq
::
curve_˛õ¡_t
::
	$¥o˚ss_ªady
 (
msg_t
 *
msg_
)

373 i‡(
msg_
->
	`size
 () < 30) {

374 
î∫o
 = 
EPROTO
;

378 c⁄° 
uöt8_t
 *
ªady
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

379 i‡(
	`memcmp
 (
ªady
, "\x05READY", 6)) {

380 
î∫o
 = 
EPROTO
;

384 c⁄° 
size_t
 
˛í
 = (
msg_
->
	`size
 (Ë- 14Ë+ 
¸y±o_box_BOXZEROBYTES
;

386 
uöt8_t
 
ªady_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

387 
uöt8_t
 
ªady_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 256];

388 
uöt8_t
 
ªady_box
 [
¸y±o_box_BOXZEROBYTES
 + 16 + 256];

390 
	`mem£t
 (
ªady_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

391 
	`mem˝y
 (
ªady_box
 + 
¸y±o_box_BOXZEROBYTES
,

392 
ªady
 + 14, 
˛í
 - 
¸y±o_box_BOXZEROBYTES
);

394 
	`mem˝y
 (
ªady_n⁄˚
, "CurveZMQREADY---", 16);

395 
	`mem˝y
 (
ªady_n⁄˚
 + 16, 
ªady
 + 6, 8);

397 
rc
 = 
	`¸y±o_box_›í_a·înm
 (
ªady_∂aöãxt
, 
ªady_box
,

398 
˛í
, 
ªady_n⁄˚
, 
˙_¥ecom
);

400 i‡(
rc
 != 0) {

401 
î∫o
 = 
EPROTO
;

405 
rc
 = 
	`∑r£_mëad©a
 (
ªady_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
,

406 
˛í
 - 
¸y±o_box_ZEROBYTES
);

407  
rc
;

408 
	}
}

	@curve_client.hpp

20 #i‚de‡
__ZMQ_CURVE_CLIENT_HPP_INCLUDED__


21 
	#__ZMQ_CURVE_CLIENT_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #ifde‡
HAVE_LIBSODIUM


26 
	~<sodium.h
>

28 #i‡
¸y±o_box_NONCEBYTES
 != 24 \

29 || 
	g¸y±o_box_PUBLICKEYBYTES
 != 32 \

30 || 
¸y±o_box_SECRETKEYBYTES
 != 32 \

31 || 
¸y±o_box_ZEROBYTES
 != 32 \

32 || 
¸y±o_box_BOXZEROBYTES
 != 16

36 
	~"mech™ism.hµ
"

37 
	~"›ti⁄s.hµ
"

39 
«me•a˚
 
zmq


42 
˛ass
 
msg_t
;

43 
˛ass
 
	g£ssi⁄_ba£_t
;

45 ˛as†
	ccurve_˛õ¡_t
 : 
public
 
mech™ism_t


47 
public
:

49 
curve_˛õ¡_t
 (c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

50 
	gvútuÆ
 ~
curve_˛õ¡_t
 ();

53 
vútuÆ
 
√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
);

54 
vútuÆ
 
¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
);

55 
vútuÆ
 
ícode
 (
msg_t
 *
msg_
);

56 
vútuÆ
 
decode
 (
msg_t
 *
msg_
);

57 
vútuÆ
 
boﬁ
 
is_h™dshake_com∂ëe
 () const;

59 
	g¥iv©e
:

61 
	e°©e_t
 {

62 
£nd_hñlo
,

63 
	gex≥˘_wñcome
,

64 
	g£nd_öôüã
,

65 
	gex≥˘_ªady
,

66 
	gc⁄√˘ed


70 
°©e_t
 
	g°©e
;

73 
uöt8_t
 
	gpublic_key
 [
¸y±o_box_PUBLICKEYBYTES
];

76 
uöt8_t
 
	g£¸ë_key
 [
¸y±o_box_SECRETKEYBYTES
];

79 
uöt8_t
 
	g˙_public
 [
¸y±o_box_PUBLICKEYBYTES
];

82 
uöt8_t
 
	g˙_£¸ë
 [
¸y±o_box_SECRETKEYBYTES
];

85 
uöt8_t
 
	g£rvî_key
 [
¸y±o_box_PUBLICKEYBYTES
];

88 
uöt8_t
 
	g˙_£rvî
 [
¸y±o_box_PUBLICKEYBYTES
];

91 
uöt8_t
 
	g˙_cookõ
 [16 + 80];

94 
uöt8_t
 
	g˙_¥ecom
 [
¸y±o_box_BEFORENMBYTES
];

97 
uöt64_t
 
	g˙_n⁄˚
;

99 
¥odu˚_hñlo
 (
msg_t
 *
msg_
);

100 
¥o˚ss_wñcome
 (
msg_t
 *
msg_
);

101 
¥odu˚_öôüã
 (
msg_t
 *
msg_
);

102 
¥o˚ss_ªady
 (
msg_t
 *
msg_
);

	@curve_server.cpp

20 
	~"∂©f‹m.hµ
"

22 #ifde‡
HAVE_LIBSODIUM


23 
	~<sodium.h
>

25 #ifde‡
ZMQ_HAVE_WINDOWS


26 
	~"wödows.hµ
"

29 
	~"msg.hµ
"

30 
	~"£ssi⁄_ba£.hµ
"

31 
	~"îr.hµ
"

32 
	~"curve_£rvî.hµ
"

33 
	~"wúe.hµ
"

35 
	gzmq
::
curve_£rvî_t
::
	$curve_£rvî_t
 (
£ssi⁄_ba£_t
 *
£ssi⁄_
,

36 c⁄° 
°d
::
°rög
 &
≥î_addªss_
,

37 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

38 
	`mech™ism_t
 (
›ti⁄s_
),

39 
	`£ssi⁄
 (
£ssi⁄_
),

40 
	`≥î_addªss
 (
≥î_addªss_
),

41 
	`°©e
 (
ex≥˘_hñlo
),

42 
	`ex≥˘ög_z≠_ª∂y
 (
Ál£
),

43 
	$˙_n⁄˚
 (1)

46 
	`mem˝y
 (
£¸ë_key
, 
›ti⁄s_
.
curve_£¸ë_key
, 
¸y±o_box_SECRETKEYBYTES
);

49 c⁄° 
rc
 = 
	`¸y±o_box_key∑ú
 (
˙_public
, 
˙_£¸ë
);

50 
	`zmq_as£π
 (
rc
 == 0);

51 
	}
}

53 
	gzmq
::
curve_£rvî_t
::~
	$curve_£rvî_t
 ()

55 
	}
}

57 
zmq
::
curve_£rvî_t
::
	$√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
)

59 
rc
 = 0;

61 
°©e
) {

62 
£nd_wñcome
:

63 
rc
 = 
	`¥odu˚_wñcome
 (
msg_
);

64 i‡(
rc
 == 0)

65 
°©e
 = 
ex≥˘_öôüã
;

67 
£nd_ªady
:

68 
rc
 = 
	`¥odu˚_ªady
 (
msg_
);

69 i‡(
rc
 == 0)

70 
°©e
 = 
c⁄√˘ed
;

73 
î∫o
 = 
EAGAIN
;

74 
rc
 = -1;

77  
rc
;

78 
	}
}

80 
	gzmq
::
curve_£rvî_t
::
	$¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
)

82 
rc
 = 0;

84 
°©e
) {

85 
ex≥˘_hñlo
:

86 
rc
 = 
	`¥o˚ss_hñlo
 (
msg_
);

87 i‡(
rc
 == 0)

88 
°©e
 = 
£nd_wñcome
;

90 
ex≥˘_öôüã
:

91 
rc
 = 
	`¥o˚ss_öôüã
 (
msg_
);

92 i‡(
rc
 == 0)

93 
°©e
 = 
ex≥˘ög_z≠_ª∂y
? 
ex≥˘_z≠_ª∂y
: 
£nd_ªady
;

96 
î∫o
 = 
EPROTO
;

97 
rc
 = -1;

100 i‡(
rc
 == 0) {

101 
rc
 = 
msg_
->
	`˛o£
 ();

102 
	`î∫o_as£π
 (
rc
 == 0);

103 
rc
 = 
msg_
->
	`öô
 ();

104 
	`î∫o_as£π
 (
rc
 == 0);

106  
rc
;

107 
	}
}

109 
	gzmq
::
curve_£rvî_t
::
	$ícode
 (
msg_t
 *
msg_
)

111 
	`zmq_as£π
 (
°©e
 =
c⁄√˘ed
);

113 c⁄° 
size_t
 
mÀn
 = 
¸y±o_box_ZEROBYTES
 + 1 + 
msg_
->
	`size
 ();

115 
uöt8_t
 
mesßge_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

116 
	`mem˝y
 (
mesßge_n⁄˚
, "CurveZMQMESSAGES", 16);

117 
	`mem˝y
 (
mesßge_n⁄˚
 + 16, &
˙_n⁄˚
, 8);

119 
uöt8_t
 
Êags
 = 0;

120 i‡(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
)

121 
Êags
 |= 0x01;

123 
uöt8_t
 *
mesßge_∂aöãxt
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
mÀn
));

124 
	`Æloc_as£π
 (
mesßge_∂aöãxt
);

126 
	`mem£t
 (
mesßge_∂aöãxt
, 0, 
¸y±o_box_ZEROBYTES
);

127 
mesßge_∂aöãxt
 [
¸y±o_box_ZEROBYTES
] = 
Êags
;

128 
	`mem˝y
 (
mesßge_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 1,

129 
msg_
->
	`d©a
 (), msg_->
	`size
 ());

131 
uöt8_t
 *
mesßge_box
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
mÀn
));

132 
	`Æloc_as£π
 (
mesßge_box
);

134 
rc
 = 
	`¸y±o_box_a·înm
 (
mesßge_box
, 
mesßge_∂aöãxt
,

135 
mÀn
, 
mesßge_n⁄˚
, 
˙_¥ecom
);

136 
	`zmq_as£π
 (
rc
 == 0);

138 
rc
 = 
msg_
->
	`˛o£
 ();

139 
	`zmq_as£π
 (
rc
 == 0);

141 
rc
 = 
msg_
->
	`öô_size
 (16 + 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

142 
	`zmq_as£π
 (
rc
 == 0);

144 
uöt8_t
 *
mesßge
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

146 
	`mem˝y
 (
mesßge
, "\x07MESSAGE", 8);

147 
	`mem˝y
 (
mesßge
 + 8, &
˙_n⁄˚
, 8);

148 
	`mem˝y
 (
mesßge
 + 16, 
mesßge_box
 + 
¸y±o_box_BOXZEROBYTES
,

149 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

151 
	`‰ì
 (
mesßge_∂aöãxt
);

152 
	`‰ì
 (
mesßge_box
);

154 
˙_n⁄˚
++;

157 
	}
}

159 
	gzmq
::
curve_£rvî_t
::
	$decode
 (
msg_t
 *
msg_
)

161 
	`zmq_as£π
 (
°©e
 =
c⁄√˘ed
);

163 i‡(
msg_
->
	`size
 () < 33) {

164 
î∫o
 = 
EPROTO
;

168 c⁄° 
uöt8_t
 *
mesßge
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

169 i‡(
	`memcmp
 (
mesßge
, "\x07MESSAGE", 8)) {

170 
î∫o
 = 
EPROTO
;

174 
uöt8_t
 
mesßge_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

175 
	`mem˝y
 (
mesßge_n⁄˚
, "CurveZMQMESSAGEC", 16);

176 
	`mem˝y
 (
mesßge_n⁄˚
 + 16, 
mesßge
 + 8, 8);

178 c⁄° 
size_t
 
˛í
 = 
¸y±o_box_BOXZEROBYTES
 + 
msg_
->
	`size
 () - 16;

180 
uöt8_t
 *
mesßge_∂aöãxt
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
˛í
));

181 
	`Æloc_as£π
 (
mesßge_∂aöãxt
);

183 
uöt8_t
 *
mesßge_box
 = 
°©ic_ˇ°
 <uöt8_à*> (
	`mÆloc
 (
˛í
));

184 
	`Æloc_as£π
 (
mesßge_box
);

186 
	`mem£t
 (
mesßge_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

187 
	`mem˝y
 (
mesßge_box
 + 
¸y±o_box_BOXZEROBYTES
,

188 
mesßge
 + 16, 
msg_
->
	`size
 () - 16);

190 
rc
 = 
	`¸y±o_box_›í_a·înm
 (
mesßge_∂aöãxt
, 
mesßge_box
,

191 
˛í
, 
mesßge_n⁄˚
, 
˙_¥ecom
);

192 i‡(
rc
 == 0) {

193 
rc
 = 
msg_
->
	`˛o£
 ();

194 
	`zmq_as£π
 (
rc
 == 0);

196 
rc
 = 
msg_
->
	`öô_size
 (
˛í
 - 1 - 
¸y±o_box_ZEROBYTES
);

197 
	`zmq_as£π
 (
rc
 == 0);

199 c⁄° 
uöt8_t
 
Êags
 = 
mesßge_∂aöãxt
 [
¸y±o_box_ZEROBYTES
];

200 i‡(
Êags
 & 0x01)

201 
msg_
->
	`£t_Êags
 (
msg_t
::
m‹e
);

203 
	`mem˝y
 (
msg_
->
	`d©a
 (),

204 
mesßge_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 1,

205 
msg_
->
	`size
 ());

208 
î∫o
 = 
EPROTO
;

210 
	`‰ì
 (
mesßge_∂aöãxt
);

211 
	`‰ì
 (
mesßge_box
);

213  
rc
;

214 
	}
}

216 
	gzmq
::
curve_£rvî_t
::
	$z≠_msg_avaûabÀ
 ()

218 i‡(
°©e
 !
ex≥˘_z≠_ª∂y
) {

219 
î∫o
 = 
EFSM
;

222 c⁄° 
rc
 = 
	`ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

223 i‡(
rc
 == 0)

224 
°©e
 = 
£nd_ªady
;

225  
rc
;

226 
	}
}

228 
boﬁ
 
	gzmq
::
curve_£rvî_t
::
	$is_h™dshake_com∂ëe
 () const

230  
°©e
 =
c⁄√˘ed
;

231 
	}
}

233 
	gzmq
::
curve_£rvî_t
::
	$¥o˚ss_hñlo
 (
msg_t
 *
msg_
)

235 i‡(
msg_
->
	`size
 () != 200) {

236 
î∫o
 = 
EPROTO
;

240 c⁄° 
uöt8_t
 * c⁄° 
hñlo
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

241 i‡(
	`memcmp
 (
hñlo
, "\x05HELLO", 6)) {

242 
î∫o
 = 
EPROTO
;

246 c⁄° 
uöt8_t
 
maj‹
 = 
hñlo
 [6];

247 c⁄° 
uöt8_t
 
mö‹
 = 
hñlo
 [7];

249 i‡(
maj‹
 !1 || 
mö‹
 != 0) {

250 
î∫o
 = 
EPROTO
;

255 
	`mem˝y
 (
˙_˛õ¡
, 
hñlo
 + 80, 32);

257 
uöt8_t
 
hñlo_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

258 
uöt8_t
 
hñlo_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 64];

259 
uöt8_t
 
hñlo_box
 [
¸y±o_box_BOXZEROBYTES
 + 80];

261 
	`mem˝y
 (
hñlo_n⁄˚
, "CurveZMQHELLO---", 16);

262 
	`mem˝y
 (
hñlo_n⁄˚
 + 16, 
hñlo
 + 112, 8);

264 
	`mem£t
 (
hñlo_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

265 
	`mem˝y
 (
hñlo_box
 + 
¸y±o_box_BOXZEROBYTES
, 
hñlo
 + 120, 80);

268 
rc
 = 
	`¸y±o_box_›í
 (
hñlo_∂aöãxt
, 
hñlo_box
,

269  
hñlo_box
,

270 
hñlo_n⁄˚
, 
˙_˛õ¡
, 
£¸ë_key
);

271 i‡(
rc
 != 0) {

272 
î∫o
 = 
EPROTO
;

276  
rc
;

277 
	}
}

279 
	gzmq
::
curve_£rvî_t
::
	$¥odu˚_wñcome
 (
msg_t
 *
msg_
)

281 
uöt8_t
 
cookõ_n⁄˚
 [
¸y±o_£¸ëbox_NONCEBYTES
];

282 
uöt8_t
 
cookõ_∂aöãxt
 [
¸y±o_£¸ëbox_ZEROBYTES
 + 64];

283 
uöt8_t
 
cookõ_cùhîãxt
 [
¸y±o_£¸ëbox_BOXZEROBYTES
 + 80];

287 
	`mem˝y
 (
cookõ_n⁄˚
, "COOKIE--", 8);

288 
	`øndombyãs
 (
cookõ_n⁄˚
 + 8, 16);

291 
	`mem£t
 (
cookõ_∂aöãxt
, 0, 
¸y±o_£¸ëbox_ZEROBYTES
);

292 
	`mem˝y
 (
cookõ_∂aöãxt
 + 
¸y±o_£¸ëbox_ZEROBYTES
,

293 
˙_˛õ¡
, 32);

294 
	`mem˝y
 (
cookõ_∂aöãxt
 + 
¸y±o_£¸ëbox_ZEROBYTES
 + 32,

295 
˙_£¸ë
, 32);

298 
	`øndombyãs
 (
cookõ_key
, 
¸y±o_£¸ëbox_KEYBYTES
);

301 
rc
 = 
	`¸y±o_£¸ëbox
 (
cookõ_cùhîãxt
, 
cookõ_∂aöãxt
,

302  
cookõ_∂aöãxt
,

303 
cookõ_n⁄˚
, 
cookõ_key
);

304 
	`zmq_as£π
 (
rc
 == 0);

306 
uöt8_t
 
wñcome_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

307 
uöt8_t
 
wñcome_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 128];

308 
uöt8_t
 
wñcome_cùhîãxt
 [
¸y±o_box_BOXZEROBYTES
 + 144];

312 
	`mem˝y
 (
wñcome_n⁄˚
, "WELCOME-", 8);

313 
	`øndombyãs
 (
wñcome_n⁄˚
 + 8, 
¸y±o_box_NONCEBYTES
 - 8);

316 
	`mem£t
 (
wñcome_∂aöãxt
, 0, 
¸y±o_box_ZEROBYTES
);

317 
	`mem˝y
 (
wñcome_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
, 
˙_public
, 32);

318 
	`mem˝y
 (
wñcome_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 32,

319 
cookõ_n⁄˚
 + 8, 16);

320 
	`mem˝y
 (
wñcome_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 48,

321 
cookõ_cùhîãxt
 + 
¸y±o_£¸ëbox_BOXZEROBYTES
, 80);

323 
rc
 = 
	`¸y±o_box
 (
wñcome_cùhîãxt
, 
wñcome_∂aöãxt
,

324  
wñcome_∂aöãxt
,

325 
wñcome_n⁄˚
, 
˙_˛õ¡
, 
£¸ë_key
);

326 
	`zmq_as£π
 (
rc
 == 0);

328 
rc
 = 
msg_
->
	`öô_size
 (168);

329 
	`î∫o_as£π
 (
rc
 == 0);

331 
uöt8_t
 * c⁄° 
wñcome
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

332 
	`mem˝y
 (
wñcome
, "\x07WELCOME", 8);

333 
	`mem˝y
 (
wñcome
 + 8, 
wñcome_n⁄˚
 + 8, 16);

334 
	`mem˝y
 (
wñcome
 + 24, 
wñcome_cùhîãxt
 + 
¸y±o_box_BOXZEROBYTES
, 144);

337 
	}
}

339 
	gzmq
::
curve_£rvî_t
::
	$¥o˚ss_öôüã
 (
msg_t
 *
msg_
)

341 i‡(
msg_
->
	`size
 () < 257) {

342 
î∫o
 = 
EPROTO
;

346 c⁄° 
uöt8_t
 *
öôüã
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

347 i‡(
	`memcmp
 (
öôüã
, "\x08INITIATE", 9)) {

348 
î∫o
 = 
EPROTO
;

352 
uöt8_t
 
cookõ_n⁄˚
 [
¸y±o_£¸ëbox_NONCEBYTES
];

353 
uöt8_t
 
cookõ_∂aöãxt
 [
¸y±o_£¸ëbox_ZEROBYTES
 + 64];

354 
uöt8_t
 
cookõ_box
 [
¸y±o_£¸ëbox_BOXZEROBYTES
 + 80];

357 
	`mem£t
 (
cookõ_box
, 0, 
¸y±o_£¸ëbox_BOXZEROBYTES
);

358 
	`mem˝y
 (
cookõ_box
 + 
¸y±o_£¸ëbox_BOXZEROBYTES
, 
öôüã
 + 25, 80);

360 
	`mem˝y
 (
cookõ_n⁄˚
, "COOKIE--", 8);

361 
	`mem˝y
 (
cookõ_n⁄˚
 + 8, 
öôüã
 + 9, 16);

363 
rc
 = 
	`¸y±o_£¸ëbox_›í
 (
cookõ_∂aöãxt
, 
cookõ_box
,

364  
cookõ_box
,

365 
cookõ_n⁄˚
, 
cookõ_key
);

366 i‡(
rc
 != 0) {

367 
î∫o
 = 
EPROTO
;

372 i‡(
	`memcmp
 (
cookõ_∂aöãxt
 + 
¸y±o_£¸ëbox_ZEROBYTES
, 
˙_˛õ¡
, 32)

373 || 
	`memcmp
 (
cookõ_∂aöãxt
 + 
¸y±o_£¸ëbox_ZEROBYTES
 + 32, 
˙_£¸ë
, 32)) {

374 
î∫o
 = 
EPROTO
;

378 c⁄° 
size_t
 
˛í
 = (
msg_
->
	`size
 (Ë- 113Ë+ 
¸y±o_box_BOXZEROBYTES
;

380 
uöt8_t
 
öôüã_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

381 
uöt8_t
 
öôüã_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 128 + 256];

382 
uöt8_t
 
öôüã_box
 [
¸y±o_box_BOXZEROBYTES
 + 144 + 256];

385 
	`mem£t
 (
öôüã_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

386 
	`mem˝y
 (
öôüã_box
 + 
¸y±o_box_BOXZEROBYTES
,

387 
öôüã
 + 113, 
˛í
 - 
¸y±o_box_BOXZEROBYTES
);

389 
	`mem˝y
 (
öôüã_n⁄˚
, "CurveZMQINITIATE", 16);

390 
	`mem˝y
 (
öôüã_n⁄˚
 + 16, 
öôüã
 + 105, 8);

392 
rc
 = 
	`¸y±o_box_›í
 (
öôüã_∂aöãxt
, 
öôüã_box
,

393 
˛í
, 
öôüã_n⁄˚
, 
˙_˛õ¡
, 
˙_£¸ë
);

394 i‡(
rc
 != 0) {

395 
î∫o
 = 
EPROTO
;

399 c⁄° 
uöt8_t
 *
˛õ¡_key
 = 
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
;

401 
uöt8_t
 
vouch_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

402 
uöt8_t
 
vouch_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 64];

403 
uöt8_t
 
vouch_box
 [
¸y±o_box_BOXZEROBYTES
 + 80];

406 
	`mem£t
 (
vouch_box
, 0, 
¸y±o_box_BOXZEROBYTES
);

407 
	`mem˝y
 (
vouch_box
 + 
¸y±o_box_BOXZEROBYTES
,

408 
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 48, 80);

410 
	`mem˝y
 (
vouch_n⁄˚
, "VOUCH---", 8);

411 
	`mem˝y
 (
vouch_n⁄˚
 + 8,

412 
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 32, 16);

414 
rc
 = 
	`¸y±o_box_›í
 (
vouch_∂aöãxt
, 
vouch_box
,

415  
vouch_box
,

416 
vouch_n⁄˚
, 
˛õ¡_key
, 
˙_£¸ë
);

417 i‡(
rc
 != 0) {

418 
î∫o
 = 
EPROTO
;

423 i‡(
	`memcmp
 (
vouch_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
, 
˙_˛õ¡
, 32)) {

424 
î∫o
 = 
EPROTO
;

429 
rc
 = 
	`¸y±o_box_bef‹ím
 (
˙_¥ecom
, 
˙_˛õ¡
, 
˙_£¸ë
);

430 
	`zmq_as£π
 (
rc
 == 0);

433 
rc
 = 
£ssi⁄
->
	`z≠_c⁄√˘
 ();

434 i‡(
rc
 == 0) {

435 
	`£nd_z≠_ªque°
 (
˛õ¡_key
);

436 
rc
 = 
	`ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

437 i‡(
rc
 != 0) {

438 i‡(
î∫o
 !
EAGAIN
)

440 
ex≥˘ög_z≠_ª∂y
 = 
åue
;

444  
	`∑r£_mëad©a
 (
öôüã_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
 + 128,

445 
˛í
 - 
¸y±o_box_ZEROBYTES
 - 128);

446 
	}
}

448 
	gzmq
::
curve_£rvî_t
::
	$¥odu˚_ªady
 (
msg_t
 *
msg_
)

450 
uöt8_t
 
ªady_n⁄˚
 [
¸y±o_box_NONCEBYTES
];

451 
uöt8_t
 
ªady_∂aöãxt
 [
¸y±o_box_ZEROBYTES
 + 256];

452 
uöt8_t
 
ªady_box
 [
¸y±o_box_BOXZEROBYTES
 + 16 + 256];

455 
	`mem£t
 (
ªady_∂aöãxt
, 0, 
¸y±o_box_ZEROBYTES
);

456 
uöt8_t
 *
±r
 = 
ªady_∂aöãxt
 + 
¸y±o_box_ZEROBYTES
;

459 c⁄° *
sockë_ty≥
 = 
	`sockë_ty≥_°rög
 (
›ti⁄s
.
ty≥
);

460 
±r
 +
	`add_¥›îty
 (±r, "Sockë-Ty≥", 
sockë_ty≥
, 
	`°æí
 (socket_type));

463 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_REQ


464 || 
›ti⁄s
.
ty≥
 =
ZMQ_DEALER


465 || 
›ti⁄s
.
ty≥
 =
ZMQ_ROUTER
)

466 
±r
 +
	`add_¥›îty
 (ptr, "Identity",

467 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

469 c⁄° 
size_t
 
mÀn
 = 
±r
 - 
ªady_∂aöãxt
;

471 
	`mem˝y
 (
ªady_n⁄˚
, "CurveZMQREADY---", 16);

472 
	`mem˝y
 (
ªady_n⁄˚
 + 16, &
˙_n⁄˚
, 8);

474 
rc
 = 
	`¸y±o_box_a·înm
 (
ªady_box
, 
ªady_∂aöãxt
,

475 
mÀn
, 
ªady_n⁄˚
, 
˙_¥ecom
);

476 
	`zmq_as£π
 (
rc
 == 0);

478 
rc
 = 
msg_
->
	`öô_size
 (14 + 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

479 
	`î∫o_as£π
 (
rc
 == 0);

481 
uöt8_t
 *
ªady
 = 
°©ic_ˇ°
 <uöt8_à*> (
msg_
->
	`d©a
 ());

483 
	`mem˝y
 (
ªady
, "\x05READY", 6);

485 
	`mem˝y
 (
ªady
 + 6, &
˙_n⁄˚
, 8);

487 
	`mem˝y
 (
ªady
 + 14, 
ªady_box
 + 
¸y±o_box_BOXZEROBYTES
,

488 
mÀn
 - 
¸y±o_box_BOXZEROBYTES
);

490 
˙_n⁄˚
++;

493 
	}
}

495 
	gzmq
::
curve_£rvî_t
::
	$£nd_z≠_ªque°
 (c⁄° 
uöt8_t
 *
key
)

497 
rc
;

498 
msg_t
 
msg
;

501 
rc
 = 
msg
.
	`öô
 ();

502 
	`î∫o_as£π
 (
rc
 == 0);

503 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

504 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

505 
	`î∫o_as£π
 (
rc
 == 0);

508 
rc
 = 
msg
.
	`öô_size
 (3);

509 
	`î∫o_as£π
 (
rc
 == 0);

510 
	`mem˝y
 (
msg
.
	`d©a
 (), "1.0", 3);

511 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

512 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

513 
	`î∫o_as£π
 (
rc
 == 0);

516 
rc
 = 
msg
.
	`öô_size
 (1);

517 
	`î∫o_as£π
 (
rc
 == 0);

518 
	`mem˝y
 (
msg
.
	`d©a
 (), "1", 1);

519 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

520 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

521 
	`î∫o_as£π
 (
rc
 == 0);

524 
rc
 = 
msg
.
	`öô_size
 (
›ti⁄s
.
z≠_domaö
.
	`Àngth
 ());

525 
	`î∫o_as£π
 (
rc
 == 0);

526 
	`mem˝y
 (
msg
.
	`d©a
 (), 
›ti⁄s
.
z≠_domaö
.
	`c_°r
 (), o±i⁄s.z≠_domaö.
	`Àngth
 ());

527 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

528 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

529 
	`î∫o_as£π
 (
rc
 == 0);

532 
rc
 = 
msg
.
	`öô_size
 (
≥î_addªss
.
	`Àngth
 ());

533 
	`î∫o_as£π
 (
rc
 == 0);

534 
	`mem˝y
 (
msg
.
	`d©a
 (), 
≥î_addªss
.
	`c_°r
 (),Öìr_addªss.
	`Àngth
 ());

535 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

536 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

537 
	`î∫o_as£π
 (
rc
 == 0);

540 
rc
 = 
msg
.
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

541 
	`î∫o_as£π
 (
rc
 == 0);

542 
	`mem˝y
 (
msg
.
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

543 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

544 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

545 
	`î∫o_as£π
 (
rc
 == 0);

548 
rc
 = 
msg
.
	`öô_size
 (5);

549 
	`î∫o_as£π
 (
rc
 == 0);

550 
	`mem˝y
 (
msg
.
	`d©a
 (), "CURVE", 5);

551 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

552 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

553 
	`î∫o_as£π
 (
rc
 == 0);

556 
rc
 = 
msg
.
	`öô_size
 (
¸y±o_box_PUBLICKEYBYTES
);

557 
	`î∫o_as£π
 (
rc
 == 0);

558 
	`mem˝y
 (
msg
.
	`d©a
 (), 
key
, 
¸y±o_box_PUBLICKEYBYTES
);

559 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

560 
	`î∫o_as£π
 (
rc
 == 0);

561 
	}
}

563 
	gzmq
::
curve_£rvî_t
::
	$ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ()

565 
rc
 = 0;

566 
msg_t
 
msg
 [7];

569 
i
 = 0; i < 7; i++) {

570 
rc
 = 
msg
 [
i
].
	`öô
 ();

571 
	`î∫o_as£π
 (
rc
 == 0);

574 
i
 = 0; i < 7; i++) {

575 
rc
 = 
£ssi⁄
->
	`ªad_z≠_msg
 (&
msg
 [
i
]);

576 i‡(
rc
 == -1)

578 i‡((
msg
 [
i
].
	`Êags
 (Ë& 
msg_t
::
m‹e
) == (i < 6? 0: msg_t::more)) {

579 
î∫o
 = 
EPROTO
;

580 
rc
 = -1;

585 i‡(
rc
 != 0)

586 
îr‹
;

589 i‡(
msg
 [0].
	`size
 () > 0) {

590 
rc
 = -1;

591 
î∫o
 = 
EPROTO
;

592 
îr‹
;

596 i‡(
msg
 [1].
	`size
 (Ë!3 || 
	`memcmp
 (msg [1].
	`d©a
 (), "1.0", 3)) {

597 
rc
 = -1;

598 
î∫o
 = 
EPROTO
;

599 
îr‹
;

603 i‡(
msg
 [2].
	`size
 (Ë!1 || 
	`memcmp
 (msg [2].
	`d©a
 (), "1", 1)) {

604 
rc
 = -1;

605 
î∫o
 = 
EPROTO
;

606 
îr‹
;

610 i‡(
msg
 [3].
	`size
 (Ë!3 || 
	`memcmp
 (msg [3].
	`d©a
 (), "200", 3)) {

611 
rc
 = -1;

612 
î∫o
 = 
EACCES
;

613 
îr‹
;

617 
rc
 = 
	`∑r£_mëad©a
 (
°©ic_ˇ°
 <c⁄° *> (
msg
 [6].
	`d©a
 ()),

618 
msg
 [6].
	`size
 ());

620 
îr‹
:

621 
i
 = 0; i < 7; i++) {

622 c⁄° 
rc2
 = 
msg
 [
i
].
	`˛o£
 ();

623 
	`î∫o_as£π
 (
rc2
 == 0);

626  
rc
;

627 
	}
}

	@curve_server.hpp

20 #i‚de‡
__ZMQ_CURVE_SERVER_HPP_INCLUDED__


21 
	#__ZMQ_CURVE_SERVER_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #ifde‡
HAVE_LIBSODIUM


26 
	~<sodium.h
>

28 #i‡
¸y±o_box_NONCEBYTES
 != 24 \

29 || 
	g¸y±o_box_PUBLICKEYBYTES
 != 32 \

30 || 
¸y±o_box_SECRETKEYBYTES
 != 32 \

31 || 
¸y±o_box_ZEROBYTES
 != 32 \

32 || 
¸y±o_box_BOXZEROBYTES
 != 16 \

33 || 
¸y±o_£¸ëbox_NONCEBYTES
 != 24 \

34 || 
¸y±o_£¸ëbox_ZEROBYTES
 != 32 \

35 || 
¸y±o_£¸ëbox_BOXZEROBYTES
 != 16

39 
	~"mech™ism.hµ
"

40 
	~"›ti⁄s.hµ
"

42 
«me•a˚
 
zmq


45 
˛ass
 
msg_t
;

46 
˛ass
 
	g£ssi⁄_ba£_t
;

48 ˛as†
	ccurve_£rvî_t
 : 
public
 
mech™ism_t


50 
public
:

52 
curve_£rvî_t
 (
£ssi⁄_ba£_t
 *
£ssi⁄_
,

53 c⁄° 
°d
::
°rög
 &
≥î_addªss_
,

54 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

55 
	gvútuÆ
 ~
curve_£rvî_t
 ();

58 
vútuÆ
 
√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
);

59 
vútuÆ
 
¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
);

60 
vútuÆ
 
ícode
 (
msg_t
 *
msg_
);

61 
vútuÆ
 
decode
 (
msg_t
 *
msg_
);

62 
vútuÆ
 
z≠_msg_avaûabÀ
 ();

63 
vútuÆ
 
boﬁ
 
is_h™dshake_com∂ëe
 () const;

65 
	g¥iv©e
:

67 
	e°©e_t
 {

68 
ex≥˘_hñlo
,

69 
	g£nd_wñcome
,

70 
	gex≥˘_öôüã
,

71 
	gex≥˘_z≠_ª∂y
,

72 
	g£nd_ªady
,

73 
	gc⁄√˘ed


76 
£ssi⁄_ba£_t
 * c⁄° 
	g£ssi⁄
;

78 c⁄° 
	g°d
::
°rög
 
≥î_addªss
;

81 
°©e_t
 
	g°©e
;

84 
boﬁ
 
	gex≥˘ög_z≠_ª∂y
;

86 
uöt64_t
 
	g˙_n⁄˚
;

89 
uöt8_t
 
	g£¸ë_key
 [
¸y±o_box_SECRETKEYBYTES
];

92 
uöt8_t
 
	g˙_public
 [
¸y±o_box_PUBLICKEYBYTES
];

95 
uöt8_t
 
	g˙_£¸ë
 [
¸y±o_box_SECRETKEYBYTES
];

98 
uöt8_t
 
	g˙_˛õ¡
 [
¸y±o_box_PUBLICKEYBYTES
];

101 
uöt8_t
 
	gcookõ_key
 [
¸y±o_£¸ëbox_KEYBYTES
];

104 
uöt8_t
 
	g˙_¥ecom
 [
¸y±o_box_BEFORENMBYTES
];

106 
¥o˚ss_hñlo
 (
msg_t
 *
msg_
);

107 
¥odu˚_wñcome
 (
msg_t
 *
msg_
);

108 
¥o˚ss_öôüã
 (
msg_t
 *
msg_
);

109 
¥odu˚_ªady
 (
msg_t
 *
msg_
);

111 
£nd_z≠_ªque°
 (c⁄° 
uöt8_t
 *
key
);

112 
ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

	@dbuffer.hpp

20 #i‚de‡
__ZMQ_DBUFFER_HPP_INCLUDED__


21 
	#__ZMQ_DBUFFER_HPP_INCLUDED__


	)

23 
	~<°dlib.h
>

24 
	~<°ddef.h
>

25 
	~<Æg‹ôhm
>

27 
	~"muãx.hµ
"

28 
	~"msg.hµ
"

30 
«me•a˚
 
	gzmq


47 
	gãm∂©e
 <
ty≥«me
 
	gT
> 
˛ass
 
	gdbuf„r_t
;

49 
	gãm∂©e
 <> 
˛ass
 
	gdbuf„r_t
<
	gmsg_t
>

51 
	gpublic
:

53 
ölöe
 
dbuf„r_t
 ()

54 : 
back
 (&
°‹age
[0])

55 , 
‰⁄t
 (&
°‹age
[1])

56 , 
has_msg
 (
Ál£
)

58 
	gback
->
öô
 ();

59 
	g‰⁄t
->
öô
 ();

62 
	gölöe
 ~
dbuf„r_t
()

64 
	gback
->
˛o£
 ();

65 
	g‰⁄t
->
˛o£
 ();

68 
ölöe
 
wrôe
 (c⁄° 
msg_t
 &
vÆue_
)

70 
	gmsg_t
& 
	gxvÆue
 = 
c⁄°_ˇ°
<
msg_t
&>(
vÆue_
);

72 
zmq_as£π
 (
xvÆue
.
check
 ());

73 
	gback
->
move
 (
xvÆue
);

75 
zmq_as£π
 (
back
->
check
 ());

77 i‡(
	gsync
.
åy_lock
 ())

79 
	g°d
::
sw≠
 (
back
, 
‰⁄t
);

80 
	ghas_msg
 = 
åue
;

82 
	gsync
.
u∆ock
 ();

86 
ölöe
 
boﬁ
 
ªad
 (
msg_t
 *
vÆue_
)

88 i‡(!
	gvÆue_
)

89  
	gÁl£
;

92 
sc›ed_lock_t
 
lock
 (
sync
);

93 i‡(!
	ghas_msg
)

94  
	gÁl£
;

96 
zmq_as£π
 (
‰⁄t
->
check
 ());

98 *
	gvÆue_
 = *
‰⁄t
;

99 
	g‰⁄t
->
öô
 ();

101 
	ghas_msg
 = 
Ál£
;

102  
	gåue
;

107 
ölöe
 
boﬁ
 
check_ªad
 ()

109 
sc›ed_lock_t
 
lock
 (
sync
);

111  
	ghas_msg
;

114 
ölöe
 
boﬁ
 
¥obe
 (boﬁ (*
‚
)(
msg_t
 &))

116 
sc›ed_lock_t
 
lock
 (
sync
);

117  (*
	g‚
Ë(*
	g‰⁄t
);

121 
	g¥iv©e
:

122 
msg_t
 
°‹age
[2];

123 
msg_t
 *
	gback
, *
	g‰⁄t
;

125 
muãx_t
 
	gsync
;

126 
boﬁ
 
	ghas_msg
;

129 
dbuf„r_t
 (const dbuffer_t&);

130 c⁄° 
	gdbuf„r_t
 &
	g›î©‹
 = (c⁄° 
dbuf„r_t
&);

	@dealer.cpp

20 
	~"dóÀr.hµ
"

21 
	~"îr.hµ
"

22 
	~"msg.hµ
"

24 
	gzmq
::
dóÀr_t
::
	$dóÀr_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

25 
	`sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

26 
	$¥obe_rouãr
 (
Ál£
)

28 
›ti⁄s
.
ty≥
 = 
ZMQ_DEALER
;

29 
	}
}

31 
	gzmq
::
dóÀr_t
::~
	$dóÀr_t
 ()

33 
	}
}

35 
zmq
::
dóÀr_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

38 (Ë
subs¸ibe_to_Æl_
;

40 
	`zmq_as£π
 (
pùe_
);

42 i‡(
¥obe_rouãr
) {

43 
msg_t
 
¥obe_msg_
;

44 
rc
 = 
¥obe_msg_
.
	`öô
 ();

45 
	`î∫o_as£π
 (
rc
 == 0);

47 
rc
 = 
pùe_
->
	`wrôe
 (&
¥obe_msg_
);

49 
pùe_
->
	`Êush
 ();

51 
rc
 = 
¥obe_msg_
.
	`˛o£
 ();

52 
	`î∫o_as£π
 (
rc
 == 0);

55 
fq
.
	`©èch
 (
pùe_
);

56 
lb
.
	`©èch
 (
pùe_
);

57 
	}
}

59 
	gzmq
::
dóÀr_t
::
	$x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

60 
size_t
 
›tvÆÀn_
)

62 
boﬁ
 
is_öt
 = (
›tvÆÀn_
 ==  ());

63 
vÆue
 = 
is_öt
? *((*Ë
›tvÆ_
): 0;

65 
›ti⁄_
) {

66 
ZMQ_PROBE_ROUTER
:

67 i‡(
is_öt
 && 
vÆue
 >= 0) {

68 
¥obe_rouãr
 = (
vÆue
 != 0);

77 
î∫o
 = 
EINVAL
;

79 
	}
}

81 
	gzmq
::
dóÀr_t
::
	$x£nd
 (
msg_t
 *
msg_
)

83  
	`£ndpùe
 (
msg_
, 
NULL
);

84 
	}
}

86 
	gzmq
::
dóÀr_t
::
	$xªcv
 (
msg_t
 *
msg_
)

88  
	`ªcvpùe
 (
msg_
, 
NULL
);

89 
	}
}

91 
boﬁ
 
	gzmq
::
dóÀr_t
::
	$xhas_ö
 ()

93  
fq
.
	`has_ö
 ();

94 
	}
}

96 
boﬁ
 
	gzmq
::
dóÀr_t
::
	$xhas_out
 ()

98  
lb
.
	`has_out
 ();

99 
	}
}

101 
	gzmq
::
dóÀr_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

103 
fq
.
	`a˘iv©ed
 (
pùe_
);

104 
	}
}

106 
	gzmq
::
dóÀr_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

108 
lb
.
	`a˘iv©ed
 (
pùe_
);

109 
	}
}

111 
	gzmq
::
dóÀr_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

113 
fq
.
	`pùe_ãrmö©ed
 (
pùe_
);

114 
lb
.
	`pùe_ãrmö©ed
 (
pùe_
);

115 
	}
}

117 
	gzmq
::
dóÀr_t
::
	$£ndpùe
 (
msg_t
 *
msg_
, 
pùe_t
 **
pùe_
)

119  
lb
.
	`£ndpùe
 (
msg_
, 
pùe_
);

120 
	}
}

122 
	gzmq
::
dóÀr_t
::
	$ªcvpùe
 (
msg_t
 *
msg_
, 
pùe_t
 **
pùe_
)

124  
fq
.
	`ªcvpùe
 (
msg_
, 
pùe_
);

125 
	}
}

	@dealer.hpp

20 #i‚de‡
__ZMQ_DEALER_HPP_INCLUDED__


21 
	#__ZMQ_DEALER_HPP_INCLUDED__


	)

23 
	~"sockë_ba£.hµ
"

24 
	~"£ssi⁄_ba£.hµ
"

25 
	~"fq.hµ
"

26 
	~"lb.hµ
"

28 
«me•a˚
 
	gzmq


31 
˛ass
 
	g˘x_t
;

32 
˛ass
 
	gmsg_t
;

33 
˛ass
 
	gpùe_t
;

34 
˛ass
 
	gio_thªad_t
;

35 
˛ass
 
	gsockë_ba£_t
;

37 ˛as†
	cdóÀr_t
 :

38 
public
 
sockë_ba£_t


40 
public
:

42 
dóÀr_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid
);

43 ~
dóÀr_t
 ();

45 
	g¥Ÿe˘ed
:

48 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

49 
x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

50 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

51 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

52 
boﬁ
 
xhas_ö
 ();

53 
boﬁ
 
xhas_out
 ();

54 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

55 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

56 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

59 
£ndpùe
 (
zmq
::
msg_t
 *
msg_
, zmq::
pùe_t
 **
pùe_
);

60 
ªcvpùe
 (
zmq
::
msg_t
 *
msg_
, zmq::
pùe_t
 **
pùe_
);

62 
	g¥iv©e
:

66 
fq_t
 
fq
;

67 
lb_t
 
	glb
;

70 
boﬁ
 
	g¥obe_rouãr
;

72 
dóÀr_t
 (const dealer_t&);

73 c⁄° 
	gdóÀr_t
 &
	g›î©‹
 = (c⁄° 
dóÀr_t
&);

	@decoder.hpp

20 #i‚de‡
__ZMQ_DECODER_HPP_INCLUDED__


21 
	#__ZMQ_DECODER_HPP_INCLUDED__


	)

23 
	~<°ddef.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

26 
	~<Æg‹ôhm
>

28 
	~"îr.hµ
"

29 
	~"msg.hµ
"

30 
	~"i_decodî.hµ
"

31 
	~"°döt.hµ
"

33 
«me•a˚
 
	gzmq


46 
	gãm∂©e
 <
ty≥«me
 
	gT
> cœs†
	cdecodî_ba£_t
 : 
public
 
i_decodî


48 
public
:

50 
ölöe
 
decodî_ba£_t
 (
size_t
 
bufsize_
) :

51 
√xt
 (
NULL
),

52 
ªad_pos
 (
NULL
),

53 
to_ªad
 (0),

54 
bufsize
 (
bufsize_
)

56 
	gbuf
 = (*Ë
mÆloc
 (
bufsize_
);

57 
Æloc_as£π
 (
buf
);

62 
ölöe
 
	gvútuÆ
 ~
decodî_ba£_t
 ()

64 
‰ì
 (
buf
);

68 
ölöe
 
gë_buf„r
 (**
d©a_
, 
size_t
 *
size_
)

78 i‡(
	gto_ªad
 >
bufsize
) {

79 *
d©a_
 = 
ªad_pos
;

80 *
	gsize_
 = 
to_ªad
;

84 *
	gd©a_
 = 
buf
;

85 *
	gsize_
 = 
bufsize
;

94 
ölöe
 
decode
 (c⁄° *
d©a_
, 
size_t
 
size_
,

95 
size_t
 &
byãs_u£d_
)

97 
	gbyãs_u£d_
 = 0;

102 i‡(
	gd©a_
 =
ªad_pos
) {

103 
zmq_as£π
 (
size_
 <
to_ªad
);

104 
	gªad_pos
 +
size_
;

105 
	gto_ªad
 -
size_
;

106 
	gbyãs_u£d_
 = 
size_
;

108 !
	gto_ªad
) {

109 c⁄° 
	grc
 = (
°©ic_ˇ°
 <
T
*> (
this
)->*
√xt
) ();

110 i‡(
	grc
 != 0)

111  
rc
;

116 
	gbyãs_u£d_
 < 
	gsize_
) {

118 c⁄° 
size_t
 
	gto_c›y
 = 
°d
::
mö
 (
to_ªad
, 
size_
 - 
byãs_u£d_
);

119 
mem˝y
 (
ªad_pos
, 
d©a_
 + 
byãs_u£d_
, 
to_c›y
);

120 
	gªad_pos
 +
to_c›y
;

121 
	gto_ªad
 -
to_c›y
;

122 
	gbyãs_u£d_
 +
to_c›y
;

125 
	gto_ªad
 == 0) {

126 c⁄° 
rc
 = (
°©ic_ˇ°
 <
T
*> (
this
)->*
√xt
) ();

127 i‡(
	grc
 != 0)

128  
rc
;

135 
	g¥Ÿe˘ed
:

139 (
T
::*
	t°ï_t
) ();

143 
ölöe
 
√xt_°ï
 (*
ªad_pos_
, 
size_t
 
to_ªad_
, 
°ï_t
 
√xt_
)

145 
	gªad_pos
 = (*Ë
ªad_pos_
;

146 
	gto_ªad
 = 
to_ªad_
;

147 
	g√xt
 = 
√xt_
;

150 
	g¥iv©e
:

155 
°ï_t
 
√xt
;

158 *
	gªad_pos
;

161 
size_t
 
	gto_ªad
;

164 
size_t
 
	gbufsize
;

165 *
	gbuf
;

167 
decodî_ba£_t
 (const decoder_base_t&);

168 c⁄° 
	gdecodî_ba£_t
 &
	g›î©‹
 = (c⁄° 
decodî_ba£_t
&);

	@devpoll.cpp

20 
	~"devpﬁl.hµ
"

21 #i‡
deföed
 
ZMQ_USE_DEVPOLL


23 
	~<sys/devpﬁl.h
>

24 
	~<sys/time.h
>

25 
	~<sys/ty≥s.h
>

26 
	~<sys/°©.h
>

27 
	~<sys/io˘l.h
>

28 
	~<f˙é.h
>

29 
	~<uni°d.h
>

30 
	~<limôs.h
>

31 
	~<Æg‹ôhm
>

33 
	~"devpﬁl.hµ
"

34 
	~"îr.hµ
"

35 
	~"c⁄fig.hµ
"

36 
	~"i_pﬁl_evíts.hµ
"

38 
	gzmq
::
devpﬁl_t
::
	$devpﬁl_t
 () :

39 
	$°›pög
 (
Ál£
)

41 
devpﬁl_fd
 = 
	`›í
 ("/dev/pﬁl", 
O_RDWR
);

42 
	`î∫o_as£π
 (
devpﬁl_fd
 != -1);

43 
	}
}

45 
	gzmq
::
devpﬁl_t
::~
	$devpﬁl_t
 ()

47 
w‹kî
.
	`°›
 ();

48 
	`˛o£
 (
devpﬁl_fd
);

49 
	}
}

51 
	gzmq
::
devpﬁl_t
::
	$devpﬁl_˘l
 (
fd_t
 
fd_
, 
evíts_
)

53 
pﬁlfd
 
pfd
 = {
fd_
, 
evíts_
, 0};

54 
ssize_t
 
rc
 = 
	`wrôe
 (
devpﬁl_fd
, &
pfd
, Öfd);

55 
	`zmq_as£π
 (
rc
 = 
pfd
);

56 
	}
}

58 
	gzmq
::
devpﬁl_t
::
h™dÀ_t
 
zmq
::devpﬁl_t::
	$add_fd
 (
fd_t
 
fd_
,

59 
i_pﬁl_evíts
 *
ªa˘‹_
)

62 
fd_èbÀ_t
::
size_ty≥
 
sz
 = 
fd_èbÀ
.
	`size
 ();

63 i‡(
sz
 <(
fd_èbÀ_t
::
size_ty≥
Ë
fd_
) {

64 
fd_èbÀ
.
	`ªsize
 (
fd_
 + 1);

65 
sz
 !(
fd_èbÀ_t
::
size_ty≥
Ë(
fd_
 + 1)) {

66 
fd_èbÀ
 [
sz
].
vÆid
 = 
Ál£
;

67 ++
sz
;

71 
	`zmq_as£π
 (!
fd_èbÀ
 [
fd_
].
vÆid
);

73 
fd_èbÀ
 [
fd_
].
evíts
 = 0;

74 
fd_èbÀ
 [
fd_
].
ªa˘‹
 = 
ªa˘‹_
;

75 
fd_èbÀ
 [
fd_
].
vÆid
 = 
åue
;

76 
fd_èbÀ
 [
fd_
].
ac˚±ed
 = 
Ál£
;

78 
	`devpﬁl_˘l
 (
fd_
, 0);

79 
≥ndög_li°
.
	`push_back
 (
fd_
);

82 
	`adju°_lﬂd
 (1);

84  
fd_
;

85 
	}
}

87 
	gzmq
::
devpﬁl_t
::
	$rm_fd
 (
h™dÀ_t
 
h™dÀ_
)

89 
	`zmq_as£π
 (
fd_èbÀ
 [
h™dÀ_
].
vÆid
);

91 
	`devpﬁl_˘l
 (
h™dÀ_
, 
POLLREMOVE
);

92 
fd_èbÀ
 [
h™dÀ_
].
vÆid
 = 
Ál£
;

95 
	`adju°_lﬂd
 (-1);

96 
	}
}

98 
	gzmq
::
devpﬁl_t
::
	$£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

100 
	`devpﬁl_˘l
 (
h™dÀ_
, 
POLLREMOVE
);

101 
fd_èbÀ
 [
h™dÀ_
].
evíts
 |
POLLIN
;

102 
	`devpﬁl_˘l
 (
h™dÀ_
, 
fd_èbÀ
 [h™dÀ_].
evíts
);

103 
	}
}

105 
	gzmq
::
devpﬁl_t
::
	$ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

107 
	`devpﬁl_˘l
 (
h™dÀ_
, 
POLLREMOVE
);

108 
fd_èbÀ
 [
h™dÀ_
].
evíts
 &~((Ë
POLLIN
);

109 
	`devpﬁl_˘l
 (
h™dÀ_
, 
fd_èbÀ
 [h™dÀ_].
evíts
);

110 
	}
}

112 
	gzmq
::
devpﬁl_t
::
	$£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

114 
	`devpﬁl_˘l
 (
h™dÀ_
, 
POLLREMOVE
);

115 
fd_èbÀ
 [
h™dÀ_
].
evíts
 |
POLLOUT
;

116 
	`devpﬁl_˘l
 (
h™dÀ_
, 
fd_èbÀ
 [h™dÀ_].
evíts
);

117 
	}
}

119 
	gzmq
::
devpﬁl_t
::
	$ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

121 
	`devpﬁl_˘l
 (
h™dÀ_
, 
POLLREMOVE
);

122 
fd_èbÀ
 [
h™dÀ_
].
evíts
 &~((Ë
POLLOUT
);

123 
	`devpﬁl_˘l
 (
h™dÀ_
, 
fd_èbÀ
 [h™dÀ_].
evíts
);

124 
	}
}

126 
	gzmq
::
devpﬁl_t
::
	$°¨t
 ()

128 
w‹kî
.
	`°¨t
 (
w‹kî_routöe
, 
this
);

129 
	}
}

131 
	gzmq
::
devpﬁl_t
::
	$°›
 ()

133 
°›pög
 = 
åue
;

134 
	}
}

136 
	gzmq
::
devpﬁl_t
::
	$max_fds
 ()

139 
	}
}

141 
	gzmq
::
devpﬁl_t
::
	$lo›
 ()

143 !
°›pög
) {

145 
pﬁlfd
 
ev_buf
 [
max_io_evíts
];

146 
dvpﬁl
 
pﬁl_ªq
;

148 
≥ndög_li°_t
::
size_ty≥
 
i
 = 0; i < 
≥ndög_li°
.
	`size
 (); i ++)

149 
fd_èbÀ
 [
≥ndög_li°
 [
i
]].
ac˚±ed
 = 
åue
;

150 
≥ndög_li°
.
	`˛ór
 ();

153 
timeout
 = (Ë
	`execuã_timîs
 ();

157 
pﬁl_ªq
.
dp_fds
 = &
ev_buf
 [0];

158 #i‡
deföed
 
ZMQ_HAVE_SOLARIS


159 
pﬁl_ªq
.
dp_nfds
 = 
°d
::
	`mö
 ((Ë
max_io_evíts
, 
OPEN_MAX
 - 1);

161 
pﬁl_ªq
.
dp_nfds
 = 
max_io_evíts
;

163 
pﬁl_ªq
.
dp_timeout
 = 
timeout
 ?Åimeout : -1;

164 
n
 = 
	`io˘l
 (
devpﬁl_fd
, 
DP_POLL
, &
pﬁl_ªq
);

165 i‡(
n
 =-1 && 
î∫o
 =
EINTR
)

167 
	`î∫o_as£π
 (
n
 != -1);

169 
i
 = 0; i < 
n
; i ++) {

171 
fd_íåy_t
 *
fd_±r
 = &
fd_èbÀ
 [
ev_buf
 [
i
].
fd
];

172 i‡(!
fd_±r
->
vÆid
 || !fd_±r->
ac˚±ed
)

174 i‡(
ev_buf
 [
i
].
ªvíts
 & (
POLLERR
 | 
POLLHUP
))

175 
fd_±r
->
ªa˘‹
->
	`ö_evít
 ();

176 i‡(!
fd_±r
->
vÆid
 || !fd_±r->
ac˚±ed
)

178 i‡(
ev_buf
 [
i
].
ªvíts
 & 
POLLOUT
)

179 
fd_±r
->
ªa˘‹
->
	`out_evít
 ();

180 i‡(!
fd_±r
->
vÆid
 || !fd_±r->
ac˚±ed
)

182 i‡(
ev_buf
 [
i
].
ªvíts
 & 
POLLIN
)

183 
fd_±r
->
ªa˘‹
->
	`ö_evít
 ();

186 
	}
}

188 
	gzmq
::
devpﬁl_t
::
	$w‹kî_routöe
 (*
¨g_
)

190 ((
devpﬁl_t
*Ë
¨g_
)->
	`lo›
 ();

191 
	}
}

	@devpoll.hpp

20 #i‚de‡
__ZMQ_DEVPOLL_HPP_INCLUDED__


21 
	#__ZMQ_DEVPOLL_HPP_INCLUDED__


	)

24 
	~"pﬁÀr.hµ
"

25 #i‡
deföed
 
ZMQ_USE_DEVPOLL


27 
	~<ve˘‹
>

29 
	~"fd.hµ
"

30 
	~"thªad.hµ
"

31 
	~"pﬁÀr_ba£.hµ
"

33 
«me•a˚
 
	gzmq


36 
	gi_pﬁl_evíts
;

40 ˛as†
	cdevpﬁl_t
 : 
public
 
pﬁÀr_ba£_t


42 
public
:

44 
fd_t
 
	th™dÀ_t
;

46 
devpﬁl_t
 ();

47 ~
devpﬁl_t
 ();

50 
h™dÀ_t
 
add_fd
 (
fd_t
 
fd_
, 
zmq
::
i_pﬁl_evíts
 *
evíts_
);

51 
rm_fd
 (
h™dÀ_t
 
h™dÀ_
);

52 
£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

53 
ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

54 
£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

55 
ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

56 
°¨t
 ();

57 
°›
 ();

59 
max_fds
 ();

61 
	g¥iv©e
:

64 
w‹kî_routöe
 (*
¨g_
);

67 
lo›
 ();

70 
fd_t
 
	gdevpﬁl_fd
;

72 
	sfd_íåy_t


74 
	gevíts
;

75 
	gzmq
::
i_pﬁl_evíts
 *
ªa˘‹
;

76 
boﬁ
 
	gvÆid
;

77 
boﬁ
 
	gac˚±ed
;

80 
	g°d
::
	tve˘‹
 <
	tfd_íåy_t
> 
	tfd_èbÀ_t
;

81 
fd_èbÀ_t
 
	gfd_èbÀ
;

83 
	g°d
::
	tve˘‹
 <
	tfd_t
> 
	t≥ndög_li°_t
;

84 
≥ndög_li°_t
 
	g≥ndög_li°
;

87 
devpﬁl_˘l
 (
fd_t
 
fd_
, 
evíts_
);

90 
boﬁ
 
	g°›pög
;

93 
thªad_t
 
	gw‹kî
;

95 
devpﬁl_t
 (const devpoll_t&);

96 c⁄° 
	gdevpﬁl_t
 &
	g›î©‹
 = (c⁄° 
devpﬁl_t
&);

99 
devpﬁl_t
 
	tpﬁÀr_t
;

	@dist.cpp

20 
	~"di°.hµ
"

21 
	~"pùe.hµ
"

22 
	~"îr.hµ
"

23 
	~"msg.hµ
"

24 
	~"likñy.hµ
"

26 
	gzmq
::
di°_t
::
	$di°_t
 () :

27 
	`m©chög
 (0),

28 
	`a˘ive
 (0),

29 
	`ñigibÀ
 (0),

30 
	$m‹e
 (
Ál£
)

32 
	}
}

34 
	gzmq
::
di°_t
::~
	$di°_t
 ()

36 
	`zmq_as£π
 (
pùes
.
	`em±y
 ());

37 
	}
}

39 
	gzmq
::
di°_t
::
	$©èch
 (
pùe_t
 *
pùe_
)

44 i‡(
m‹e
) {

45 
pùes
.
	`push_back
 (
pùe_
);

46 
pùes
.
	`sw≠
 (
ñigibÀ
,Öùes.
	`size
 () - 1);

47 
ñigibÀ
++;

50 
pùes
.
	`push_back
 (
pùe_
);

51 
pùes
.
	`sw≠
 (
a˘ive
,Öùes.
	`size
 () - 1);

52 
a˘ive
++;

53 
ñigibÀ
++;

55 
	}
}

57 
	gzmq
::
di°_t
::
	$m©ch
 (
pùe_t
 *
pùe_
)

60 i‡(
pùes
.
	`ödex
 (
pùe_
Ë< 
m©chög
)

64 i‡(
pùes
.
	`ödex
 (
pùe_
Ë>
ñigibÀ
)

68 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
m©chög
);

69 
m©chög
++;

70 
	}
}

72 
	gzmq
::
di°_t
::
	$unm©ch
 ()

74 
m©chög
 = 0;

75 
	}
}

77 
	gzmq
::
di°_t
::
	$pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

81 i‡(
pùes
.
	`ödex
 (
pùe_
Ë< 
m©chög
) {

82 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
m©chög
 - 1);

83 
m©chög
--;

85 i‡(
pùes
.
	`ödex
 (
pùe_
Ë< 
a˘ive
) {

86 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
a˘ive
 - 1);

87 
a˘ive
--;

89 i‡(
pùes
.
	`ödex
 (
pùe_
Ë< 
ñigibÀ
) {

90 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
ñigibÀ
 - 1);

91 
ñigibÀ
--;

94 
pùes
.
	`îa£
 (
pùe_
);

95 
	}
}

97 
	gzmq
::
di°_t
::
	$a˘iv©ed
 (
pùe_t
 *
pùe_
)

100 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
ñigibÀ
);

101 
ñigibÀ
++;

105 i‡(!
m‹e
) {

106 
pùes
.
	`sw≠
 (
ñigibÀ
 - 1, 
a˘ive
);

107 
a˘ive
++;

109 
	}
}

111 
	gzmq
::
di°_t
::
	$£nd_to_Æl
 (
msg_t
 *
msg_
)

113 
m©chög
 = 
a˘ive
;

114  
	`£nd_to_m©chög
 (
msg_
);

115 
	}
}

117 
	gzmq
::
di°_t
::
	$£nd_to_m©chög
 (
msg_t
 *
msg_
)

120 
boﬁ
 
msg_m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

123 
	`di°ribuã
 (
msg_
);

126 i‡(!
msg_m‹e
)

127 
a˘ive
 = 
ñigibÀ
;

129 
m‹e
 = 
msg_m‹e
;

132 
	}
}

134 
	gzmq
::
di°_t
::
	$di°ribuã
 (
msg_t
 *
msg_
)

137 i‡(
m©chög
 == 0) {

138 
rc
 = 
msg_
->
	`˛o£
 ();

139 
	`î∫o_as£π
 (
rc
 == 0);

140 
rc
 = 
msg_
->
	`öô
 ();

141 
	`î∫o_as£π
 (
rc
 == 0);

145 i‡(
msg_
->
	`is_vsm
 ()) {

146 
pùes_t
::
size_ty≥
 
i
 = 0; i < 
m©chög
; ++i)

147 if(!
	`wrôe
 (
pùes
 [
i
], 
msg_
))

148 --
i
;

149 
rc
 = 
msg_
->
	`˛o£
();

150 
	`î∫o_as£π
 (
rc
 == 0);

151 
rc
 = 
msg_
->
	`öô
 ();

152 
	`î∫o_as£π
 (
rc
 == 0);

158 
msg_
->
	`add_ªfs
 ((Ë
m©chög
 - 1);

161 
Áûed
 = 0;

162 
pùes_t
::
size_ty≥
 
i
 = 0; i < 
m©chög
; ++i)

163 i‡(!
	`wrôe
 (
pùes
 [
i
], 
msg_
)) {

164 ++
Áûed
;

165 --
i
;

167 i‡(
	`u∆ikñy
 (
Áûed
))

168 
msg_
->
	`rm_ªfs
 (
Áûed
);

172 
rc
 = 
msg_
->
	`öô
 ();

173 
	`î∫o_as£π
 (
rc
 == 0);

174 
	}
}

176 
boﬁ
 
	gzmq
::
di°_t
::
	$has_out
 ()

178  
åue
;

179 
	}
}

181 
boﬁ
 
	gzmq
::
di°_t
::
	$wrôe
 (
pùe_t
 *
pùe_
, 
msg_t
 *
msg_
)

183 i‡(!
pùe_
->
	`wrôe
 (
msg_
)) {

184 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
m©chög
 - 1);

185 
m©chög
--;

186 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
a˘ive
 - 1);

187 
a˘ive
--;

188 
pùes
.
	`sw≠
 (
a˘ive
, 
ñigibÀ
 - 1);

189 
ñigibÀ
--;

190  
Ál£
;

192 i‡(!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
))

193 
pùe_
->
	`Êush
 ();

194  
åue
;

195 
	}
}

	@dist.hpp

20 #i‚de‡
__ZMQ_DIST_HPP_INCLUDED__


21 
	#__ZMQ_DIST_HPP_INCLUDED__


	)

23 
	~<ve˘‹
>

25 
	~"¨øy.hµ
"

26 
	~"pùe.hµ
"

28 
«me•a˚
 
	gzmq


31 
˛ass
 
	gpùe_t
;

32 
˛ass
 
	gmsg_t
;

36 ˛as†
	cdi°_t


38 
	gpublic
:

40 
di°_t
 ();

41 ~
di°_t
 ();

44 
©èch
 (
zmq
::
pùe_t
 *
pùe_
);

47 
a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

51 
m©ch
 (
zmq
::
pùe_t
 *
pùe_
);

54 
unm©ch
 ();

57 
pùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

60 
£nd_to_m©chög
 (
zmq
::
msg_t
 *
msg_
);

63 
£nd_to_Æl
 (
zmq
::
msg_t
 *
msg_
);

65 
boﬁ
 
has_out
 ();

67 
	g¥iv©e
:

71 
boﬁ
 
wrôe
 (
zmq
::
pùe_t
 *
pùe_
, zmq::
msg_t
 *
msg_
);

74 
di°ribuã
 (
zmq
::
msg_t
 *
msg_
);

77 
	g¨øy_t
 <
	tzmq
::
	tpùe_t
, 2> 
	tpùes_t
;

78 
pùes_t
 
	gpùes
;

81 
	gpùes_t
::
size_ty≥
 
m©chög
;

86 
	gpùes_t
::
size_ty≥
 
a˘ive
;

93 
	gpùes_t
::
size_ty≥
 
ñigibÀ
;

96 
boﬁ
 
	gm‹e
;

98 
di°_t
 (const dist_t&);

99 c⁄° 
	gdi°_t
 &
	g›î©‹
 = (c⁄° 
di°_t
&);

	@encoder.hpp

20 #i‚de‡
__ZMQ_ENCODER_HPP_INCLUDED__


21 
	#__ZMQ_ENCODER_HPP_INCLUDED__


	)

23 #i‡
deföed
(
_MSC_VER
)

24 #i‚de‡
NOMINMAX


25 
	#NOMINMAX


	)

29 
	~<°ddef.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

32 
	~<Æg‹ôhm
>

34 
	~"îr.hµ
"

35 
	~"msg.hµ
"

36 
	~"i_ícodî.hµ
"

38 
«me•a˚
 
	gzmq


45 
	gãm∂©e
 <
ty≥«me
 
	gT
> cœs†
	cícodî_ba£_t
 : 
public
 
i_ícodî


47 
public
:

49 
ölöe
 
ícodî_ba£_t
 (
size_t
 
bufsize_
) :

50 
bufsize
 (
bufsize_
),

51 
ö_¥ogªss
 (
NULL
)

53 
	gbuf
 = (*Ë
mÆloc
 (
bufsize_
);

54 
Æloc_as£π
 (
buf
);

59 
ölöe
 
	gvútuÆ
 ~
ícodî_ba£_t
 ()

61 
‰ì
 (
buf
);

67 
ölöe
 
size_t
 
ícode
 (**
d©a_
, size_à
size_
)

69 *
	gbuf„r
 = !*
d©a_
 ? 
buf
 : *data_;

70 
size_t
 
	gbuf„rsize
 = !*
d©a_
 ? 
bufsize
 : 
size_
;

72 i‡(
	gö_¥ogªss
 =
NULL
)

75 
size_t
 
	gpos
 = 0;

76 
	gpos
 < 
	gbuf„rsize
) {

81 i‡(!
	gto_wrôe
) {

82 i‡(
	g√w_msg_Êag
) {

83 
	grc
 = 
ö_¥ogªss
->
˛o£
 ();

84 
î∫o_as£π
 (
rc
 == 0);

85 
	grc
 = 
ö_¥ogªss
->
öô
 ();

86 
î∫o_as£π
 (
rc
 == 0);

87 
	gö_¥ogªss
 = 
NULL
;

90 (
	g°©ic_ˇ°
 <
	gT
*> (
	gthis
)->*
	g√xt
) ();

103 i‡(!
	gpos
 && !*
	gd©a_
 && 
	gto_wrôe
 >
buf„rsize
) {

104 *
d©a_
 = 
wrôe_pos
;

105 
	gpos
 = 
to_wrôe
;

106 
	gwrôe_pos
 = 
NULL
;

107 
	gto_wrôe
 = 0;

108  
	gpos
;

112 
size_t
 
	gto_c›y
 = 
°d
::
mö
 (
to_wrôe
, 
buf„rsize
 - 
pos
);

113 
mem˝y
 (
buf„r
 + 
pos
, 
wrôe_pos
, 
to_c›y
);

114 
	gpos
 +
to_c›y
;

115 
	gwrôe_pos
 +
to_c›y
;

116 
	gto_wrôe
 -
to_c›y
;

119 *
	gd©a_
 = 
buf„r
;

120  
	gpos
;

123 
lﬂd_msg
 (
msg_t
 *
msg_
)

125 
zmq_as£π
 (
ö_¥ogªss
 =
NULL
);

126 
	gö_¥ogªss
 = 
msg_
;

127 (
	g°©ic_ˇ°
 <
	gT
*> (
	gthis
)->*
	g√xt
) ();

130 
	g¥Ÿe˘ed
:

133 (
T
::*
	t°ï_t
) ();

137 
ölöe
 
√xt_°ï
 (*
wrôe_pos_
, 
size_t
 
to_wrôe_
,

138 
°ï_t
 
√xt_
, 
boﬁ
 
√w_msg_Êag_
)

140 
	gwrôe_pos
 = (*Ë
wrôe_pos_
;

141 
	gto_wrôe
 = 
to_wrôe_
;

142 
	g√xt
 = 
√xt_
;

143 
	g√w_msg_Êag
 = 
√w_msg_Êag_
;

146 
	g¥iv©e
:

149 *
wrôe_pos
;

152 
size_t
 
	gto_wrôe
;

156 
°ï_t
 
	g√xt
;

158 
boﬁ
 
	g√w_msg_Êag
;

161 
size_t
 
	gbufsize
;

162 *
	gbuf
;

164 
ícodî_ba£_t
 (constÉncoder_base_t&);

165 
	g›î©‹
 = (c⁄° 
ícodî_ba£_t
&);

167 
	g¥Ÿe˘ed
:

169 
msg_t
 *
ö_¥ogªss
;

	@epoll.cpp

20 
	~"ïﬁl.hµ
"

21 #i‡
deföed
 
ZMQ_USE_EPOLL


23 
	~<sys/ïﬁl.h
>

24 
	~<°dlib.h
>

25 
	~<°rög.h
>

26 
	~<uni°d.h
>

27 
	~<Æg‹ôhm
>

28 
	~<√w
>

30 
	~"ïﬁl.hµ
"

31 
	~"îr.hµ
"

32 
	~"c⁄fig.hµ
"

33 
	~"i_pﬁl_evíts.hµ
"

35 
	gzmq
::
ïﬁl_t
::
	$ïﬁl_t
 () :

36 
	$°›pög
 (
Ál£
)

38 
ïﬁl_fd
 = 
	`ïﬁl_¸óã
 (1);

39 
	`î∫o_as£π
 (
ïﬁl_fd
 != -1);

40 
	}
}

42 
	gzmq
::
ïﬁl_t
::~
	$ïﬁl_t
 ()

45 
w‹kî
.
	`°›
 ();

47 
	`˛o£
 (
ïﬁl_fd
);

48 
ªtúed_t
::
ôî©‹
 
ô
 = 
ªtúed
.
	`begö
 (); ià!ªtúed.
	`íd
 (); ++it)

49 
dñëe
 *
ô
;

50 
	}
}

52 
	gzmq
::
ïﬁl_t
::
h™dÀ_t
 
zmq
::ïﬁl_t::
	$add_fd
 (
fd_t
 
fd_
, 
i_pﬁl_evíts
 *
evíts_
)

54 
pﬁl_íåy_t
 *
≥
 = 
	`√w
 (
°d
::
nŸhrow
)Öoll_entry_t;

55 
	`Æloc_as£π
 (
≥
);

59 
	`mem£t
 (
≥
, 0,  (
pﬁl_íåy_t
));

61 
≥
->
fd
 = 
fd_
;

62 
≥
->
ev
.
evíts
 = 0;

63 
≥
->
ev
.
d©a
.
±r
 =Öe;

64 
≥
->
evíts
 = 
evíts_
;

66 
rc
 = 
	`ïﬁl_˘l
 (
ïﬁl_fd
, 
EPOLL_CTL_ADD
, 
fd_
, &
≥
->
ev
);

67 
	`î∫o_as£π
 (
rc
 != -1);

70 
	`adju°_lﬂd
 (1);

72  
≥
;

73 
	}
}

75 
	gzmq
::
ïﬁl_t
::
	$rm_fd
 (
h™dÀ_t
 
h™dÀ_
)

77 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

78 
rc
 = 
	`ïﬁl_˘l
 (
ïﬁl_fd
, 
EPOLL_CTL_DEL
, 
≥
->
fd
, &≥->
ev
);

79 
	`î∫o_as£π
 (
rc
 != -1);

80 
≥
->
fd
 = 
ªtúed_fd
;

81 
ªtúed
.
	`push_back
 (
≥
);

84 
	`adju°_lﬂd
 (-1);

85 
	}
}

87 
	gzmq
::
ïﬁl_t
::
	$£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

89 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

90 
≥
->
ev
.
evíts
 |
EPOLLIN
;

91 
rc
 = 
	`ïﬁl_˘l
 (
ïﬁl_fd
, 
EPOLL_CTL_MOD
, 
≥
->
fd
, &≥->
ev
);

92 
	`î∫o_as£π
 (
rc
 != -1);

93 
	}
}

95 
	gzmq
::
ïﬁl_t
::
	$ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

97 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

98 
≥
->
ev
.
evíts
 &~((Ë
EPOLLIN
);

99 
rc
 = 
	`ïﬁl_˘l
 (
ïﬁl_fd
, 
EPOLL_CTL_MOD
, 
≥
->
fd
, &≥->
ev
);

100 
	`î∫o_as£π
 (
rc
 != -1);

101 
	}
}

103 
	gzmq
::
ïﬁl_t
::
	$£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

105 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

106 
≥
->
ev
.
evíts
 |
EPOLLOUT
;

107 
rc
 = 
	`ïﬁl_˘l
 (
ïﬁl_fd
, 
EPOLL_CTL_MOD
, 
≥
->
fd
, &≥->
ev
);

108 
	`î∫o_as£π
 (
rc
 != -1);

109 
	}
}

111 
	gzmq
::
ïﬁl_t
::
	$ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

113 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

114 
≥
->
ev
.
evíts
 &~((Ë
EPOLLOUT
);

115 
rc
 = 
	`ïﬁl_˘l
 (
ïﬁl_fd
, 
EPOLL_CTL_MOD
, 
≥
->
fd
, &≥->
ev
);

116 
	`î∫o_as£π
 (
rc
 != -1);

117 
	}
}

119 
	gzmq
::
ïﬁl_t
::
	$°¨t
 ()

121 
w‹kî
.
	`°¨t
 (
w‹kî_routöe
, 
this
);

122 
	}
}

124 
	gzmq
::
ïﬁl_t
::
	$°›
 ()

126 
°›pög
 = 
åue
;

127 
	}
}

129 
	gzmq
::
ïﬁl_t
::
	$max_fds
 ()

132 
	}
}

134 
	gzmq
::
ïﬁl_t
::
	$lo›
 ()

136 
ïﬁl_evít
 
ev_buf
 [
max_io_evíts
];

138 !
°›pög
) {

141 
timeout
 = (Ë
	`execuã_timîs
 ();

144 
n
 = 
	`ïﬁl_waô
 (
ïﬁl_fd
, &
ev_buf
 [0], 
max_io_evíts
,

145 
timeout
 ?Åimeout : -1);

146 i‡(
n
 == -1) {

147 
	`î∫o_as£π
 (
î∫o
 =
EINTR
);

151 
i
 = 0; i < 
n
; i ++) {

152 
pﬁl_íåy_t
 *
≥
 = (’ﬁl_íåy_t*Ë
ev_buf
 [
i
].
d©a
.
±r
);

154 i‡(
≥
->
fd
 =
ªtúed_fd
)

156 i‡(
ev_buf
 [
i
].
evíts
 & (
EPOLLERR
 | 
EPOLLHUP
))

157 
≥
->
evíts
->
	`ö_evít
 ();

158 i‡(
≥
->
fd
 =
ªtúed_fd
)

160 i‡(
ev_buf
 [
i
].
evíts
 & 
EPOLLOUT
)

161 
≥
->
evíts
->
	`out_evít
 ();

162 i‡(
≥
->
fd
 =
ªtúed_fd
)

164 i‡(
ev_buf
 [
i
].
evíts
 & 
EPOLLIN
)

165 
≥
->
evíts
->
	`ö_evít
 ();

169 
ªtúed_t
::
ôî©‹
 
ô
 = 
ªtúed
.
	`begö
 (); ià!ªtúed.
	`íd
 ();

170 ++
ô
)

171 
dñëe
 *
ô
;

172 
ªtúed
.
	`˛ór
 ();

174 
	}
}

176 
	gzmq
::
ïﬁl_t
::
	$w‹kî_routöe
 (*
¨g_
)

178 ((
ïﬁl_t
*Ë
¨g_
)->
	`lo›
 ();

179 
	}
}

	@epoll.hpp

20 #i‚de‡
__ZMQ_EPOLL_HPP_INCLUDED__


21 
	#__ZMQ_EPOLL_HPP_INCLUDED__


	)

24 
	~"pﬁÀr.hµ
"

25 #i‡
deföed
 
ZMQ_USE_EPOLL


27 
	~<ve˘‹
>

28 
	~<sys/ïﬁl.h
>

30 
	~"fd.hµ
"

31 
	~"thªad.hµ
"

32 
	~"pﬁÀr_ba£.hµ
"

34 
«me•a˚
 
	gzmq


37 
	gi_pﬁl_evíts
;

42 ˛as†
	cïﬁl_t
 : 
public
 
pﬁÀr_ba£_t


44 
public
:

46 * 
	th™dÀ_t
;

48 
ïﬁl_t
 ();

49 ~
ïﬁl_t
 ();

52 
h™dÀ_t
 
add_fd
 (
fd_t
 
fd_
, 
zmq
::
i_pﬁl_evíts
 *
evíts_
);

53 
rm_fd
 (
h™dÀ_t
 
h™dÀ_
);

54 
£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

55 
ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

56 
£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

57 
ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

58 
°¨t
 ();

59 
°›
 ();

61 
max_fds
 ();

63 
	g¥iv©e
:

66 
w‹kî_routöe
 (*
¨g_
);

69 
lo›
 ();

72 
fd_t
 
	gïﬁl_fd
;

74 
	spﬁl_íåy_t


76 
fd_t
 
	gfd
;

77 
ïﬁl_evít
 
	gev
;

78 
	gzmq
::
i_pﬁl_evíts
 *
evíts
;

82 
	g°d
::
	tve˘‹
 <
	tpﬁl_íåy_t
*> 
	tªtúed_t
;

83 
ªtúed_t
 
	gªtúed
;

86 
boﬁ
 
	g°›pög
;

89 
thªad_t
 
	gw‹kî
;

91 
ïﬁl_t
 (constÉpoll_t&);

92 c⁄° 
	gïﬁl_t
 &
	g›î©‹
 = (c⁄° 
ïﬁl_t
&);

95 
ïﬁl_t
 
	tpﬁÀr_t
;

	@err.cpp

20 
	~"îr.hµ
"

21 
	~"∂©f‹m.hµ
"

23 c⁄° *
	gzmq
::
	$î∫o_to_°rög
 (
î∫o_
)

25 
î∫o_
) {

26 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


27 
ENOTSUP
:

29 
EPROTONOSUPPORT
:

31 
ENOBUFS
:

33 
ENETDOWN
:

35 
EADDRINUSE
:

37 
EADDRNOTAVAIL
:

39 
ECONNREFUSED
:

41 
EINPROGRESS
:

44 
EFSM
:

46 
ENOCOMPATPROTO
:

48 
ETERM
:

50 
EMTHREAD
:

53 #i‡
deföed
 
_MSC_VER


54 #¥agm®
	`w¨nög
 (
push
)

55 #¥agm®
	`w¨nög
 (
dißbÀ
:4996)

57  
	`°ªº‹
 (
î∫o_
);

58 #i‡
deföed
 
_MSC_VER


59 #¥agm®
	`w¨nög
 (
p›
)

62 
	}
}

64 
	gzmq
::
	$zmq_ab‹t
(c⁄° *
îrmsg_
)

66 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


69 
ULONG_PTR
 
exåa_öfo
 [1];

70 
exåa_öfo
 [0] = (
ULONG_PTR
Ë
îrmsg_
;

71 
	`Rai£Ex˚±i⁄
 (0x40000015, 
EXCEPTION_NONCONTINUABLE
, 1, 
exåa_öfo
);

73 ()
îrmsg_
;

74 
	`ab‹t
 ();

76 
	}
}

78 #ifde‡
ZMQ_HAVE_WINDOWS


80 c⁄° *
	gzmq
::
	$wß_îr‹
()

82 
no
 = 
	`WSAGëLa°Eº‹
 ();

84 i‡(
no
 =
WSAEWOULDBLOCK
)

85  
NULL
;

87  
	`wß_îr‹_no
 (
no
);

88 
	}
}

90 c⁄° *
	gzmq
::
	$wß_îr‹_no
 (
no_
)

96 (
no_
 =
WSABASEERR
) ?

98 (
no_
 =
WSAEINTR
) ?

100 (
no_
 =
WSAEBADF
) ?

102 (
no_
 =
WSAEACCES
) ?

104 (
no_
 =
WSAEFAULT
) ?

106 (
no_
 =
WSAEINVAL
) ?

108 (
no_
 =
WSAEMFILE
) ?

110 (
no_
 =
WSAEWOULDBLOCK
) ?

112 (
no_
 =
WSAEINPROGRESS
) ?

114 (
no_
 =
WSAEALREADY
) ?

116 (
no_
 =
WSAENOTSOCK
) ?

118 (
no_
 =
WSAEDESTADDRREQ
) ?

120 (
no_
 =
WSAEMSGSIZE
) ?

122 (
no_
 =
WSAEPROTOTYPE
) ?

124 (
no_
 =
WSAENOPROTOOPT
) ?

126 (
no_
 =
WSAEPROTONOSUPPORT
) ?

128 (
no_
 =
WSAESOCKTNOSUPPORT
) ?

130 (
no_
 =
WSAEOPNOTSUPP
) ?

132 (
no_
 =
WSAEPFNOSUPPORT
) ?

134 (
no_
 =
WSAEAFNOSUPPORT
) ?

136 (
no_
 =
WSAEADDRINUSE
) ?

138 (
no_
 =
WSAEADDRNOTAVAIL
) ?

140 (
no_
 =
WSAENETDOWN
) ?

142 (
no_
 =
WSAENETUNREACH
) ?

144 (
no_
 =
WSAENETRESET
) ?

146 (
no_
 =
WSAECONNABORTED
) ?

148 (
no_
 =
WSAECONNRESET
) ?

150 (
no_
 =
WSAENOBUFS
) ?

152 (
no_
 =
WSAEISCONN
) ?

154 (
no_
 =
WSAENOTCONN
) ?

156 (
no_
 =
WSAESHUTDOWN
) ?

158 (
no_
 =
WSAETOOMANYREFS
) ?

160 (
no_
 =
WSAETIMEDOUT
) ?

162 (
no_
 =
WSAECONNREFUSED
) ?

164 (
no_
 =
WSAELOOP
) ?

166 (
no_
 =
WSAENAMETOOLONG
) ?

168 (
no_
 =
WSAEHOSTDOWN
) ?

170 (
no_
 =
WSAEHOSTUNREACH
) ?

172 (
no_
 =
WSAENOTEMPTY
) ?

174 (
no_
 =
WSAEPROCLIM
) ?

176 (
no_
 =
WSAEUSERS
) ?

178 (
no_
 =
WSAEDQUOT
) ?

180 (
no_
 =
WSAESTALE
) ?

182 (
no_
 =
WSAEREMOTE
) ?

184 (
no_
 =
WSASYSNOTREADY
) ?

186 (
no_
 =
WSAVERNOTSUPPORTED
) ?

188 (
no_
 =
WSANOTINITIALISED
) ?

190 (
no_
 =
WSAHOST_NOT_FOUND
) ?

192 (
no_
 =
WSATRY_AGAIN
) ?

194 (
no_
 =
WSANO_RECOVERY
) ?

196 (
no_
 =
WSANO_DATA
) ?

199 
	}
}

201 
	gzmq
::
	$wö_îr‹
 (*
buf„r_
, 
size_t
 
buf„r_size_
)

203 
DWORD
 
îrcode
 = 
	`GëLa°Eº‹
 ();

204 #i‡
deföed
 
_WIN32_WCE


205 
DWORD
 
rc
 = 
	`F‹m©Mesßge
 (
FORMAT_MESSAGE_FROM_SYSTEM
 |

206 
FORMAT_MESSAGE_IGNORE_INSERTS
, 
NULL
, 
îrcode
, 
	`MAKELANGID
(
LANG_NEUTRAL
,

207 
SUBLANG_DEFAULT
), (
LPWSTR
)
buf„r_
, 
buf„r_size_
 / (
wch¨_t
), 
NULL
 );

209 
DWORD
 
rc
 = 
	`F‹m©MesßgeA
 (
FORMAT_MESSAGE_FROM_SYSTEM
 |

210 
FORMAT_MESSAGE_IGNORE_INSERTS
, 
NULL
, 
îrcode
, 
	`MAKELANGID
(
LANG_NEUTRAL
,

211 
SUBLANG_DEFAULT
), 
buf„r_
, (
DWORD
Ë
buf„r_size_
, 
NULL
 );

213 
	`zmq_as£π
 (
rc
);

214 
	}
}

216 
	gzmq
::
	$wß_îr‹_to_î∫o
 (
îrcode
)

218 
îrcode
) {

220 
WSAEINTR
:

221  
EINTR
;

223 
WSAEBADF
:

224  
EBADF
;

226 
WSAEACCES
:

227  
EACCES
;

229 
WSAEFAULT
:

230  
EFAULT
;

232 
WSAEINVAL
:

233  
EINVAL
;

235 
WSAEMFILE
:

236  
EMFILE
;

238 
WSAEWOULDBLOCK
:

239  
EBUSY
;

241 
WSAEINPROGRESS
:

242  
EAGAIN
;

244 
WSAEALREADY
:

245  
EAGAIN
;

247 
WSAENOTSOCK
:

248  
ENOTSOCK
;

250 
WSAEDESTADDRREQ
:

251  
EFAULT
;

253 
WSAEMSGSIZE
:

254  
EMSGSIZE
;

256 
WSAEPROTOTYPE
:

257  
EFAULT
;

259 
WSAENOPROTOOPT
:

260  
EINVAL
;

262 
WSAEPROTONOSUPPORT
:

263  
EPROTONOSUPPORT
;

265 
WSAESOCKTNOSUPPORT
:

266  
EFAULT
;

268 
WSAEOPNOTSUPP
:

269  
EFAULT
;

271 
WSAEPFNOSUPPORT
:

272  
EPROTONOSUPPORT
;

274 
WSAEAFNOSUPPORT
:

275  
EAFNOSUPPORT
;

277 
WSAEADDRINUSE
:

278  
EADDRINUSE
;

280 
WSAEADDRNOTAVAIL
:

281  
EADDRNOTAVAIL
;

283 
WSAENETDOWN
:

284  
ENETDOWN
;

286 
WSAENETUNREACH
:

287  
ENETUNREACH
;

289 
WSAENETRESET
:

290  
ENETRESET
;

292 
WSAECONNABORTED
:

293  
ECONNABORTED
;

295 
WSAECONNRESET
:

296  
ECONNRESET
;

298 
WSAENOBUFS
:

299  
ENOBUFS
;

301 
WSAEISCONN
:

302  
EFAULT
;

304 
WSAENOTCONN
:

305  
ENOTCONN
;

307 
WSAESHUTDOWN
:

308  
EFAULT
;

310 
WSAETOOMANYREFS
:

311  
EFAULT
;

313 
WSAETIMEDOUT
:

314  
ETIMEDOUT
;

316 
WSAECONNREFUSED
:

317  
ECONNREFUSED
;

319 
WSAELOOP
:

320  
EFAULT
;

322 
WSAENAMETOOLONG
:

323  
EFAULT
;

325 
WSAEHOSTDOWN
:

326  
EAGAIN
;

328 
WSAEHOSTUNREACH
:

329  
EHOSTUNREACH
;

331 
WSAENOTEMPTY
:

332  
EFAULT
;

334 
WSAEPROCLIM
:

335  
EFAULT
;

337 
WSAEUSERS
:

338  
EFAULT
;

340 
WSAEDQUOT
:

341  
EFAULT
;

343 
WSAESTALE
:

344  
EFAULT
;

346 
WSAEREMOTE
:

347  
EFAULT
;

349 
WSASYSNOTREADY
:

350  
EFAULT
;

352 
WSAVERNOTSUPPORTED
:

353  
EFAULT
;

355 
WSANOTINITIALISED
:

356  
EFAULT
;

358 
WSAHOST_NOT_FOUND
:

359  
EFAULT
;

361 
WSATRY_AGAIN
:

362  
EFAULT
;

364 
WSANO_RECOVERY
:

365  
EFAULT
;

367 
WSANO_DATA
:

368  
EFAULT
;

370 
	`wß_as£π
 (
Ál£
);

374 
	}
}

	@err.hpp

20 #i‚de‡
__ZMQ_ERR_HPP_INCLUDED__


21 
	#__ZMQ_ERR_HPP_INCLUDED__


	)

24 
	~"../ö˛ude/zmq.h
"

26 
	~<as£π.h
>

27 #i‡
deföed
 
_WIN32_WCE


28 
	~"..\buûds\msvc\î∫o.hµ
"

30 
	~<î∫o.h
>

32 
	~<°rög.h
>

33 
	~<°dlib.h
>

34 
	~<°dio.h
>

36 
	~"∂©f‹m.hµ
"

37 
	~"likñy.hµ
"

39 #ifde‡
ZMQ_HAVE_WINDOWS


40 
	~"wödows.hµ
"

42 
	~<√tdb.h
>

46 #i‚de‡
EPROTO


47 
	#EPROTO
 0

	)

50 
«me•a˚
 
	gzmq


52 c⁄° *
î∫o_to_°rög
 (
î∫o_
);

53 
zmq_ab‹t
 (c⁄° *
îrmsg_
);

56 #ifde‡
ZMQ_HAVE_WINDOWS


58 
«me•a˚
 
	gzmq


60 c⁄° *
wß_îr‹
 ();

61 c⁄° *
wß_îr‹_no
 (
no_
);

62 
wö_îr‹
 (*
buf„r_
, 
size_t
 
buf„r_size_
);

63 
wß_îr‹_to_î∫o
 (
îrcode
);

67 
	#wß_as£π
(
x
) \

69 i‡(
	`u∆ikñy
 (!(
x
))) {\

70 c⁄° *
îr°r
 = 
zmq
::
	`wß_îr‹
 ();\

71 i‡(
îr°r
 !
NULL
) {\

72 
	`Ârötf
 (
°dîr
, "As£πi⁄ faûed: %†(%s:%d)\n", 
îr°r
, \

73 
__FILE__
, 
__LINE__
);\

74 
zmq
::
	`zmq_ab‹t
 (
îr°r
);\

77 } 
Ál£
)

	)

80 
	#wß_as£π_no
(
no
) \

82 c⁄° *
îr°r
 = 
zmq
::
	`wß_îr‹_no
 (
no
);\

83 i‡(
îr°r
 !
NULL
) {\

84 
	`Ârötf
 (
°dîr
, "As£πi⁄ faûed: %†(%s:%d)\n", 
îr°r
, \

85 
__FILE__
, 
__LINE__
);\

86 
zmq
::
	`zmq_ab‹t
 (
îr°r
);\

88 } 
Ál£
)

	)

91 
	#wö_as£π
(
x
) \

93 i‡(
	`u∆ikñy
 (!(
x
))) {\

94 
îr°r
 [256];\

95 
zmq
::
	`wö_îr‹
 (
îr°r
, 256);\

96 
	`Ârötf
 (
°dîr
, "As£πi⁄ faûed: %†(%s:%d)\n", 
îr°r
, \

97 
__FILE__
, 
__LINE__
);\

98 
zmq
::
	`zmq_ab‹t
 (
îr°r
);\

100 } 
Ál£
)

	)

107 
	#zmq_as£π
(
x
) \

109 i‡(
	`u∆ikñy
 (!(
x
))) {\

110 
	`Ârötf
 (
°dîr
, "Assertion failed: %s (%s:%d)\n", #x, \

111 
__FILE__
, 
__LINE__
);\

112 
zmq
::
	`zmq_ab‹t
 (#x);\

114 } 
Ál£
)

	)

117 
	#î∫o_as£π
(
x
) \

119 i‡(
	`u∆ikñy
 (!(
x
))) {\

120 c⁄° *
îr°r
 = 
	`°ªº‹
 (
î∫o
);\

121 
	`Ârötf
 (
°dîr
, "%†(%s:%d)\n", 
îr°r
, 
__FILE__
, 
__LINE__
);\

122 
zmq
::
	`zmq_ab‹t
 (
îr°r
);\

124 } 
Ál£
)

	)

127 
	#posix_as£π
(
x
) \

129 i‡(
	`u∆ikñy
 (
x
)) {\

130 c⁄° *
îr°r
 = 
	`°ªº‹
 (
x
);\

131 
	`Ârötf
 (
°dîr
, "%†(%s:%d)\n", 
îr°r
, 
__FILE__
, 
__LINE__
);\

132 
zmq
::
	`zmq_ab‹t
 (
îr°r
);\

134 } 
Ál£
)

	)

137 
	#gai_as£π
(
x
) \

139 i‡(
	`u∆ikñy
 (
x
)) {\

140 c⁄° *
îr°r
 = 
	`gai_°ªº‹
 (
x
);\

141 
	`Ârötf
 (
°dîr
, "%†(%s:%d)\n", 
îr°r
, 
__FILE__
, 
__LINE__
);\

142 
zmq
::
	`zmq_ab‹t
 (
îr°r
);\

144 } 
Ál£
)

	)

147 
	#Æloc_as£π
(
x
) \

149 i‡(
	`u∆ikñy
 (!
x
)) {\

150 
	`Ârötf
 (
°dîr
, "FATAL ERROR: OUT OF MEMORY (%s:%d)\n",\

151 
__FILE__
, 
__LINE__
);\

152 
zmq
::
	`zmq_ab‹t
 ("FATAL ERROR: OUT OF MEMORY");\

154 } 
Ál£
)

	)

	@fd.hpp

20 #i‚de‡
__ZMQ_FD_HPP_INCLUDED__


21 
	#__ZMQ_FD_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #ifde‡
ZMQ_HAVE_WINDOWS


26 
	~"wödows.hµ
"

29 
«me•a˚
 
	gzmq


31 #ifde‡
ZMQ_HAVE_WINDOWS


32 #i‡
deföed
 
_MSC_VER
 &&_MSC_VER <= 1400

33 
UINT_PTR
 
	tfd_t
;

34 íum {
	gªtúed_fd
 = (
fd_t
)(~0)};

36 
SOCKET
 
	tfd_t
;

37 íum {
	gªtúed_fd
 = (
fd_t
)
INVALID_SOCKET
};

40 
	tfd_t
;

41 íum {
	gªtúed_fd
 = -1};

	@fq.cpp

20 
	~"fq.hµ
"

21 
	~"pùe.hµ
"

22 
	~"îr.hµ
"

23 
	~"msg.hµ
"

25 
	gzmq
::
fq_t
::
	$fq_t
 () :

26 
	`a˘ive
 (0),

27 
	`cuºít
 (0),

28 
	$m‹e
 (
Ál£
)

30 
	}
}

32 
	gzmq
::
fq_t
::~
	$fq_t
 ()

34 
	`zmq_as£π
 (
pùes
.
	`em±y
 ());

35 
	}
}

37 
	gzmq
::
fq_t
::
	$©èch
 (
pùe_t
 *
pùe_
)

39 
pùes
.
	`push_back
 (
pùe_
);

40 
pùes
.
	`sw≠
 (
a˘ive
,Öùes.
	`size
 () - 1);

41 
a˘ive
++;

42 
	}
}

44 
	gzmq
::
fq_t
::
	$pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

46 c⁄° 
pùes_t
::
size_ty≥
 
ödex
 = 
pùes
.
	`ödex
 (
pùe_
);

50 i‡(
ödex
 < 
a˘ive
) {

51 
a˘ive
--;

52 
pùes
.
	`sw≠
 (
ödex
, 
a˘ive
);

53 i‡(
cuºít
 =
a˘ive
)

54 
cuºít
 = 0;

56 
pùes
.
	`îa£
 (
pùe_
);

57 
	}
}

59 
	gzmq
::
fq_t
::
	$a˘iv©ed
 (
pùe_t
 *
pùe_
)

62 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
a˘ive
);

63 
a˘ive
++;

64 
	}
}

66 
	gzmq
::
fq_t
::
	$ªcv
 (
msg_t
 *
msg_
)

68  
	`ªcvpùe
 (
msg_
, 
NULL
);

69 
	}
}

71 
	gzmq
::
fq_t
::
	$ªcvpùe
 (
msg_t
 *
msg_
, 
pùe_t
 **
pùe_
)

74 
rc
 = 
msg_
->
	`˛o£
 ();

75 
	`î∫o_as£π
 (
rc
 == 0);

78 
a˘ive
 > 0) {

82 
boﬁ
 
„tched
 = 
pùes
 [
cuºít
]->
	`ªad
 (
msg_
);

87 i‡(
„tched
) {

88 i‡(
pùe_
)

89 *
pùe_
 = 
pùes
 [
cuºít
];

90 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹e? 
åue
: 
Ál£
;

91 i‡(!
m‹e
)

92 
cuºít
 = (cuºíà+ 1Ë% 
a˘ive
;

99 
	`zmq_as£π
 (!
m‹e
);

101 
a˘ive
--;

102 
pùes
.
	`sw≠
 (
cuºít
, 
a˘ive
);

103 i‡(
cuºít
 =
a˘ive
)

104 
cuºít
 = 0;

109 
rc
 = 
msg_
->
	`öô
 ();

110 
	`î∫o_as£π
 (
rc
 == 0);

111 
î∫o
 = 
EAGAIN
;

113 
	}
}

115 
boﬁ
 
	gzmq
::
fq_t
::
	$has_ö
 ()

118 i‡(
m‹e
)

119  
åue
;

125 
a˘ive
 > 0) {

126 i‡(
pùes
 [
cuºít
]->
	`check_ªad
 ())

127  
åue
;

130 
a˘ive
--;

131 
pùes
.
	`sw≠
 (
cuºít
, 
a˘ive
);

132 i‡(
cuºít
 =
a˘ive
)

133 
cuºít
 = 0;

136  
Ál£
;

137 
	}
}

	@fq.hpp

20 #i‚de‡
__ZMQ_FQ_HPP_INCLUDED__


21 
	#__ZMQ_FQ_HPP_INCLUDED__


	)

23 
	~"¨øy.hµ
"

24 
	~"pùe.hµ
"

25 
	~"msg.hµ
"

27 
«me•a˚
 
	gzmq


34 ˛as†
	cfq_t


36 
	gpublic
:

38 
fq_t
 ();

39 ~
fq_t
 ();

41 
©èch
 (
pùe_t
 *
pùe_
);

42 
a˘iv©ed
 (
pùe_t
 *
pùe_
);

43 
pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
);

45 
ªcv
 (
msg_t
 *
msg_
);

46 
ªcvpùe
 (
msg_t
 *
msg_
, 
pùe_t
 **
pùe_
);

47 
boﬁ
 
has_ö
 ();

49 
	g¥iv©e
:

52 
¨øy_t
 <
	tpùe_t
, 1> 
	tpùes_t
;

53 
pùes_t
 
	gpùes
;

57 
	gpùes_t
::
size_ty≥
 
a˘ive
;

60 
	gpùes_t
::
size_ty≥
 
cuºít
;

64 
boﬁ
 
	gm‹e
;

66 
fq_t
 (const fq_t&);

67 c⁄° 
	gfq_t
 &
	g›î©‹
 = (c⁄° 
fq_t
&);

	@i_decoder.hpp

20 #i‚de‡
__ZMQ_I_DECODER_HPP_INCLUDED__


21 
	#__ZMQ_I_DECODER_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


28 
˛ass
 
	gmsg_t
;

32 ˛as†
	ci_decodî


34 
	gpublic
:

35 
vútuÆ
 ~
i_decodî
 () {}

37 
vútuÆ
 
gë_buf„r
 (**
d©a_
, 
size_t
 *
size_
) = 0;

43 
vútuÆ
 
decode
 (c⁄° *
d©a_
, 
size_t
 
size_
,

44 
size_t
 &
¥o˚s£d
) = 0;

46 
vútuÆ
 
msg_t
 *
msg
 () = 0;

	@i_encoder.hpp

20 #i‚de‡
__ZMQ_I_ENCODER_HPP_INCLUDED__


21 
	#__ZMQ_I_ENCODER_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


29 
˛ass
 
	gmsg_t
;

33 
	si_ícodî


35 
	gvútuÆ
 ~
i_ícodî
 () {}

41 
vútuÆ
 
size_t
 
ícode
 (**
d©a_
, size_à
size
) = 0;

44 
vútuÆ
 
lﬂd_msg
 (
msg_t
 *
msg_
) = 0;

	@i_engine.hpp

20 #i‚de‡
__ZMQ_I_ENGINE_HPP_INCLUDED__


21 
	#__ZMQ_I_ENGINE_HPP_INCLUDED__


	)

23 
«me•a˚
 
	gzmq


26 
˛ass
 
	gio_thªad_t
;

30 
	si_ígöe


32 
	gvútuÆ
 ~
i_ígöe
 () {}

35 
vútuÆ
 
∂ug
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

36 
˛ass
 
£ssi⁄_ba£_t
 *
£ssi⁄_
) = 0;

40 
vútuÆ
 
ãrmö©e
 () = 0;

44 
vútuÆ
 
ª°¨t_öput
 () = 0;

48 
vútuÆ
 
ª°¨t_ouçut
 () = 0;

50 
vútuÆ
 
z≠_msg_avaûabÀ
 () = 0;

	@i_poll_events.hpp

20 #i‚de‡
__ZMQ_I_POLL_EVENTS_HPP_INCLUDED__


21 
	#__ZMQ_I_POLL_EVENTS_HPP_INCLUDED__


	)

23 
«me•a˚
 
	gzmq


29 
	si_pﬁl_evíts


31 
	gvútuÆ
 ~
i_pﬁl_evíts
 () {}

34 
vútuÆ
 
ö_evít
 () = 0;

37 
vútuÆ
 
out_evít
 () = 0;

40 
vútuÆ
 
timî_evít
 (
id_
) = 0;

	@io_object.cpp

20 
	~"io_obje˘.hµ
"

21 
	~"io_thªad.hµ
"

22 
	~"îr.hµ
"

24 
	gzmq
::
io_obje˘_t
::
	$io_obje˘_t
 (
io_thªad_t
 *
io_thªad_
) :

25 
	$pﬁÀr
 (
NULL
)

27 i‡(
io_thªad_
)

28 
	`∂ug
 (
io_thªad_
);

29 
	}
}

31 
	gzmq
::
io_obje˘_t
::~
	$io_obje˘_t
 ()

33 
	}
}

35 
zmq
::
io_obje˘_t
::
	$∂ug
 (
io_thªad_t
 *
io_thªad_
)

37 
	`zmq_as£π
 (
io_thªad_
);

38 
	`zmq_as£π
 (!
pﬁÀr
);

41 
pﬁÀr
 = 
io_thªad_
->
	`gë_pﬁÀr
 ();

42 
	}
}

44 
	gzmq
::
io_obje˘_t
::
	$u≈lug
 ()

46 
	`zmq_as£π
 (
pﬁÀr
);

50 
pﬁÀr
 = 
NULL
;

51 
	}
}

53 
	gzmq
::
io_obje˘_t
::
h™dÀ_t
 
zmq
::io_obje˘_t::
	$add_fd
 (
fd_t
 
fd_
)

55  
pﬁÀr
->
	`add_fd
 (
fd_
, 
this
);

56 
	}
}

58 
	gzmq
::
io_obje˘_t
::
	$rm_fd
 (
h™dÀ_t
 
h™dÀ_
)

60 
pﬁÀr
->
	`rm_fd
 (
h™dÀ_
);

61 
	}
}

63 
	gzmq
::
io_obje˘_t
::
	$£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

65 
pﬁÀr
->
	`£t_pﬁlö
 (
h™dÀ_
);

66 
	}
}

68 
	gzmq
::
io_obje˘_t
::
	$ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

70 
pﬁÀr
->
	`ª£t_pﬁlö
 (
h™dÀ_
);

71 
	}
}

73 
	gzmq
::
io_obje˘_t
::
	$£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

75 
pﬁÀr
->
	`£t_pﬁlout
 (
h™dÀ_
);

76 
	}
}

78 
	gzmq
::
io_obje˘_t
::
	$ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

80 
pﬁÀr
->
	`ª£t_pﬁlout
 (
h™dÀ_
);

81 
	}
}

83 
	gzmq
::
io_obje˘_t
::
	$add_timî
 (
timeout_
, 
id_
)

85 
pﬁÀr
->
	`add_timî
 (
timeout_
, 
this
, 
id_
);

86 
	}
}

88 
	gzmq
::
io_obje˘_t
::
	$ˇn˚l_timî
 (
id_
)

90 
pﬁÀr
->
	`ˇn˚l_timî
 (
this
, 
id_
);

91 
	}
}

93 
	gzmq
::
io_obje˘_t
::
	$ö_evít
 ()

95 
	`zmq_as£π
 (
Ál£
);

96 
	}
}

98 
	gzmq
::
io_obje˘_t
::
	$out_evít
 ()

100 
	`zmq_as£π
 (
Ál£
);

101 
	}
}

103 
	gzmq
::
io_obje˘_t
::
	$timî_evít
 ()

105 
	`zmq_as£π
 (
Ál£
);

106 
	}
}

	@io_object.hpp

20 #i‚de‡
__ZMQ_IO_OBJECT_HPP_INCLUDED__


21 
	#__ZMQ_IO_OBJECT_HPP_INCLUDED__


	)

23 
	~<°ddef.h
>

25 
	~"°döt.hµ
"

26 
	~"pﬁÀr.hµ
"

27 
	~"i_pﬁl_evíts.hµ
"

29 
«me•a˚
 
	gzmq


32 
˛ass
 
	gio_thªad_t
;

38 ˛as†
	cio_obje˘_t
 : 
public
 
i_pﬁl_evíts


40 
public
:

42 
io_obje˘_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
 = 
NULL
);

43 ~
io_obje˘_t
 ();

47 
∂ug
 (
zmq
::
io_thªad_t
 *
io_thªad_
);

48 
u≈lug
 ();

50 
	g¥Ÿe˘ed
:

52 
pﬁÀr_t
::
	th™dÀ_t
 handle_t;

55 
h™dÀ_t
 
add_fd
 (
fd_t
 
fd_
);

56 
rm_fd
 (
h™dÀ_t
 
h™dÀ_
);

57 
£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

58 
ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

59 
£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

60 
ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

61 
add_timî
 (
timout_
, 
id_
);

62 
ˇn˚l_timî
 (
id_
);

65 
ö_evít
 ();

66 
out_evít
 ();

67 
timî_evít
 (
id_
);

69 
	g¥iv©e
:

71 
pﬁÀr_t
 *
pﬁÀr
;

73 
io_obje˘_t
 (const io_object_t&);

74 c⁄° 
	gio_obje˘_t
 &
	g›î©‹
 = (c⁄° 
io_obje˘_t
&);

	@io_thread.cpp

20 
	~<√w
>

22 
	~"io_thªad.hµ
"

23 
	~"∂©f‹m.hµ
"

24 
	~"îr.hµ
"

25 
	~"˘x.hµ
"

27 
	gzmq
::
io_thªad_t
::
	$io_thªad_t
 (
˘x_t
 *
˘x_
, 
uöt32_t
 
tid_
) :

28 
	$obje˘_t
 (
˘x_
, 
tid_
)

30 
pﬁÀr
 = 
	`√w
 (
°d
::
nŸhrow
Ë
pﬁÀr_t
;

31 
	`Æloc_as£π
 (
pﬁÀr
);

33 
maûbox_h™dÀ
 = 
pﬁÀr
->
	`add_fd
 (
maûbox
.
	`gë_fd
 (), 
this
);

34 
pﬁÀr
->
	`£t_pﬁlö
 (
maûbox_h™dÀ
);

35 
	}
}

37 
	gzmq
::
io_thªad_t
::~
	$io_thªad_t
 ()

39 
dñëe
 
pﬁÀr
;

40 
	}
}

42 
	gzmq
::
io_thªad_t
::
	$°¨t
 ()

45 
pﬁÀr
->
	`°¨t
 ();

46 
	}
}

48 
	gzmq
::
io_thªad_t
::
	$°›
 ()

50 
	`£nd_°›
 ();

51 
	}
}

53 
	gzmq
::
maûbox_t
 *
zmq
::
io_thªad_t
::
	$gë_maûbox
 ()

55  &
maûbox
;

56 
	}
}

58 
	gzmq
::
io_thªad_t
::
	$gë_lﬂd
 ()

60  
pﬁÀr
->
	`gë_lﬂd
 ();

61 
	}
}

63 
	gzmq
::
io_thªad_t
::
	$ö_evít
 ()

68 
comm™d_t
 
cmd
;

69 
rc
 = 
maûbox
.
	`ªcv
 (&
cmd
, 0);

71 
rc
 =0 || 
î∫o
 =
EINTR
) {

72 i‡(
rc
 == 0)

73 
cmd
.
de°ö©i⁄
->
	`¥o˚ss_comm™d
 (cmd);

74 
rc
 = 
maûbox
.
	`ªcv
 (&
cmd
, 0);

77 
	`î∫o_as£π
 (
rc
 !0 && 
î∫o
 =
EAGAIN
);

78 
	}
}

80 
	gzmq
::
io_thªad_t
::
	$out_evít
 ()

83 
	`zmq_as£π
 (
Ál£
);

84 
	}
}

86 
	gzmq
::
io_thªad_t
::
	$timî_evít
 ()

89 
	`zmq_as£π
 (
Ál£
);

90 
	}
}

92 
	gzmq
::
pﬁÀr_t
 *
zmq
::
io_thªad_t
::
	$gë_pﬁÀr
 ()

94 
	`zmq_as£π
 (
pﬁÀr
);

95  
pﬁÀr
;

96 
	}
}

98 
	gzmq
::
io_thªad_t
::
	$¥o˚ss_°›
 ()

100 
pﬁÀr
->
	`rm_fd
 (
maûbox_h™dÀ
);

101 
pﬁÀr
->
	`°›
 ();

102 
	}
}

	@io_thread.hpp

20 #i‚de‡
__ZMQ_IO_THREAD_HPP_INCLUDED__


21 
	#__ZMQ_IO_THREAD_HPP_INCLUDED__


	)

23 
	~<ve˘‹
>

25 
	~"°döt.hµ
"

26 
	~"obje˘.hµ
"

27 
	~"pﬁÀr.hµ
"

28 
	~"i_pﬁl_evíts.hµ
"

29 
	~"maûbox.hµ
"

31 
«me•a˚
 
	gzmq


34 
˛ass
 
	g˘x_t
;

39 
˛ass
 
	gio_thªad_t
 : 
public
 
obje˘_t
,Öubli¯
	gi_pﬁl_evíts


41 
	gpublic
:

43 
io_thªad_t
 (
zmq
::
˘x_t
 *
˘x_
, 
uöt32_t
 
tid_
);

47 ~
io_thªad_t
 ();

50 
°¨t
 ();

53 
°›
 ();

56 
maûbox_t
 *
gë_maûbox
 ();

59 
ö_evít
 ();

60 
out_evít
 ();

61 
timî_evít
 (
id_
);

64 
pﬁÀr_t
 *
gë_pﬁÀr
 ();

67 
¥o˚ss_°›
 ();

70 
gë_lﬂd
 ();

72 
	g¥iv©e
:

75 
maûbox_t
 
maûbox
;

78 
	gpﬁÀr_t
::
h™dÀ_t
 
maûbox_h™dÀ
;

81 
pﬁÀr_t
 *
	gpﬁÀr
;

83 
io_thªad_t
 (const io_thread_t&);

84 c⁄° 
	gio_thªad_t
 &
	g›î©‹
 = (c⁄° 
io_thªad_t
&);

	@ip.cpp

20 
	~"ù.hµ
"

21 
	~"îr.hµ
"

22 
	~"∂©f‹m.hµ
"

24 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


25 
	~"wödows.hµ
"

27 
	~<f˙é.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/sockë.h
>

30 
	~<√tdb.h
>

31 
	~<√töë/ö.h
>

32 
	~<√töë/t˝.h
>

35 #i‡
deföed
 
ZMQ_HAVE_OPENVMS


36 
	~<io˘l.h
>

39 
	gzmq
::
fd_t
 
zmq
::
	$›í_sockë
 (
domaö_
, 
ty≥_
, 
¥Ÿocﬁ_
)

43 #i‡
deföed
 
ZMQ_HAVE_SOCK_CLOEXEC


44 
ty≥_
 |
SOCK_CLOEXEC
;

47 
fd_t
 
s
 = 
	`sockë
 (
domaö_
, 
ty≥_
, 
¥Ÿocﬁ_
);

48 #ifde‡
ZMQ_HAVE_WINDOWS


49 i‡(
s
 =
INVALID_SOCKET
)

50  
INVALID_SOCKET
;

52 i‡(
s
 == -1)

59 #i‡!
deföed
 
ZMQ_HAVE_SOCK_CLOEXEC
 && deföed 
FD_CLOEXEC


60 
rc
 = 
	`f˙é
 (
s
, 
F_SETFD
, 
FD_CLOEXEC
);

61 
	`î∫o_as£π
 (
rc
 != -1);

65 #i‡
deföed
 
ZMQ_HAVE_WINDOWS
 && deföed 
HANDLE_FLAG_INHERIT


66 
BOOL
 
brc
 = 
	`SëH™dÀInf‹m©i⁄
 ((
HANDLE
Ë
s
, 
HANDLE_FLAG_INHERIT
, 0);

67 
	`wö_as£π
 (
brc
);

70  
s
;

71 
	}
}

73 
	gzmq
::
	$unblock_sockë
 (
fd_t
 
s_
)

75 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


76 
u_l⁄g
 
n⁄block
 = 1;

77 
rc
 = 
	`io˘lsockë
 (
s_
, 
FIONBIO
, &
n⁄block
);

78 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

79 #ñi‡
deföed
 
ZMQ_HAVE_OPENVMS


80 
n⁄block
 = 1;

81 
rc
 = 
	`io˘l
 (
s_
, 
FIONBIO
, &
n⁄block
);

82 
	`î∫o_as£π
 (
rc
 != -1);

84 
Êags
 = 
	`f˙é
 (
s_
, 
F_GETFL
, 0);

85 i‡(
Êags
 == -1)

86 
Êags
 = 0;

87 
rc
 = 
	`f˙é
 (
s_
, 
F_SETFL
, 
Êags
 | 
O_NONBLOCK
);

88 
	`î∫o_as£π
 (
rc
 != -1);

90 
	}
}

92 
	gzmq
::
	$íabÀ_ùv4_m≠pög
 (
fd_t
 
s_
)

94 (Ë
s_
;

96 #ifde‡
IPV6_V6ONLY


97 #ifde‡
ZMQ_HAVE_WINDOWS


98 
DWORD
 
Êag
 = 0;

100 
Êag
 = 0;

102 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
, (c⁄° *Ë&
Êag
,

103  (
Êag
));

104 #ifde‡
ZMQ_HAVE_WINDOWS


105 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

107 
	`î∫o_as£π
 (
rc
 == 0);

110 
	}
}

112 
boﬁ
 
	gzmq
::
	$gë_≥î_ù_addªss
 (
fd_t
 
sockfd_
, 
°d
::
°rög
 &
ù_addr_
)

114 
rc
;

115 
sockaddr_°‹age
 
ss
;

117 #i‡
deföed
 
ZMQ_HAVE_HPUX
 || deföed 
ZMQ_HAVE_WINDOWS


118 
addæí
 = 
°©ic_ˇ°
 <> ( 
ss
);

120 
sockÀn_t
 
addæí
 =  
ss
;

122 
rc
 = 
	`gë≥î«me
 (
sockfd_
, (
sockaddr
*Ë&
ss
, &
addæí
);

123 #ifde‡
ZMQ_HAVE_WINDOWS


124 i‡(
rc
 =
SOCKET_ERROR
) {

125 
	`wß_as£π
 (
	`WSAGëLa°Eº‹
 (Ë!
WSANOTINITIALISED
 &&

126 
	`WSAGëLa°Eº‹
 (Ë!
WSAEFAULT
 &&

127 
	`WSAGëLa°Eº‹
 (Ë!
WSAEINPROGRESS
 &&

128 
	`WSAGëLa°Eº‹
 (Ë!
WSAENOTSOCK
);

129  
Ál£
;

132 i‡(
rc
 == -1) {

133 
	`î∫o_as£π
 (
î∫o
 !
EBADF
 &&

134 
î∫o
 !
EFAULT
 &&

135 
î∫o
 !
EINVAL
 &&

136 
î∫o
 !
ENOTSOCK
);

137  
Ál£
;

141 
ho°
 [
NI_MAXHOST
];

142 
rc
 = 
	`gë«meöfo
 ((
sockaddr
*Ë&
ss
, 
addæí
, 
ho°
,  host,

143 
NULL
, 0, 
NI_NUMERICHOST
);

144 i‡(
rc
 != 0)

145  
Ál£
;

147 
ù_addr_
 = 
ho°
;

148  
åue
;

149 
	}
}

	@ip.hpp

20 #i‚de‡
__ZMQ_IP_HPP_INCLUDED__


21 
	#__ZMQ_IP_HPP_INCLUDED__


	)

23 
	~<°rög
>

24 
	~"fd.hµ
"

26 
«me•a˚
 
	gzmq


30 
fd_t
 
›í_sockë
 (
domaö_
, 
ty≥_
, 
¥Ÿocﬁ_
);

33 
unblock_sockë
 (
fd_t
 
s_
);

36 
íabÀ_ùv4_m≠pög
 (
fd_t
 
s_
);

40 
boﬁ
 
gë_≥î_ù_addªss
 (
fd_t
 
sockfd_
, 
°d
::
°rög
 &
ù_addr_
);

	@ipc_address.cpp

20 
	~"ùc_addªss.hµ
"

22 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


24 
	~"îr.hµ
"

26 
	~<°rög
>

27 
	~<s°ªam
>

29 
	gzmq
::
ùc_addªss_t
::
	$ùc_addªss_t
 ()

31 
	`mem£t
 (&
addªss
, 0,  (address));

32 
	}
}

34 
	gzmq
::
ùc_addªss_t
::
	$ùc_addªss_t
 (c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ß_Àn
)

36 
	`zmq_as£π
(
ß
 && 
ß_Àn
 > 0);

38 
	`mem£t
 (&
addªss
, 0,  (address));

39 i‡(
ß
->
ß_Ámûy
 =
AF_UNIX
) {

40 
	`mem˝y
(&
addªss
, 
ß
, 
ß_Àn
);

42 
	}
}

44 
	gzmq
::
ùc_addªss_t
::~
	$ùc_addªss_t
 ()

46 
	}
}

48 
zmq
::
ùc_addªss_t
::
	$ªsﬁve
 (c⁄° *
∑th_
)

50 i‡(
	`°æí
 (
∑th_
Ë> (
addªss
.
sun_∑th
)) {

51 
î∫o
 = 
ENAMETOOLONG
;

54 #i‡
deföed
 
ZMQ_HAVE_LINUX


55 i‡(
∑th_
[0] == '@' && !path_[1]) {

56 
î∫o
 = 
EINVAL
;

61 
addªss
.
sun_Ámûy
 = 
AF_UNIX
;

62 
	`°r˝y
 (
addªss
.
sun_∑th
, 
∑th_
);

63 #i‡
deföed
 
ZMQ_HAVE_LINUX


65 i‡(
∑th_
[0] == '@')

66 *
addªss
.
sun_∑th
 = '\0';

69 
	}
}

71 
	gzmq
::
ùc_addªss_t
::
	$to_°rög
 (
°d
::
°rög
 &
addr_
)

73 i‡(
addªss
.
sun_Ámûy
 !
AF_UNIX
) {

74 
addr_
.
	`˛ór
 ();

78 
°d
::
°rög°ªam
 
s
;

79 #i‡!
deföed
 
ZMQ_HAVE_LINUX


80 
s
 << "ùc://" << 
addªss
.
sun_∑th
;

82 
s
 << "ipc://";

83 i‡(!
addªss
.
sun_∑th
[0] &&áddress.sun_path[1])

84 
s
 << "@" << 
addªss
.
sun_∑th
 + 1;

86 
s
 << 
addªss
.
sun_∑th
;

88 
addr_
 = 
s
.
	`°r
 ();

90 
	}
}

92 c⁄° 
sockaddr
 *
	gzmq
::
ùc_addªss_t
::
	$addr
 () const

94  (
sockaddr
*Ë&
addªss
;

95 
	}
}

97 
sockÀn_t
 
	gzmq
::
ùc_addªss_t
::
	$addæí
 () const

99 #i‡
deföed
 
ZMQ_HAVE_LINUX


100 i‡(!
addªss
.
sun_∑th
[0] &&áddress.sun_path[1])

101  (
sockÀn_t
Ë
	`°æí
(
addªss
.
sun_∑th
 + 1Ë+  (
ß_Ámûy_t
) + 1;

103  (
sockÀn_t
Ë (
addªss
);

104 
	}
}

	@ipc_address.hpp

20 #i‚de‡
__ZMQ_IPC_ADDRESS_HPP_INCLUDED__


21 
	#__ZMQ_IPC_ADDRESS_HPP_INCLUDED__


	)

23 
	~<°rög
>

25 
	~"∂©f‹m.hµ
"

27 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


29 
	~<sys/sockë.h
>

30 
	~<sys/un.h
>

32 
«me•a˚
 
	gzmq


35 ˛as†
	cùc_addªss_t


37 
	gpublic
:

39 
ùc_addªss_t
 ();

40 
ùc_addªss_t
 (c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ß_Àn
);

41 ~
ùc_addªss_t
 ();

44 
ªsﬁve
 (c⁄° * 
∑th_
);

47 
to_°rög
 (
°d
::
°rög
 &
addr_
);

49 c⁄° 
sockaddr
 *
addr
 () const;

50 
sockÀn_t
 
addæí
 () const;

52 
	g¥iv©e
:

54 
sockaddr_un
 
addªss
;

56 
ùc_addªss_t
 (const ipc_address_t&);

57 c⁄° 
	gùc_addªss_t
 &
	g›î©‹
 = (c⁄° 
ùc_addªss_t
&);

	@ipc_connecter.cpp

20 
	~"ùc_c⁄√˘î.hµ
"

22 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


24 
	~<√w
>

25 
	~<°rög
>

27 
	~"°ªam_ígöe.hµ
"

28 
	~"io_thªad.hµ
"

29 
	~"∂©f‹m.hµ
"

30 
	~"øndom.hµ
"

31 
	~"îr.hµ
"

32 
	~"ù.hµ
"

33 
	~"addªss.hµ
"

34 
	~"ùc_addªss.hµ
"

35 
	~"£ssi⁄_ba£.hµ
"

37 
	~<uni°d.h
>

38 
	~<sys/ty≥s.h
>

39 
	~<sys/sockë.h
>

40 
	~<sys/un.h
>

42 
	gzmq
::
ùc_c⁄√˘î_t
::
	$ùc_c⁄√˘î_t
 (
˛ass
 
io_thªad_t
 *
io_thªad_
,

43 
˛ass
 
£ssi⁄_ba£_t
 *
£ssi⁄_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

44 c⁄° 
addªss_t
 *
addr_
, 
boﬁ
 
dñayed_°¨t_
) :

45 
	`own_t
 (
io_thªad_
, 
›ti⁄s_
),

46 
	`io_obje˘_t
 (
io_thªad_
),

47 
	`addr
 (
addr_
),

48 
	`s
 (
ªtúed_fd
),

49 
	`h™dÀ_vÆid
 (
Ál£
),

50 
	`dñayed_°¨t
 (
dñayed_°¨t_
),

51 
	`timî_°¨ãd
 (
Ál£
),

52 
	`£ssi⁄
 (
£ssi⁄_
),

53 
	$cuºít_ªc⁄√˘_ivl
(
›ti⁄s
.
ªc⁄√˘_ivl
)

55 
	`zmq_as£π
 (
addr
);

56 
	`zmq_as£π
 (
addr
->
¥Ÿocﬁ
 == "ipc");

57 
addr
->
	`to_°rög
 (
ídpoöt
);

58 
sockë
 = 
£ssi⁄
-> 
	`gë_sockë
();

59 
	}
}

61 
	gzmq
::
ùc_c⁄√˘î_t
::~
	$ùc_c⁄√˘î_t
 ()

63 
	`zmq_as£π
 (!
timî_°¨ãd
);

64 
	`zmq_as£π
 (!
h™dÀ_vÆid
);

65 
	`zmq_as£π
 (
s
 =
ªtúed_fd
);

66 
	}
}

68 
	gzmq
::
ùc_c⁄√˘î_t
::
	$¥o˚ss_∂ug
 ()

70 i‡(
dñayed_°¨t
)

71 
	`add_ªc⁄√˘_timî
 ();

73 
	`°¨t_c⁄√˘ög
 ();

74 
	}
}

76 
	gzmq
::
ùc_c⁄√˘î_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

78 i‡(
timî_°¨ãd
) {

79 
	`ˇn˚l_timî
 (
ªc⁄√˘_timî_id
);

80 
timî_°¨ãd
 = 
Ál£
;

83 i‡(
h™dÀ_vÆid
) {

84 
	`rm_fd
 (
h™dÀ
);

85 
h™dÀ_vÆid
 = 
Ál£
;

88 i‡(
s
 !
ªtúed_fd
)

89 
	`˛o£
 ();

91 
own_t
::
	`¥o˚ss_ãrm
 (
lögî_
);

92 
	}
}

94 
	gzmq
::
ùc_c⁄√˘î_t
::
	$ö_evít
 ()

99 
	`out_evít
 ();

100 
	}
}

102 
	gzmq
::
ùc_c⁄√˘î_t
::
	$out_evít
 ()

104 
fd_t
 
fd
 = 
	`c⁄√˘
 ();

105 
	`rm_fd
 (
h™dÀ
);

106 
h™dÀ_vÆid
 = 
Ál£
;

109 i‡(
fd
 =
ªtúed_fd
) {

110 
	`˛o£
 ();

111 
	`add_ªc⁄√˘_timî
();

115 
°ªam_ígöe_t
 *
ígöe
 = 
	`√w
 (
°d
::
nŸhrow
)

116 
	`°ªam_ígöe_t
 (
fd
, 
›ti⁄s
, 
ídpoöt
);

117 
	`Æloc_as£π
 (
ígöe
);

120 
	`£nd_©èch
 (
£ssi⁄
, 
ígöe
);

123 
	`ãrmö©e
 ();

125 
sockë
->
	`evít_c⁄√˘ed
 (
ídpoöt
, 
fd
);

126 
	}
}

128 
	gzmq
::
ùc_c⁄√˘î_t
::
	$timî_evít
 (
id_
)

130 
	`zmq_as£π
 (
id_
 =
ªc⁄√˘_timî_id
);

131 
timî_°¨ãd
 = 
Ál£
;

132 
	`°¨t_c⁄√˘ög
 ();

133 
	}
}

135 
	gzmq
::
ùc_c⁄√˘î_t
::
	$°¨t_c⁄√˘ög
 ()

138 
rc
 = 
	`›í
 ();

141 i‡(
rc
 == 0) {

142 
h™dÀ
 = 
	`add_fd
 (
s
);

143 
h™dÀ_vÆid
 = 
åue
;

144 
	`out_evít
 ();

149 i‡(
rc
 =-1 && 
î∫o
 =
EINPROGRESS
) {

150 
h™dÀ
 = 
	`add_fd
 (
s
);

151 
h™dÀ_vÆid
 = 
åue
;

152 
	`£t_pﬁlout
 (
h™dÀ
);

153 
sockë
->
	`evít_c⁄√˘_dñayed
 (
ídpoöt
, 
	`zmq_î∫o
());

158 i‡(
s
 !
ªtúed_fd
)

159 
	`˛o£
 ();

160 
	`add_ªc⁄√˘_timî
 ();

162 
	}
}

164 
	gzmq
::
ùc_c⁄√˘î_t
::
	$add_ªc⁄√˘_timî
()

166 
rc_ivl
 = 
	`gë_√w_ªc⁄√˘_ivl
();

167 
	`add_timî
 (
rc_ivl
, 
ªc⁄√˘_timî_id
);

168 
sockë
->
	`evít_c⁄√˘_ªåõd
 (
ídpoöt
, 
rc_ivl
);

169 
timî_°¨ãd
 = 
åue
;

170 
	}
}

172 
	gzmq
::
ùc_c⁄√˘î_t
::
	$gë_√w_ªc⁄√˘_ivl
 ()

175 
this_öãrvÆ
 = 
cuºít_ªc⁄√˘_ivl
 +

176 (
	`gíî©e_øndom
 (Ë% 
›ti⁄s
.
ªc⁄√˘_ivl
);

180 i‡(
›ti⁄s
.
ªc⁄√˘_ivl_max
 > 0 &&

181 
›ti⁄s
.
ªc⁄√˘_ivl_max
 > o±i⁄s.
ªc⁄√˘_ivl
) {

184 
cuºít_ªc⁄√˘_ivl
 = current_reconnect_ivl * 2;

185 if(
cuºít_ªc⁄√˘_ivl
 >
›ti⁄s
.
ªc⁄√˘_ivl_max
) {

186 
cuºít_ªc⁄√˘_ivl
 = 
›ti⁄s
.
ªc⁄√˘_ivl_max
;

189  
this_öãrvÆ
;

190 
	}
}

192 
	gzmq
::
ùc_c⁄√˘î_t
::
	$›í
 ()

194 
	`zmq_as£π
 (
s
 =
ªtúed_fd
);

197 
s
 = 
	`›í_sockë
 (
AF_UNIX
, 
SOCK_STREAM
, 0);

198 i‡(
s
 == -1)

202 
	`unblock_sockë
 (
s
);

205 
rc
 = ::
	`c⁄√˘
 (

206 
s
, 
addr
->
ªsﬁved
.
ùc_addr
->
	`addr
 (),

207 
addr
->
ªsﬁved
.
ùc_addr
->
	`addæí
 ());

210 i‡(
rc
 == 0)

215 i‡(
rc
 =-1 && 
î∫o
 =
EINTR
) {

216 
î∫o
 = 
EINPROGRESS
;

222 
	}
}

224 
	gzmq
::
ùc_c⁄√˘î_t
::
	$˛o£
 ()

226 
	`zmq_as£π
 (
s
 !
ªtúed_fd
);

227 
rc
 = ::
	`˛o£
 (
s
);

228 
	`î∫o_as£π
 (
rc
 == 0);

229 
sockë
->
	`evít_˛o£d
 (
ídpoöt
, 
s
);

230 
s
 = 
ªtúed_fd
;

232 
	}
}

234 
	gzmq
::
fd_t
 
zmq
::
ùc_c⁄√˘î_t
::
	$c⁄√˘
 ()

238 
îr
 = 0;

239 #i‡
deföed
 
ZMQ_HAVE_HPUX


240 
Àn
 =  (
îr
);

242 
sockÀn_t
 
Àn
 =  (
îr
);

244 
rc
 = 
	`gësock›t
 (
s
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
);

245 i‡(
rc
 == -1)

246 
îr
 = 
î∫o
;

247 i‡(
îr
 != 0) {

251 
î∫o
 = 
îr
;

252 
	`î∫o_as£π
 (
î∫o
 =
ECONNREFUSED
 ||Éºnÿ=
ECONNRESET
 ||

253 
î∫o
 =
ETIMEDOUT
 ||Éºnÿ=
EHOSTUNREACH
 ||

254 
î∫o
 =
ENETUNREACH
 ||Éºnÿ=
ENETDOWN
);

256  
ªtúed_fd
;

259 
fd_t
 
ªsu…
 = 
s
;

260 
s
 = 
ªtúed_fd
;

261  
ªsu…
;

262 
	}
}

	@ipc_connecter.hpp

20 #i‚de‡
__IPC_CONNECTER_HPP_INCLUDED__


21 
	#__IPC_CONNECTER_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


27 
	~"fd.hµ
"

28 
	~"own.hµ
"

29 
	~"°döt.hµ
"

30 
	~"io_obje˘.hµ
"

32 
«me•a˚
 
	gzmq


35 
˛ass
 
	gio_thªad_t
;

36 
˛ass
 
	g£ssi⁄_ba£_t
;

37 
	gaddªss_t
;

39 
˛ass
 
	gùc_c⁄√˘î_t
 : 
public
 
own_t
,Öubli¯
	gio_obje˘_t


41 
	gpublic
:

45 
ùc_c⁄√˘î_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

46 
zmq
::
£ssi⁄_ba£_t
 *
£ssi⁄_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

47 c⁄° 
addªss_t
 *
addr_
, 
boﬁ
 
dñayed_°¨t_
);

48 ~
ùc_c⁄√˘î_t
 ();

50 
	g¥iv©e
:

53 íum {
ªc⁄√˘_timî_id
 = 1};

56 
¥o˚ss_∂ug
 ();

57 
¥o˚ss_ãrm
 (
lögî_
);

60 
ö_evít
 ();

61 
out_evít
 ();

62 
timî_evít
 (
id_
);

65 
°¨t_c⁄√˘ög
 ();

68 
add_ªc⁄√˘_timî
();

73 
gë_√w_ªc⁄√˘_ivl
 ();

78 
›í
 ();

81 
˛o£
 ();

85 
fd_t
 
c⁄√˘
 ();

88 c⁄° 
addªss_t
 *
	gaddr
;

91 
fd_t
 
	gs
;

94 
h™dÀ_t
 
	gh™dÀ
;

98 
boﬁ
 
	gh™dÀ_vÆid
;

101 c⁄° 
boﬁ
 
	gdñayed_°¨t
;

104 
boﬁ
 
	gtimî_°¨ãd
;

107 
	gzmq
::
£ssi⁄_ba£_t
 *
£ssi⁄
;

110 
	gcuºít_ªc⁄√˘_ivl
;

113 
	g°d
::
°rög
 
ídpoöt
;

116 
	gzmq
::
sockë_ba£_t
 *
sockë
;

118 
ùc_c⁄√˘î_t
 (const ipc_connecter_t&);

119 c⁄° 
	gùc_c⁄√˘î_t
 &
	g›î©‹
 = (c⁄° 
ùc_c⁄√˘î_t
&);

	@ipc_listener.cpp

20 
	~"ùc_li°íî.hµ
"

22 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


24 
	~<√w
>

26 
	~<°rög.h
>

28 
	~"°ªam_ígöe.hµ
"

29 
	~"ùc_addªss.hµ
"

30 
	~"io_thªad.hµ
"

31 
	~"£ssi⁄_ba£.hµ
"

32 
	~"c⁄fig.hµ
"

33 
	~"îr.hµ
"

34 
	~"ù.hµ
"

35 
	~"sockë_ba£.hµ
"

37 
	~<uni°d.h
>

38 
	~<sys/sockë.h
>

39 
	~<f˙é.h
>

40 
	~<sys/un.h
>

42 
	gzmq
::
ùc_li°íî_t
::
	$ùc_li°íî_t
 (
io_thªad_t
 *
io_thªad_
,

43 
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

44 
	`own_t
 (
io_thªad_
, 
›ti⁄s_
),

45 
	`io_obje˘_t
 (
io_thªad_
),

46 
	`has_fûe
 (
Ál£
),

47 
	`s
 (
ªtúed_fd
),

48 
	$sockë
 (
sockë_
)

50 
	}
}

52 
	gzmq
::
ùc_li°íî_t
::~
	$ùc_li°íî_t
 ()

54 
	`zmq_as£π
 (
s
 =
ªtúed_fd
);

55 
	}
}

57 
	gzmq
::
ùc_li°íî_t
::
	$¥o˚ss_∂ug
 ()

60 
h™dÀ
 = 
	`add_fd
 (
s
);

61 
	`£t_pﬁlö
 (
h™dÀ
);

62 
	}
}

64 
	gzmq
::
ùc_li°íî_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

66 
	`rm_fd
 (
h™dÀ
);

67 
	`˛o£
 ();

68 
own_t
::
	`¥o˚ss_ãrm
 (
lögî_
);

69 
	}
}

71 
	gzmq
::
ùc_li°íî_t
::
	$ö_evít
 ()

73 
fd_t
 
fd
 = 
	`ac˚±
 ();

77 i‡(
fd
 =
ªtúed_fd
) {

78 
sockë
->
	`evít_ac˚±_Áûed
 (
ídpoöt
, 
	`zmq_î∫o
());

83 
°ªam_ígöe_t
 *
ígöe
 = 
	`√w
 (
°d
::
nŸhrow
)

84 
	`°ªam_ígöe_t
 (
fd
, 
›ti⁄s
, 
ídpoöt
);

85 
	`Æloc_as£π
 (
ígöe
);

89 
io_thªad_t
 *
io_thªad
 = 
	`choo£_io_thªad
 (
›ti⁄s
.
afföôy
);

90 
	`zmq_as£π
 (
io_thªad
);

93 
£ssi⁄_ba£_t
 *
£ssi⁄
 = sessi⁄_ba£_t::
	`¸óã
 (
io_thªad
, 
Ál£
, 
sockë
,

94 
›ti⁄s
, 
NULL
);

95 
	`î∫o_as£π
 (
£ssi⁄
);

96 
£ssi⁄
->
	`öc_£qnum
 ();

97 
	`œunch_chûd
 (
£ssi⁄
);

98 
	`£nd_©èch
 (
£ssi⁄
, 
ígöe
, 
Ál£
);

99 
sockë
->
	`evít_ac˚±ed
 (
ídpoöt
, 
fd
);

100 
	}
}

102 
	gzmq
::
ùc_li°íî_t
::
	$gë_addªss
 (
°d
::
°rög
 &
addr_
)

104 
sockaddr_°‹age
 
ss
;

105 #ifde‡
ZMQ_HAVE_HPUX


106 
¶
 =  (
ss
);

108 
sockÀn_t
 
¶
 =  (
ss
);

110 
rc
 = 
	`gësock«me
 (
s
, (
sockaddr
 *Ë&
ss
, &
¶
);

111 i‡(
rc
 != 0) {

112 
addr_
.
	`˛ór
 ();

113  
rc
;

116 
ùc_addªss_t
 
	`addr
 ((
sockaddr
 *Ë&
ss
, 
¶
);

117  
addr
.
	`to_°rög
 (
addr_
);

118 
	}
}

120 
	gzmq
::
ùc_li°íî_t
::
	$£t_addªss
 (c⁄° *
addr_
)

123 
°d
::
°rög
 
	`addr
 (
addr_
);

126 i‡(
addr
[0] == '*') {

127 *
tmp°r
 = 
	`ãm≤am
 (
NULL
, NULL);

128 
addr
.
	`assign
 (
tmp°r
);

129 
	`‰ì
 (
tmp°r
);

134 ::
	`u∆ök
 (
addr
.
	`c_°r
());

135 
fûíame
.
	`˛ór
 ();

138 
ùc_addªss_t
 
addªss
;

139 
rc
 = 
addªss
.
	`ªsﬁve
 (
addr
.
	`c_°r
());

140 i‡(
rc
 != 0)

144 
s
 = 
	`›í_sockë
 (
AF_UNIX
, 
SOCK_STREAM
, 0);

145 i‡(
s
 == -1)

148 
addªss
.
	`to_°rög
 (
ídpoöt
);

151 
rc
 = 
	`böd
 (
s
, 
addªss
.
	`addr
 (),áddªss.
	`addæí
 ());

152 i‡(
rc
 != 0)

153 
îr‹
;

155 
fûíame
.
	`assign
 (
addr
.
	`c_°r
());

156 
has_fûe
 = 
åue
;

159 
rc
 = 
	`li°í
 (
s
, 
›ti⁄s
.
backlog
);

160 i‡(
rc
 != 0)

161 
îr‹
;

163 
sockë
->
	`evít_li°íög
 (
ídpoöt
, 
s
);

166 
îr‹
:

167 
îr
 = 
î∫o
;

168 
	`˛o£
 ();

169 
î∫o
 = 
îr
;

171 
	}
}

173 
	gzmq
::
ùc_li°íî_t
::
	$˛o£
 ()

175 
	`zmq_as£π
 (
s
 !
ªtúed_fd
);

176 
rc
 = ::
	`˛o£
 (
s
);

177 
	`î∫o_as£π
 (
rc
 == 0);

179 
s
 = 
ªtúed_fd
;

183 i‡(
has_fûe
 && !
fûíame
.
	`em±y
 ()) {

184 
rc
 = ::
	`u∆ök
(
fûíame
.
	`c_°r
 ());

185 i‡(
rc
 != 0) {

186 
sockë
->
	`evít_˛o£_Áûed
 (
ídpoöt
, 
	`zmq_î∫o
());

191 
sockë
->
	`evít_˛o£d
 (
ídpoöt
, 
s
);

193 
	}
}

195 
	gzmq
::
fd_t
 
zmq
::
ùc_li°íî_t
::
	$ac˚±
 ()

200 
	`zmq_as£π
 (
s
 !
ªtúed_fd
);

201 
fd_t
 
sock
 = ::
	`ac˚±
 (
s
, 
NULL
, NULL);

202 i‡(
sock
 == -1) {

203 
	`î∫o_as£π
 (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||

204 
î∫o
 =
EINTR
 ||Éºnÿ=
ECONNABORTED
 ||Éºnÿ=
EPROTO
 ||

205 
î∫o
 =
ENFILE
);

206  
ªtúed_fd
;

208  
sock
;

209 
	}
}

	@ipc_listener.hpp

20 #i‚de‡
__ZMQ_IPC_LISTENER_HPP_INCLUDED__


21 
	#__ZMQ_IPC_LISTENER_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


27 
	~<°rög
>

29 
	~"fd.hµ
"

30 
	~"own.hµ
"

31 
	~"°döt.hµ
"

32 
	~"io_obje˘.hµ
"

34 
«me•a˚
 
	gzmq


37 
˛ass
 
	gio_thªad_t
;

38 
˛ass
 
	gsockë_ba£_t
;

40 
˛ass
 
	gùc_li°íî_t
 : 
public
 
own_t
,Öubli¯
	gio_obje˘_t


42 
	gpublic
:

44 
ùc_li°íî_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

45 
zmq
::
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

46 ~
ùc_li°íî_t
 ();

49 
£t_addªss
 (c⁄° *
addr_
);

52 
gë_addªss
 (
°d
::
°rög
 &
addr_
);

54 
	g¥iv©e
:

57 
¥o˚ss_∂ug
 ();

58 
¥o˚ss_ãrm
 (
lögî_
);

61 
ö_evít
 ();

64 
˛o£
 ();

69 
fd_t
 
ac˚±
 ();

72 
boﬁ
 
	ghas_fûe
;

75 
	g°d
::
°rög
 
fûíame
;

78 
fd_t
 
	gs
;

81 
h™dÀ_t
 
	gh™dÀ
;

84 
	gzmq
::
sockë_ba£_t
 *
sockë
;

87 
	g°d
::
°rög
 
ídpoöt
;

89 
ùc_li°íî_t
 (const ipc_listener_t&);

90 c⁄° 
	gùc_li°íî_t
 &
	g›î©‹
 = (c⁄° 
ùc_li°íî_t
&);

	@kqueue.cpp

20 
	~"kqueue.hµ
"

21 #i‡
deföed
 
ZMQ_USE_KQUEUE


23 
	~<sys/time.h
>

24 
	~<sys/ty≥s.h
>

25 
	~<sys/evít.h
>

26 
	~<°dlib.h
>

27 
	~<uni°d.h
>

28 
	~<Æg‹ôhm
>

29 
	~<√w
>

31 
	~"kqueue.hµ
"

32 
	~"îr.hµ
"

33 
	~"c⁄fig.hµ
"

34 
	~"i_pﬁl_evíts.hµ
"

35 
	~"likñy.hµ
"

39 #i‡
deföed
 
ZMQ_HAVE_NETBSD


40 
	#kevít_ud©a_t
 
öçå_t


	)

42 
	#kevít_ud©a_t
 *

	)

45 
	gzmq
::
kqueue_t
::
	$kqueue_t
 () :

46 
	$°›pög
 (
Ál£
)

49 
kqueue_fd
 = 
	`kqueue
 ();

50 
	`î∫o_as£π
 (
kqueue_fd
 != -1);

51 #ifde‡
HAVE_FORK


52 
pid
 = 
	`gëpid
();

54 
	}
}

56 
	gzmq
::
kqueue_t
::~
	$kqueue_t
 ()

58 
w‹kî
.
	`°›
 ();

59 
	`˛o£
 (
kqueue_fd
);

60 
	}
}

62 
	gzmq
::
kqueue_t
::
	$kevít_add
 (
fd_t
 
fd_
, 
fûãr_
, *
ud©a_
)

64 
kevít
 
ev
;

66 
	`EV_SET
 (&
ev
, 
fd_
, 
fûãr_
, 
EV_ADD
, 0, 0, (
kevít_ud©a_t
)
ud©a_
);

67 
rc
 = 
	`kevít
 (
kqueue_fd
, &
ev
, 1, 
NULL
, 0, NULL);

68 
	`î∫o_as£π
 (
rc
 != -1);

69 
	}
}

71 
	gzmq
::
kqueue_t
::
	$kevít_dñëe
 (
fd_t
 
fd_
, 
fûãr_
)

73 
kevít
 
ev
;

75 
	`EV_SET
 (&
ev
, 
fd_
, 
fûãr_
, 
EV_DELETE
, 0, 0, 0);

76 
rc
 = 
	`kevít
 (
kqueue_fd
, &
ev
, 1, 
NULL
, 0, NULL);

77 
	`î∫o_as£π
 (
rc
 != -1);

78 
	}
}

80 
	gzmq
::
kqueue_t
::
h™dÀ_t
 
zmq
::kqueue_t::
	$add_fd
 (
fd_t
 
fd_
,

81 
i_pﬁl_evíts
 *
ªa˘‹_
)

83 
pﬁl_íåy_t
 *
≥
 = 
	`√w
 (
°d
::
nŸhrow
)Öoll_entry_t;

84 
	`Æloc_as£π
 (
≥
);

86 
≥
->
fd
 = 
fd_
;

87 
≥
->
Êag_pﬁlö
 = 0;

88 
≥
->
Êag_pﬁlout
 = 0;

89 
≥
->
ªa˘‹
 = 
ªa˘‹_
;

91 
	`adju°_lﬂd
 (1);

93  
≥
;

94 
	}
}

96 
	gzmq
::
kqueue_t
::
	$rm_fd
 (
h™dÀ_t
 
h™dÀ_
)

98 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

99 i‡(
≥
->
Êag_pﬁlö
)

100 
	`kevít_dñëe
 (
≥
->
fd
, 
EVFILT_READ
);

101 i‡(
≥
->
Êag_pﬁlout
)

102 
	`kevít_dñëe
 (
≥
->
fd
, 
EVFILT_WRITE
);

103 
≥
->
fd
 = 
ªtúed_fd
;

104 
ªtúed
.
	`push_back
 (
≥
);

106 
	`adju°_lﬂd
 (-1);

107 
	}
}

109 
	gzmq
::
kqueue_t
::
	$£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

111 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

112 i‡(
	`likñy
 (!
≥
->
Êag_pﬁlö
)) {

113 
≥
->
Êag_pﬁlö
 = 
åue
;

114 
	`kevít_add
 (
≥
->
fd
, 
EVFILT_READ
,Öe);

116 
	}
}

118 
	gzmq
::
kqueue_t
::
	$ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

120 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

121 i‡(
	`likñy
 (
≥
->
Êag_pﬁlö
)) {

122 
≥
->
Êag_pﬁlö
 = 
Ál£
;

123 
	`kevít_dñëe
 (
≥
->
fd
, 
EVFILT_READ
);

125 
	}
}

127 
	gzmq
::
kqueue_t
::
	$£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

129 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

130 i‡(
	`likñy
 (!
≥
->
Êag_pﬁlout
)) {

131 
≥
->
Êag_pﬁlout
 = 
åue
;

132 
	`kevít_add
 (
≥
->
fd
, 
EVFILT_WRITE
,Öe);

134 
	}
}

136 
	gzmq
::
kqueue_t
::
	$ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

138 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
h™dÀ_
;

139 i‡(
	`likñy
 (
≥
->
Êag_pﬁlout
)) {

140 
≥
->
Êag_pﬁlout
 = 
Ál£
;

141 
	`kevít_dñëe
 (
≥
->
fd
, 
EVFILT_WRITE
);

143 
	}
}

145 
	gzmq
::
kqueue_t
::
	$°¨t
 ()

147 
w‹kî
.
	`°¨t
 (
w‹kî_routöe
, 
this
);

148 
	}
}

150 
	gzmq
::
kqueue_t
::
	$°›
 ()

152 
°›pög
 = 
åue
;

153 
	}
}

155 
	gzmq
::
kqueue_t
::
	$max_fds
 ()

158 
	}
}

160 
	gzmq
::
kqueue_t
::
	$lo›
 ()

162 !
°›pög
) {

165 
timeout
 = (Ë
	`execuã_timîs
 ();

168 
kevít
 
ev_buf
 [
max_io_evíts
];

169 
time•ec
 
ts
 = {
timeout
 / 1000, (timeout % 1000) * 1000000};

170 
n
 = 
	`kevít
 (
kqueue_fd
, 
NULL
, 0, &
ev_buf
 [0], 
max_io_evíts
,

171 
timeout
 ? &
ts
: 
NULL
);

172 #ifde‡
HAVE_FORK


173 i‡(
	`u∆ikñy
(
pid
 !
	`gëpid
())) {

179 i‡(
n
 == -1) {

180 
	`î∫o_as£π
 (
î∫o
 =
EINTR
);

184 
i
 = 0; i < 
n
; i ++) {

185 
pﬁl_íåy_t
 *
≥
 = (pﬁl_íåy_t*Ë
ev_buf
 [
i
].
ud©a
;

187 i‡(
≥
->
fd
 =
ªtúed_fd
)

189 i‡(
ev_buf
 [
i
].
Êags
 & 
EV_EOF
)

190 
≥
->
ªa˘‹
->
	`ö_evít
 ();

191 i‡(
≥
->
fd
 =
ªtúed_fd
)

193 i‡(
ev_buf
 [
i
].
fûãr
 =
EVFILT_WRITE
)

194 
≥
->
ªa˘‹
->
	`out_evít
 ();

195 i‡(
≥
->
fd
 =
ªtúed_fd
)

197 i‡(
ev_buf
 [
i
].
fûãr
 =
EVFILT_READ
)

198 
≥
->
ªa˘‹
->
	`ö_evít
 ();

202 
ªtúed_t
::
ôî©‹
 
ô
 = 
ªtúed
.
	`begö
 (); ià!ªtúed.
	`íd
 ();

203 ++
ô
)

204 
dñëe
 *
ô
;

205 
ªtúed
.
	`˛ór
 ();

207 
	}
}

209 
	gzmq
::
kqueue_t
::
	$w‹kî_routöe
 (*
¨g_
)

211 ((
kqueue_t
*Ë
¨g_
)->
	`lo›
 ();

212 
	}
}

	@kqueue.hpp

20 #i‚de‡
__ZMQ_KQUEUE_HPP_INCLUDED__


21 
	#__ZMQ_KQUEUE_HPP_INCLUDED__


	)

24 
	~"pﬁÀr.hµ
"

25 #i‡
deföed
 
ZMQ_USE_KQUEUE


27 
	~<ve˘‹
>

28 
	~<uni°d.h
>

30 
	~"fd.hµ
"

31 
	~"thªad.hµ
"

32 
	~"pﬁÀr_ba£.hµ
"

34 
«me•a˚
 
	gzmq


37 
	gi_pﬁl_evíts
;

42 ˛as†
	ckqueue_t
 : 
public
 
pﬁÀr_ba£_t


44 
public
:

46 * 
	th™dÀ_t
;

48 
kqueue_t
 ();

49 ~
kqueue_t
 ();

52 
h™dÀ_t
 
add_fd
 (
fd_t
 
fd_
, 
zmq
::
i_pﬁl_evíts
 *
evíts_
);

53 
rm_fd
 (
h™dÀ_t
 
h™dÀ_
);

54 
£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

55 
ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

56 
£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

57 
ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

58 
°¨t
 ();

59 
°›
 ();

61 
max_fds
 ();

63 
	g¥iv©e
:

66 
w‹kî_routöe
 (*
¨g_
);

69 
lo›
 ();

72 
fd_t
 
	gkqueue_fd
;

75 
kevít_add
 (
fd_t
 
fd_
, 
fûãr_
, *
ud©a_
);

78 
kevít_dñëe
 (
fd_t
 
fd_
, 
fûãr_
);

80 
	spﬁl_íåy_t


82 
fd_t
 
	gfd
;

83 
boﬁ
 
	gÊag_pﬁlö
;

84 
boﬁ
 
	gÊag_pﬁlout
;

85 
	gzmq
::
i_pﬁl_evíts
 *
ªa˘‹
;

89 
	g°d
::
	tve˘‹
 <
	tpﬁl_íåy_t
*> 
	tªtúed_t
;

90 
ªtúed_t
 
	gªtúed
;

93 
boﬁ
 
	g°›pög
;

96 
thªad_t
 
	gw‹kî
;

98 
kqueue_t
 (const kqueue_t&);

99 c⁄° 
	gkqueue_t
 &
	g›î©‹
 = (c⁄° 
kqueue_t
&);

101 #ifde‡
HAVE_FORK


103 
pid_t
 
	gpid
;

107 
kqueue_t
 
	tpﬁÀr_t
;

	@lb.cpp

20 
	~"lb.hµ
"

21 
	~"pùe.hµ
"

22 
	~"îr.hµ
"

23 
	~"msg.hµ
"

25 
	gzmq
::
lb_t
::
	$lb_t
 () :

26 
	`a˘ive
 (0),

27 
	`cuºít
 (0),

28 
	`m‹e
 (
Ál£
),

29 
	$dr›pög
 (
Ál£
)

31 
	}
}

33 
	gzmq
::
lb_t
::~
	$lb_t
 ()

35 
	`zmq_as£π
 (
pùes
.
	`em±y
 ());

36 
	}
}

38 
	gzmq
::
lb_t
::
	$©èch
 (
pùe_t
 *
pùe_
)

40 
pùes
.
	`push_back
 (
pùe_
);

41 
	`a˘iv©ed
 (
pùe_
);

42 
	}
}

44 
	gzmq
::
lb_t
::
	$pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

46 
pùes_t
::
size_ty≥
 
ödex
 = 
pùes
.
	`ödex
 (
pùe_
);

50 i‡(
ödex
 =
cuºít
 && 
m‹e
)

51 
dr›pög
 = 
åue
;

55 i‡(
ödex
 < 
a˘ive
) {

56 
a˘ive
--;

57 
pùes
.
	`sw≠
 (
ödex
, 
a˘ive
);

58 i‡(
cuºít
 =
a˘ive
)

59 
cuºít
 = 0;

61 
pùes
.
	`îa£
 (
pùe_
);

62 
	}
}

64 
	gzmq
::
lb_t
::
	$a˘iv©ed
 (
pùe_t
 *
pùe_
)

67 
pùes
.
	`sw≠
 (pùes.
	`ödex
 (
pùe_
), 
a˘ive
);

68 
a˘ive
++;

69 
	}
}

71 
	gzmq
::
lb_t
::
	$£nd
 (
msg_t
 *
msg_
)

73  
	`£ndpùe
 (
msg_
, 
NULL
);

74 
	}
}

76 
	gzmq
::
lb_t
::
	$£ndpùe
 (
msg_t
 *
msg_
, 
pùe_t
 **
pùe_
)

80 i‡(
dr›pög
) {

82 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹ê? 
åue
 : 
Ál£
;

83 
dr›pög
 = 
m‹e
;

85 
rc
 = 
msg_
->
	`˛o£
 ();

86 
	`î∫o_as£π
 (
rc
 == 0);

87 
rc
 = 
msg_
->
	`öô
 ();

88 
	`î∫o_as£π
 (
rc
 == 0);

92 
a˘ive
 > 0) {

93 i‡(
pùes
 [
cuºít
]->
	`wrôe
 (
msg_
))

95 i‡(
pùe_
)

96 *
pùe_
 = 
pùes
 [
cuºít
];

100 
	`zmq_as£π
 (!
m‹e
);

101 
a˘ive
--;

102 i‡(
cuºít
 < 
a˘ive
)

103 
pùes
.
	`sw≠
 (
cuºít
, 
a˘ive
);

105 
cuºít
 = 0;

109 i‡(
a˘ive
 == 0) {

110 
î∫o
 = 
EAGAIN
;

116 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹e? 
åue
: 
Ál£
;

117 i‡(!
m‹e
) {

118 
pùes
 [
cuºít
]->
	`Êush
 ();

119 
cuºít
 = (cuºíà+ 1Ë% 
a˘ive
;

123 
rc
 = 
msg_
->
	`öô
 ();

124 
	`î∫o_as£π
 (
rc
 == 0);

127 
	}
}

129 
boﬁ
 
	gzmq
::
lb_t
::
	$has_out
 ()

133 i‡(
m‹e
)

134  
åue
;

136 
a˘ive
 > 0) {

139 i‡(
pùes
 [
cuºít
]->
	`check_wrôe
 ())

140  
åue
;

143 
a˘ive
--;

144 
pùes
.
	`sw≠
 (
cuºít
, 
a˘ive
);

145 i‡(
cuºít
 =
a˘ive
)

146 
cuºít
 = 0;

149  
Ál£
;

150 
	}
}

	@lb.hpp

20 #i‚de‡
__ZMQ_LB_HPP_INCLUDED__


21 
	#__ZMQ_LB_HPP_INCLUDED__


	)

23 
	~"¨øy.hµ
"

24 
	~"pùe.hµ
"

26 
«me•a˚
 
	gzmq


32 ˛as†
	clb_t


34 
	gpublic
:

36 
lb_t
 ();

37 ~
lb_t
 ();

39 
©èch
 (
pùe_t
 *
pùe_
);

40 
a˘iv©ed
 (
pùe_t
 *
pùe_
);

41 
pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
);

43 
£nd
 (
msg_t
 *
msg_
);

49 
£ndpùe
 (
msg_t
 *
msg_
, 
pùe_t
 **
pùe_
);

51 
boﬁ
 
has_out
 ();

53 
	g¥iv©e
:

56 
¨øy_t
 <
	tpùe_t
, 2> 
	tpùes_t
;

57 
pùes_t
 
	gpùes
;

61 
	gpùes_t
::
size_ty≥
 
a˘ive
;

64 
	gpùes_t
::
size_ty≥
 
cuºít
;

67 
boﬁ
 
	gm‹e
;

70 
boﬁ
 
	gdr›pög
;

72 
lb_t
 (constÜb_t&);

73 c⁄° 
	glb_t
 &
	g›î©‹
 = (c⁄° 
lb_t
&);

	@likely.hpp

20 #i‚de‡
__ZMQ_LIKELY_HPP_INCLUDED__


21 
	#__ZMQ_LIKELY_HPP_INCLUDED__


	)

23 #i‡
deföed
 
__GNUC__


24 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
 ((x), 1)

	)

25 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
 ((x), 0)

	)

27 
	#likñy
(
x
Ë(x)

	)

28 
	#u∆ikñy
(
x
Ë(x)

	)

	@mailbox.cpp

20 
	~"maûbox.hµ
"

21 
	~"îr.hµ
"

23 
	gzmq
::
maûbox_t
::
	$maûbox_t
 ()

28 
boﬁ
 
ok
 = 
˝ùe
.
	`ªad
 (
NULL
);

29 
	`zmq_as£π
 (!
ok
);

30 
a˘ive
 = 
Ál£
;

31 
	}
}

33 
	gzmq
::
maûbox_t
::~
	$maûbox_t
 ()

39 
sync
.
	`lock
 ();

40 
sync
.
	`u∆ock
 ();

41 
	}
}

43 
	gzmq
::
fd_t
 
zmq
::
maûbox_t
::
	$gë_fd
 ()

45  
sig«Àr
.
	`gë_fd
 ();

46 
	}
}

48 
	gzmq
::
maûbox_t
::
	$£nd
 (c⁄° 
comm™d_t
 &
cmd_
)

50 
sync
.
	`lock
 ();

51 
˝ùe
.
	`wrôe
 (
cmd_
, 
Ál£
);

52 
boﬁ
 
ok
 = 
˝ùe
.
	`Êush
 ();

53 
sync
.
	`u∆ock
 ();

54 i‡(!
ok
)

55 
sig«Àr
.
	`£nd
 ();

56 
	}
}

58 
	gzmq
::
maûbox_t
::
	$ªcv
 (
comm™d_t
 *
cmd_
, 
timeout_
)

61 i‡(
a˘ive
) {

62 
boﬁ
 
ok
 = 
˝ùe
.
	`ªad
 (
cmd_
);

63 i‡(
ok
)

67 
a˘ive
 = 
Ál£
;

68 
sig«Àr
.
	`ªcv
 ();

72 
rc
 = 
sig«Àr
.
	`waô
 (
timeout_
);

73 i‡(
rc
 !0 && (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EINTR
))

77 
a˘ive
 = 
åue
;

80 
	`î∫o_as£π
 (
rc
 == 0);

81 
boﬁ
 
ok
 = 
˝ùe
.
	`ªad
 (
cmd_
);

82 
	`zmq_as£π
 (
ok
);

84 
	}
}

	@mailbox.hpp

20 #i‚de‡
__ZMQ_MAILBOX_HPP_INCLUDED__


21 
	#__ZMQ_MAILBOX_HPP_INCLUDED__


	)

23 
	~<°ddef.h
>

25 
	~"∂©f‹m.hµ
"

26 
	~"sig«Àr.hµ
"

27 
	~"fd.hµ
"

28 
	~"c⁄fig.hµ
"

29 
	~"comm™d.hµ
"

30 
	~"ypùe.hµ
"

31 
	~"muãx.hµ
"

33 
«me•a˚
 
	gzmq


36 ˛as†
	cmaûbox_t


38 
	gpublic
:

40 
maûbox_t
 ();

41 ~
maûbox_t
 ();

43 
fd_t
 
gë_fd
 ();

44 
£nd
 (c⁄° 
comm™d_t
 &
cmd_
);

45 
ªcv
 (
comm™d_t
 *
cmd_
, 
timeout_
);

47 #ifde‡
HAVE_FORK


51 
f‹ked
(Ë{ 
	gsig«Àr
.forked(); }

54 
	g¥iv©e
:

57 
ypùe_t
 <
	tcomm™d_t
, 
	tcomm™d_pùe_gønuœrôy
> 
	t˝ùe_t
;

58 
˝ùe_t
 
	g˝ùe
;

61 
sig«Àr_t
 
	gsig«Àr
;

67 
muãx_t
 
	gsync
;

71 
boﬁ
 
	ga˘ive
;

74 
maûbox_t
 (const mailbox_t&);

75 c⁄° 
	gmaûbox_t
 &
	g›î©‹
 = (c⁄° 
maûbox_t
&);

	@mechanism.cpp

20 
	~<°rög.h
>

22 
	~"mech™ism.hµ
"

23 
	~"›ti⁄s.hµ
"

24 
	~"msg.hµ
"

25 
	~"îr.hµ
"

26 
	~"wúe.hµ
"

28 
	gzmq
::
mech™ism_t
::
	$mech™ism_t
 (c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

29 
	$›ti⁄s
 (
›ti⁄s_
)

31 
	}
}

33 
zmq
::
mech™ism_t
::~
	$mech™ism_t
 ()

35 
	}
}

37 
zmq
::
mech™ism_t
::
	$£t_≥î_idítôy
 (c⁄° *
id_±r
, 
size_t
 
id_size
)

39 
idítôy
 = 
	`blob_t
 (
°©ic_ˇ°
 <c⁄° *> (
id_±r
), 
id_size
);

40 
	}
}

42 
	gzmq
::
mech™ism_t
::
	$≥î_idítôy
 (
msg_t
 *
msg_
)

44 c⁄° 
rc
 = 
msg_
->
	`öô_size
 (
idítôy
.
	`size
 ());

45 
	`î∫o_as£π
 (
rc
 == 0);

46 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
idítôy
.d©®(), idítôy.
	`size
 ());

47 
msg_
->
	`£t_Êags
 (
msg_t
::
idítôy
);

48 
	}
}

50 c⁄° *
	gzmq
::
mech™ism_t
::
	$sockë_ty≥_°rög
 (
sockë_ty≥
) const

52 c⁄° *
«mes
 [] = {"PAIR", "PUB", "SUB", "REQ", "REP",

55 
	`zmq_as£π
 (
sockë_ty≥
 >= 0 && socket_type <= 10);

56  
«mes
 [
sockë_ty≥
];

57 
	}
}

59 
size_t
 
	gzmq
::
mech™ism_t
::
	$add_¥›îty
 (*
±r
, c⁄° *
«me
,

60 c⁄° *
vÆue
, 
size_t
 
vÆue_Àn
) const

62 c⁄° 
size_t
 
«me_Àn
 = 
	`°æí
 (
«me
);

63 
	`zmq_as£π
 (
«me_Àn
 <= 255);

64 *
±r
++ = 
°©ic_ˇ°
 <> (
«me_Àn
);

65 
	`mem˝y
 (
±r
, 
«me
, 
«me_Àn
);

66 
±r
 +
«me_Àn
;

67 
	`zmq_as£π
 (
vÆue_Àn
 <= 0x7FFFFFFF);

68 
	`put_uöt32
 (
±r
, 
°©ic_ˇ°
 <
uöt32_t
> (
vÆue_Àn
));

69 
±r
 += 4;

70 
	`mem˝y
 (
±r
, 
vÆue
, 
vÆue_Àn
);

72  1 + 
«me_Àn
 + 4 + 
vÆue_Àn
;

73 
	}
}

75 
	gzmq
::
mech™ism_t
::
	$∑r£_mëad©a
 (c⁄° *
±r_
,

76 
size_t
 
Àngth_
)

78 
size_t
 
byãs_À·
 = 
Àngth_
;

80 
byãs_À·
 > 1) {

81 c⁄° 
size_t
 
«me_Àngth
 = 
°©ic_ˇ°
 <size_t> (*
±r_
);

82 
±r_
 += 1;

83 
byãs_À·
 -= 1;

84 i‡(
byãs_À·
 < 
«me_Àngth
)

87 c⁄° 
°d
::
°rög
 
«me
 = std::
	`°rög
 ((*Ë
±r_
, 
«me_Àngth
);

88 
±r_
 +
«me_Àngth
;

89 
byãs_À·
 -
«me_Àngth
;

90 i‡(
byãs_À·
 < 4)

93 c⁄° 
size_t
 
vÆue_Àngth
 = 
°©ic_ˇ°
 <size_t> (
	`gë_uöt32
 (
±r_
));

94 
±r_
 += 4;

95 
byãs_À·
 -= 4;

96 i‡(
byãs_À·
 < 
vÆue_Àngth
)

99 c⁄° 
uöt8_t
 *
vÆue
 = 
±r_
;

100 
±r_
 +
vÆue_Àngth
;

101 
byãs_À·
 -
vÆue_Àngth
;

103 i‡(
«me
 ="Idítôy" && 
›ti⁄s
.
ªcv_idítôy
)

104 
	`£t_≥î_idítôy
 (
vÆue
, 
vÆue_Àngth
);

106 i‡(
«me
 == "Socket-Type") {

107 c⁄° 
°d
::
°rög
 
	`sockë_ty≥
 ((*Ë
vÆue
, 
vÆue_Àngth
);

108 i‡(!
	`check_sockë_ty≥
 (
sockë_ty≥
)) {

109 
î∫o
 = 
EINVAL
;

114 c⁄° 
rc
 = 
	`¥›îty
 (
«me
, 
vÆue
, 
vÆue_Àngth
);

115 i‡(
rc
 == -1)

119 i‡(
byãs_À·
 > 0) {

120 
î∫o
 = 
EPROTO
;

124 
	}
}

126 
	gzmq
::
mech™ism_t
::
	$¥›îty
 (c⁄° 
°d
::
°rög
 
«me_
,

127 c⁄° *
vÆue_
, 
size_t
 
Àngth_
)

132 
	}
}

134 
boﬁ
 
	gzmq
::
mech™ism_t
::
	$check_sockë_ty≥
 (c⁄° 
°d
::
°rög
 
ty≥_
) const

136 
›ti⁄s
.
ty≥
) {

137 
ZMQ_REQ
:

138  
ty≥_
 == "REP" ||Åype_ == "ROUTER";

139 
ZMQ_REP
:

140  
ty≥_
 == "REQ" ||Åype_ == "DEALER";

141 
ZMQ_DEALER
:

142  
ty≥_
 == "REP" ||Åype_ == "DEALER" ||Åype_ == "ROUTER";

143 
ZMQ_ROUTER
:

144  
ty≥_
 == "REQ" ||Åype_ == "DEALER" ||Åype_ == "ROUTER";

145 
ZMQ_PUSH
:

146  
ty≥_
 == "PULL";

147 
ZMQ_PULL
:

148  
ty≥_
 == "PUSH";

149 
ZMQ_PUB
:

150  
ty≥_
 == "SUB" ||Åype_ == "XSUB";

151 
ZMQ_SUB
:

152  
ty≥_
 == "PUB" ||Åype_ == "XPUB";

153 
ZMQ_XPUB
:

154  
ty≥_
 == "SUB" ||Åype_ == "XSUB";

155 
ZMQ_XSUB
:

156  
ty≥_
 == "PUB" ||Åype_ == "XPUB";

157 
ZMQ_PAIR
:

158  
ty≥_
 == "PAIR";

162  
Ál£
;

163 
	}
}

	@mechanism.hpp

20 #i‚de‡
__ZMQ_MECHANISM_HPP_INCLUDED__


21 
	#__ZMQ_MECHANISM_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

24 
	~"›ti⁄s.hµ
"

25 
	~"blob.hµ
"

27 
«me•a˚
 
	gzmq


33 
˛ass
 
	gmsg_t
;

35 ˛as†
	cmech™ism_t


37 
	gpublic
:

39 
mech™ism_t
 (c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

41 
	gvútuÆ
 ~
mech™ism_t
 ();

44 
vútuÆ
 
√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
) = 0;

47 
vútuÆ
 
¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
) = 0;

49 
vútuÆ
 
ícode
 (
msg_t
 *
msg_
) {  0; }

51 
vútuÆ
 
decode
 (
msg_t
 *
msg_
) {  0; }

54 
vútuÆ
 
z≠_msg_avaûabÀ
 () {  0; }

57 
vútuÆ
 
boﬁ
 
is_h™dshake_com∂ëe
 () const = 0;

59 
£t_≥î_idítôy
 (c⁄° *
id_±r
, 
size_t
 
id_size
);

61 
≥î_idítôy
 (
msg_t
 *
msg_
);

63 
	g¥Ÿe˘ed
:

67 c⁄° *
sockë_ty≥_°rög
 (
sockë_ty≥
) const;

69 
size_t
 
add_¥›îty
 (*
±r
, c⁄° *
«me
,

70 c⁄° *
vÆue
, 
size_t
 
vÆue_Àn
) const;

76 
∑r£_mëad©a
 (c⁄° *
±r_
, 
size_t
 
Àngth
);

85 
vútuÆ
 
¥›îty
 (c⁄° 
°d
::
°rög
 
«me_
,

86 c⁄° *
vÆue_
, 
size_t
 
Àngth_
);

88 
›ti⁄s_t
 
	g›ti⁄s
;

90 
	g¥iv©e
:

92 
blob_t
 
idítôy
;

96 
boﬁ
 
check_sockë_ty≥
 (c⁄° 
°d
::
°rög
 
ty≥_
) const;

	@msg.cpp

20 
	~"msg.hµ
"

21 
	~"../ö˛ude/zmq.h
"

23 
	~<°rög.h
>

24 
	~<°dlib.h
>

25 
	~<√w
>

27 
	~"°döt.hµ
"

28 
	~"likñy.hµ
"

29 
	~"îr.hµ
"

33 
	tzmq_msg_size_check


34 [2 * (( (
zmq
::
msg_t
Ë= (
zmq_msg_t
)) != 0) - 1];

36 
boﬁ
 
	gzmq
::
msg_t
::
	$check
 ()

38  
u
.
ba£
.
ty≥
 >
ty≥_mö
 && u.ba£.ty≥ <
ty≥_max
;

39 
	}
}

41 
	gzmq
::
msg_t
::
	$öô
 ()

43 
u
.
vsm
.
ty≥
 = 
ty≥_vsm
;

44 
u
.
vsm
.
Êags
 = 0;

45 
u
.
vsm
.
size
 = 0;

47 
	}
}

49 
	gzmq
::
msg_t
::
	$öô_size
 (
size_t
 
size_
)

51 i‡(
size_
 <
max_vsm_size
) {

52 
u
.
vsm
.
ty≥
 = 
ty≥_vsm
;

53 
u
.
vsm
.
Êags
 = 0;

54 
u
.
vsm
.
size
 = (Ë
size_
;

57 
u
.
lmsg
.
ty≥
 = 
ty≥_lmsg
;

58 
u
.
lmsg
.
Êags
 = 0;

59 
u
.
lmsg
.
c⁄ã¡
 =

60 (
c⁄ã¡_t
*Ë
	`mÆloc
 ( (c⁄ã¡_tË+ 
size_
);

61 i‡(
	`u∆ikñy
 (!
u
.
lmsg
.
c⁄ã¡
)) {

62 
î∫o
 = 
ENOMEM
;

66 
u
.
lmsg
.
c⁄ã¡
->
d©a
 = u.lmsg.content + 1;

67 
u
.
lmsg
.
c⁄ã¡
->
size
 = 
size_
;

68 
u
.
lmsg
.
c⁄ã¡
->
f‚
 = 
NULL
;

69 
u
.
lmsg
.
c⁄ã¡
->
höt
 = 
NULL
;

70 
	`√w
 (&
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
Ë
zmq
::
	`©omic_cou¡î_t
 ();

73 
	}
}

75 
	gzmq
::
msg_t
::
	$öô_d©a
 (*
d©a_
, 
size_t
 
size_
, 
msg_‰ì_‚
 *
f‚_
,

76 *
höt_
)

80 
	`as£π
 (
d©a_
 !
NULL
 || 
size_
 == 0);

83 if(
f‚_
 =
NULL
) {

84 
u
.
cmsg
.
ty≥
 = 
ty≥_cmsg
;

85 
u
.
cmsg
.
Êags
 = 0;

86 
u
.
cmsg
.
d©a
 = 
d©a_
;

87 
u
.
cmsg
.
size
 = 
size_
;

90 
u
.
lmsg
.
ty≥
 = 
ty≥_lmsg
;

91 
u
.
lmsg
.
Êags
 = 0;

92 
u
.
lmsg
.
c⁄ã¡
 = (
c⁄ã¡_t
*Ë
	`mÆloc
 ( (content_t));

93 i‡(!
u
.
lmsg
.
c⁄ã¡
) {

94 
î∫o
 = 
ENOMEM
;

98 
u
.
lmsg
.
c⁄ã¡
->
d©a
 = 
d©a_
;

99 
u
.
lmsg
.
c⁄ã¡
->
size
 = 
size_
;

100 
u
.
lmsg
.
c⁄ã¡
->
f‚
 = 
f‚_
;

101 
u
.
lmsg
.
c⁄ã¡
->
höt
 = 
höt_
;

102 
	`√w
 (&
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
Ë
zmq
::
	`©omic_cou¡î_t
 ();

106 
	}
}

108 
	gzmq
::
msg_t
::
	$öô_dñimôî
 ()

110 
u
.
dñimôî
.
ty≥
 = 
ty≥_dñimôî
;

111 
u
.
dñimôî
.
Êags
 = 0;

113 
	}
}

115 
	gzmq
::
msg_t
::
	$˛o£
 ()

118 i‡(
	`u∆ikñy
 (!
	`check
 ())) {

119 
î∫o
 = 
EFAULT
;

123 i‡(
u
.
ba£
.
ty≥
 =
ty≥_lmsg
) {

127 i‡(!(
u
.
lmsg
.
Êags
 & 
msg_t
::
sh¨ed
) ||

128 !
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.
	`sub
 (1)) {

132 
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.~
	`©omic_cou¡î_t
 ();

134 i‡(
u
.
lmsg
.
c⁄ã¡
->
f‚
)

135 
u
.
lmsg
.
c⁄ã¡
->
	`f‚
 (u.lmsg.c⁄ã¡->
d©a
,

136 
u
.
lmsg
.
c⁄ã¡
->
höt
);

137 
	`‰ì
 (
u
.
lmsg
.
c⁄ã¡
);

142 
u
.
ba£
.
ty≥
 = 0;

146 
	}
}

148 
	gzmq
::
msg_t
::
	$move
 (
msg_t
 &
§c_
)

151 i‡(
	`u∆ikñy
 (!
§c_
.
	`check
 ())) {

152 
î∫o
 = 
EFAULT
;

156 
rc
 = 
	`˛o£
 ();

157 i‡(
	`u∆ikñy
 (
rc
 < 0))

158  
rc
;

160 *
this
 = 
§c_
;

162 
rc
 = 
§c_
.
	`öô
 ();

163 i‡(
	`u∆ikñy
 (
rc
 < 0))

164  
rc
;

167 
	}
}

169 
	gzmq
::
msg_t
::
	$c›y
 (
msg_t
 &
§c_
)

172 i‡(
	`u∆ikñy
 (!
§c_
.
	`check
 ())) {

173 
î∫o
 = 
EFAULT
;

177 
rc
 = 
	`˛o£
 ();

178 i‡(
	`u∆ikñy
 (
rc
 < 0))

179  
rc
;

181 i‡(
§c_
.
u
.
ba£
.
ty≥
 =
ty≥_lmsg
) {

185 i‡(
§c_
.
u
.
lmsg
.
Êags
 & 
msg_t
::
sh¨ed
)

186 
§c_
.
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.
	`add
 (1);

188 
§c_
.
u
.
lmsg
.
Êags
 |
msg_t
::
sh¨ed
;

189 
§c_
.
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.
	`£t
 (2);

193 *
this
 = 
§c_
;

197 
	}
}

199 *
	gzmq
::
msg_t
::
	$d©a
 ()

202 
	`zmq_as£π
 (
	`check
 ());

204 
u
.
ba£
.
ty≥
) {

205 
ty≥_vsm
:

206  
u
.
vsm
.
d©a
;

207 
ty≥_lmsg
:

208  
u
.
lmsg
.
c⁄ã¡
->
d©a
;

209 
ty≥_cmsg
:

210  
u
.
cmsg
.
d©a
;

212 
	`zmq_as£π
 (
Ál£
);

213  
NULL
;

215 
	}
}

217 
size_t
 
	gzmq
::
msg_t
::
	$size
 ()

220 
	`zmq_as£π
 (
	`check
 ());

222 
u
.
ba£
.
ty≥
) {

223 
ty≥_vsm
:

224  
u
.
vsm
.
size
;

225 
ty≥_lmsg
:

226  
u
.
lmsg
.
c⁄ã¡
->
size
;

227 
ty≥_cmsg
:

228  
u
.
cmsg
.
size
;

230 
	`zmq_as£π
 (
Ál£
);

233 
	}
}

235 
	gzmq
::
msg_t
::
	$Êags
 ()

237  
u
.
ba£
.
Êags
;

238 
	}
}

240 
	gzmq
::
msg_t
::
	$£t_Êags
 (
Êags_
)

242 
u
.
ba£
.
Êags
 |
Êags_
;

243 
	}
}

245 
	gzmq
::
msg_t
::
	$ª£t_Êags
 (
Êags_
)

247 
u
.
ba£
.
Êags
 &~
Êags_
;

248 
	}
}

250 
boﬁ
 
	gzmq
::
msg_t
::
	$is_idítôy
 () const

252  (
u
.
ba£
.
Êags
 & 
idítôy
) == identity;

253 
	}
}

255 
boﬁ
 
	gzmq
::
msg_t
::
	$is_dñimôî
 ()

257  
u
.
ba£
.
ty≥
 =
ty≥_dñimôî
;

258 
	}
}

260 
boﬁ
 
	gzmq
::
msg_t
::
	$is_vsm
 ()

262  
u
.
ba£
.
ty≥
 =
ty≥_vsm
;

263 
	}
}

265 
boﬁ
 
	gzmq
::
msg_t
::
	$is_cmsg
 ()

267  
u
.
ba£
.
ty≥
 =
ty≥_cmsg
;

268 
	}
}

270 
	gzmq
::
msg_t
::
	$add_ªfs
 (
ªfs_
)

272 
	`zmq_as£π
 (
ªfs_
 >= 0);

275 i‡(!
ªfs_
)

280 i‡(
u
.
ba£
.
ty≥
 =
ty≥_lmsg
) {

281 i‡(
u
.
lmsg
.
Êags
 & 
msg_t
::
sh¨ed
)

282 
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.
	`add
 (
ªfs_
);

284 
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.
	`£t
 (
ªfs_
 + 1);

285 
u
.
lmsg
.
Êags
 |
msg_t
::
sh¨ed
;

288 
	}
}

290 
boﬁ
 
	gzmq
::
msg_t
::
	$rm_ªfs
 (
ªfs_
)

292 
	`zmq_as£π
 (
ªfs_
 >= 0);

295 i‡(!
ªfs_
)

296  
åue
;

299 i‡(
u
.
ba£
.
ty≥
 !
ty≥_lmsg
 || !(u.
lmsg
.
Êags
 & 
msg_t
::
sh¨ed
)) {

300 
	`˛o£
 ();

301  
Ál£
;

305 i‡(!
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.
	`sub
 (
ªfs_
)) {

308 
u
.
lmsg
.
c⁄ã¡
->
ªf˙t
.~
	`©omic_cou¡î_t
 ();

310 i‡(
u
.
lmsg
.
c⁄ã¡
->
f‚
)

311 
u
.
lmsg
.
c⁄ã¡
->
	`f‚
 (u.lmsg.c⁄ã¡->
d©a
, u.lmsg.c⁄ã¡->
höt
);

312 
	`‰ì
 (
u
.
lmsg
.
c⁄ã¡
);

314  
Ál£
;

317  
åue
;

318 
	}
}

	@msg.hpp

20 #i‚de‡
__ZMQ_MSG_HPP_INCLUDE__


21 
	#__ZMQ_MSG_HPP_INCLUDE__


	)

23 
	~<°ddef.h
>

24 
	~<°dio.h
>

26 
	~"c⁄fig.hµ
"

27 
	~"©omic_cou¡î.hµ
"

34 (
msg_‰ì_‚
Ë(*
	td©a
, *
	thöt
);

37 
«me•a˚
 
zmq


43 ˛as†
	cmsg_t


45 
public
:

50 
m‹e
 = 1,

51 
comm™d
 = 2,

52 
idítôy
 = 64,

53 
sh¨ed
 = 128

56 
boﬁ
 
check
 ();

57 
öô
 ();

58 
öô_size
 (
size_t
 
size_
);

59 
öô_d©a
 (*
d©a_
, 
size_t
 
size_
, 
msg_‰ì_‚
 *
f‚_
,

60 *
höt_
);

61 
öô_dñimôî
 ();

62 
˛o£
 ();

63 
move
 (
msg_t
 &
§c_
);

64 
c›y
 (
msg_t
 &
§c_
);

65 *
d©a
 ();

66 
size_t
 
size
 ();

67 
Êags
 ();

68 
£t_Êags
 (
Êags_
);

69 
ª£t_Êags
 (
Êags_
);

70 
boﬁ
 
is_idítôy
 () const;

71 
boﬁ
 
is_dñimôî
 ();

72 
boﬁ
 
is_vsm
 ();

73 
boﬁ
 
is_cmsg
 ();

77 
add_ªfs
 (
ªfs_
);

81 
boﬁ
 
rm_ªfs
 (
ªfs_
);

83 
¥iv©e
:

87 íum {
max_vsm_size
 = 29};

96 
	sc⁄ã¡_t


98 *
d©a
;

99 
size_t
 
size
;

100 
msg_‰ì_‚
 *
f‚
;

101 *
höt
;

102 
zmq
::
©omic_cou¡î_t
 
ªf˙t
;

106 
	ety≥_t


108 
ty≥_mö
 = 101,

110 
ty≥_vsm
 = 101,

112 
ty≥_lmsg
 = 102,

114 
ty≥_dñimôî
 = 103,

116 
ty≥_cmsg
 = 104,

117 
ty≥_max
 = 104

126 
unu£d
 [
max_vsm_size
 + 1];

127 
ty≥
;

128 
Êags
;

129 } 
ba£
;

131 
d©a
 [
max_vsm_size
];

132 
size
;

133 
ty≥
;

134 
Êags
;

135 } 
vsm
;

137 
c⁄ã¡_t
 *
c⁄ã¡
;

138 
unu£d
 [
max_vsm_size
 + 1 -  (
c⁄ã¡_t
*)];

139 
ty≥
;

140 
Êags
;

141 } 
lmsg
;

143 * 
d©a
;

144 
size_t
 
size
;

145 
unu£d


146 [
max_vsm_size
 + 1 -  (*Ë-  (
size_t
)];

147 
ty≥
;

148 
Êags
;

149 } 
cmsg
;

151 
unu£d
 [
max_vsm_size
 + 1];

152 
ty≥
;

153 
Êags
;

154 } 
dñimôî
;

155 } 
u
;

	@mtrie.cpp

20 
	~<°dlib.h
>

22 
	~<√w
>

23 
	~<Æg‹ôhm
>

25 
	~"∂©f‹m.hµ
"

26 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


27 
	~"wödows.hµ
"

30 
	~"îr.hµ
"

31 
	~"pùe.hµ
"

32 
	~"måõ.hµ
"

34 
	gzmq
::
måõ_t
::
	$måõ_t
 () :

35 
	`pùes
 (0),

36 
	`mö
 (0),

37 
	`cou¡
 (0),

38 
	$live_nodes
 (0)

40 
	}
}

42 
	gzmq
::
måõ_t
::~
	$måõ_t
 ()

44 i‡(
pùes
) {

45 
dñëe
 
pùes
;

46 
pùes
 = 0;

49 i‡(
cou¡
 == 1) {

50 
	`zmq_as£π
 (
√xt
.
node
);

51 
dñëe
 
√xt
.
node
;

52 
√xt
.
node
 = 0;

55 i‡(
cou¡
 > 1) {

56 
i
 = 0; i !
cou¡
; ++i)

57 
dñëe
 
√xt
.
èbÀ
 [
i
];

58 
	`‰ì
 (
√xt
.
èbÀ
);

60 
	}
}

62 
boﬁ
 
	gzmq
::
måõ_t
::
	$add
 (*
¥efix_
, 
size_t
 
size_
, 
pùe_t
 *
pùe_
)

64  
	`add_hñ≥r
 (
¥efix_
, 
size_
, 
pùe_
);

65 
	}
}

67 
boﬁ
 
	gzmq
::
måõ_t
::
	$add_hñ≥r
 (*
¥efix_
, 
size_t
 
size_
,

68 
pùe_t
 *
pùe_
)

71 i‡(!
size_
) {

72 
boﬁ
 
ªsu…
 = !
pùes
;

73 i‡(!
pùes
) {

74 
pùes
 = 
	`√w
 (
°d
::
nŸhrow
Ë
pùes_t
;

75 
	`Æloc_as£π
 (
pùes
);

77 
pùes
->
	`ö£π
 (
pùe_
);

78  
ªsu…
;

81 
c
 = *
¥efix_
;

82 i‡(
c
 < 
mö
 || c >mö + 
cou¡
) {

86 i‡(!
cou¡
) {

87 
mö
 = 
c
;

88 
cou¡
 = 1;

89 
√xt
.
node
 = 
NULL
;

92 i‡(
cou¡
 == 1) {

93 
ﬁdc
 = 
mö
;

94 
måõ_t
 *
ﬁdp
 = 
√xt
.
node
;

95 
cou¡
 = (
mö
 < 
c
 ? c - min : min - c) + 1;

96 
√xt
.
èbÀ
 = (
måõ_t
**)

97 
	`mÆloc
 ( (
måõ_t
*Ë* 
cou¡
);

98 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

99 
i
 = 0; i !
cou¡
; ++i)

100 
√xt
.
èbÀ
 [
i
] = 0;

101 
mö
 = 
°d
::
	`mö
 (mö, 
c
);

102 
√xt
.
èbÀ
 [
ﬁdc
 - 
mö
] = 
ﬁdp
;

105 i‡(
mö
 < 
c
) {

107 
ﬁd_cou¡
 = 
cou¡
;

108 
cou¡
 = 
c
 - 
mö
 + 1;

109 
√xt
.
èbÀ
 = (
måõ_t
**Ë
	`ªÆloc
 (next.table,

110  (
måõ_t
*Ë* 
cou¡
);

111 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

112 
i
 = 
ﬁd_cou¡
; i !
cou¡
; i++)

113 
√xt
.
èbÀ
 [
i
] = 
NULL
;

117 
ﬁd_cou¡
 = 
cou¡
;

118 
cou¡
 = (
mö
 + 
ﬁd_cou¡
Ë- 
c
;

119 
√xt
.
èbÀ
 = (
måõ_t
**Ë
	`ªÆloc
 (next.table,

120  (
måõ_t
*Ë* 
cou¡
);

121 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

122 
	`memmove
 (
√xt
.
èbÀ
 + 
mö
 - 
c
,Çext.table,

123 
ﬁd_cou¡
 *  (
måõ_t
*));

124 
i
 = 0; i !
mö
 - 
c
; i++)

125 
√xt
.
èbÀ
 [
i
] = 
NULL
;

126 
mö
 = 
c
;

131 i‡(
cou¡
 == 1) {

132 i‡(!
√xt
.
node
) {

133 
√xt
.
node
 = 
	`√w
 (
°d
::
nŸhrow
Ë
måõ_t
;

134 
	`Æloc_as£π
 (
√xt
.
node
);

135 ++
live_nodes
;

137  
√xt
.
node
->
	`add_hñ≥r
 (
¥efix_
 + 1, 
size_
 - 1, 
pùe_
);

140 i‡(!
√xt
.
èbÀ
 [
c
 - 
mö
]) {

141 
√xt
.
èbÀ
 [
c
 - 
mö
] = 
	`√w
 (
°d
::
nŸhrow
Ë
måõ_t
;

142 
	`Æloc_as£π
 (
√xt
.
èbÀ
 [
c
 - 
mö
]);

143 ++
live_nodes
;

145  
√xt
.
èbÀ
 [
c
 - 
mö
]->
	`add_hñ≥r
 (
¥efix_
 + 1, 
size_
 - 1, 
pùe_
);

147 
	}
}

150 
	gzmq
::
måõ_t
::
rm
 (
pùe_t
 *
pùe_
,

151 (*
func_
Ë(*
d©a_
, 
size_t
 
size_
, *
¨g_
),

152 *
¨g_
)

154 *
buff
 = 
NULL
;

155 
	`rm_hñ≥r
 (
pùe_
, &
buff
, 0, 0, 
func_
, 
¨g_
);

156 
	`‰ì
 (
buff
);

157 
	}
}

159 
	gzmq
::
måõ_t
::
rm_hñ≥r
 (
pùe_t
 *
pùe_
, **
buff_
,

160 
size_t
 
buffsize_
, size_à
maxbuffsize_
,

161 (*
func_
Ë(*
d©a_
, 
size_t
 
size_
, *
¨g_
),

162 *
¨g_
)

165 i‡(
pùes
 &&Öùes->
	`îa£
 (
pùe_
Ë&&Öùes->
	`em±y
 ()) {

166 
	`func_
 (*
buff_
, 
buffsize_
, 
¨g_
);

167 
dñëe
 
pùes
;

168 
pùes
 = 0;

172 i‡(
buffsize_
 >
maxbuffsize_
) {

173 
maxbuffsize_
 = 
buffsize_
 + 256;

174 *
buff_
 = (*Ë
	`ªÆloc
 (*buff_, 
maxbuffsize_
);

175 
	`Æloc_as£π
 (*
buff_
);

179 i‡(
cou¡
 == 0)

183 i‡(
cou¡
 == 1) {

184 (*
buff_
Ë[
buffsize_
] = 
mö
;

185 
buffsize_
++;

186 
√xt
.
node
->
	`rm_hñ≥r
 (
pùe_
, 
buff_
, 
buffsize_
, 
maxbuffsize_
,

187 
func_
, 
¨g_
);

190 i‡(
√xt
.
node
->
	`is_ªdund™t
 ()) {

191 
dñëe
 
√xt
.
node
;

192 
√xt
.
node
 = 0;

193 
cou¡
 = 0;

194 --
live_nodes
;

195 
	`zmq_as£π
 (
live_nodes
 == 0);

203 
√w_mö
 = 
mö
 + 
cou¡
 - 1;

205 
√w_max
 = 
mö
;

206 
c
 = 0; c !
cou¡
; c++) {

207 (*
buff_
Ë[
buffsize_
] = 
mö
 + 
c
;

208 i‡(
√xt
.
èbÀ
 [
c
]) {

209 
√xt
.
èbÀ
 [
c
]->
	`rm_hñ≥r
 (
pùe_
, 
buff_
, 
buffsize_
 + 1,

210 
maxbuffsize_
, 
func_
, 
¨g_
);

213 i‡(
√xt
.
èbÀ
 [
c
]->
	`is_ªdund™t
 ()) {

214 
dñëe
 
√xt
.
èbÀ
 [
c
];

215 
√xt
.
èbÀ
 [
c
] = 0;

217 
	`zmq_as£π
 (
live_nodes
 > 0);

218 --
live_nodes
;

228 i‡(
c
 + 
mö
 < 
√w_mö
)

229 
√w_mö
 = 
c
 + 
mö
;

230 i‡(
c
 + 
mö
 > 
√w_max
)

231 
√w_max
 = 
c
 + 
mö
;

236 
	`zmq_as£π
 (
cou¡
 > 1);

239 i‡(
live_nodes
 == 0) {

240 
	`‰ì
 (
√xt
.
èbÀ
);

241 
√xt
.
èbÀ
 = 
NULL
;

242 
cou¡
 = 0;

246 i‡(
live_nodes
 == 1) {

250 
	`zmq_as£π
 (
√w_mö
 =
√w_max
);

251 
	`zmq_as£π
 (
√w_mö
 >
mö
 &&Çew_mö < mö + 
cou¡
);

252 
måõ_t
 *
node
 = 
√xt
.
èbÀ
 [
√w_mö
 - 
mö
];

253 
	`zmq_as£π
 (
node
);

254 
	`‰ì
 (
√xt
.
èbÀ
);

255 
√xt
.
node
 =Çode;

256 
cou¡
 = 1;

257 
mö
 = 
√w_mö
;

260 i‡(
√w_mö
 > 
mö
 || 
√w_max
 < mö + 
cou¡
 - 1) {

261 
	`zmq_as£π
 (
√w_max
 - 
√w_mö
 + 1 > 1);

263 
måõ_t
 **
ﬁd_èbÀ
 = 
√xt
.
èbÀ
;

264 
	`zmq_as£π
 (
√w_mö
 > 
mö
 || 
√w_max
 < mö + 
cou¡
 - 1);

265 
	`zmq_as£π
 (
√w_mö
 >
mö
);

266 
	`zmq_as£π
 (
√w_max
 <
mö
 + 
cou¡
 - 1);

267 
	`zmq_as£π
 (
√w_max
 - 
√w_mö
 + 1 < 
cou¡
);

269 
cou¡
 = 
√w_max
 - 
√w_mö
 + 1;

270 
√xt
.
èbÀ
 = (
måõ_t
**Ë
	`mÆloc
 ( (måõ_t*Ë* 
cou¡
);

271 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

273 
	`memmove
 (
√xt
.
èbÀ
, 
ﬁd_èbÀ
 + (
√w_mö
 - 
mö
),

274  (
måõ_t
*Ë* 
cou¡
);

275 
	`‰ì
 (
ﬁd_èbÀ
);

277 
mö
 = 
√w_mö
;

279 
	}
}

281 
boﬁ
 
	gzmq
::
måõ_t
::
	$rm
 (*
¥efix_
, 
size_t
 
size_
, 
pùe_t
 *
pùe_
)

283  
	`rm_hñ≥r
 (
¥efix_
, 
size_
, 
pùe_
);

284 
	}
}

286 
boﬁ
 
	gzmq
::
måõ_t
::
	$rm_hñ≥r
 (*
¥efix_
, 
size_t
 
size_
,

287 
pùe_t
 *
pùe_
)

289 i‡(!
size_
) {

290 i‡(
pùes
) {

291 
pùes_t
::
size_ty≥
 
îa£d
 = 
pùes
->
	`îa£
 (
pùe_
);

292 
	`zmq_as£π
 (
îa£d
 == 1);

293 i‡(
pùes
->
	`em±y
 ()) {

294 
dñëe
 
pùes
;

295 
pùes
 = 0;

298  !
pùes
;

301 
c
 = *
¥efix_
;

302 i‡(!
cou¡
 || 
c
 < 
mö
 || c >= min + count)

303  
Ál£
;

305 
måõ_t
 *
√xt_node
 =

306 
cou¡
 =1 ? 
√xt
.
node
 :Çext.
èbÀ
 [
c
 - 
mö
];

308 i‡(!
√xt_node
)

309  
Ál£
;

311 
boﬁ
 
ªt
 = 
√xt_node
->
	`rm_hñ≥r
 (
¥efix_
 + 1, 
size_
 - 1, 
pùe_
);

313 i‡(
√xt_node
->
	`is_ªdund™t
 ()) {

314 
dñëe
 
√xt_node
;

315 
	`zmq_as£π
 (
cou¡
 > 0);

317 i‡(
cou¡
 == 1) {

318 
√xt
.
node
 = 0;

319 
cou¡
 = 0;

320 --
live_nodes
;

321 
	`zmq_as£π
 (
live_nodes
 == 0);

324 
√xt
.
èbÀ
 [
c
 - 
mö
] = 0;

325 
	`zmq_as£π
 (
live_nodes
 > 1);

326 --
live_nodes
;

329 i‡(
live_nodes
 == 1) {

333 
i
;

334 
i
 = 0; i < 
cou¡
; ++i)

335 i‡(
√xt
.
èbÀ
 [
i
])

338 
	`zmq_as£π
 (
i
 < 
cou¡
);

339 
mö
 +
i
;

340 
cou¡
 = 1;

341 
måõ_t
 *
ﬁdp
 = 
√xt
.
èbÀ
 [
i
];

342 
	`‰ì
 (
√xt
.
èbÀ
);

343 
√xt
.
node
 = 
ﬁdp
;

346 i‡(
c
 =
mö
) {

348 
i
;

349 
i
 = 1; i < 
cou¡
; ++i)

350 i‡(
√xt
.
èbÀ
 [
i
])

353 
	`zmq_as£π
 (
i
 < 
cou¡
);

354 
mö
 +
i
;

355 
cou¡
 -
i
;

356 
måõ_t
 **
ﬁd_èbÀ
 = 
√xt
.
èbÀ
;

357 
√xt
.
èbÀ
 = (
måõ_t
**Ë
	`mÆloc
 ( (måõ_t*Ë* 
cou¡
);

358 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

359 
	`memmove
 (
√xt
.
èbÀ
, 
ﬁd_èbÀ
 + 
i
,  (
måõ_t
*Ë* 
cou¡
);

360 
	`‰ì
 (
ﬁd_èbÀ
);

363 i‡(
c
 =
mö
 + 
cou¡
 - 1) {

365 
i
;

366 
i
 = 1; i < 
cou¡
; ++i)

367 i‡(
√xt
.
èbÀ
 [
cou¡
 - 1 - 
i
])

370 
	`zmq_as£π
 (
i
 < 
cou¡
);

371 
cou¡
 -
i
;

372 
måõ_t
 **
ﬁd_èbÀ
 = 
√xt
.
èbÀ
;

373 
√xt
.
èbÀ
 = (
måõ_t
**Ë
	`mÆloc
 ( (måõ_t*Ë* 
cou¡
);

374 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

375 
	`memmove
 (
√xt
.
èbÀ
, 
ﬁd_èbÀ
,  (
måõ_t
*Ë* 
cou¡
);

376 
	`‰ì
 (
ﬁd_èbÀ
);

381  
ªt
;

382 
	}
}

384 
	gzmq
::
måõ_t
::
m©ch
 (*
d©a_
, 
size_t
 
size_
,

385 (*
func_
Ë(
pùe_t
 *
pùe_
, *
¨g_
), *arg_)

387 
måõ_t
 *
cuºít
 = 
this
;

388 
åue
) {

391 i‡(
cuºít
->
pùes
) {

392 
pùes_t
::
ôî©‹
 
ô
 = 
cuºít
->
pùes
->
	`begö
 ();

393 
ô
 !
cuºít
->
pùes
->
	`íd
 (); ++it)

394 
	`func_
 (*
ô
, 
¨g_
);

398 i‡(!
size_
)

402 i‡(
cuºít
->
cou¡
 == 0)

406 i‡(
cuºít
->
cou¡
 == 1) {

407 i‡(
d©a_
 [0] !
cuºít
->
mö
)

409 
cuºít
 = cuºít->
√xt
.
node
;

410 
d©a_
++;

411 
size_
--;

416 i‡(
d©a_
 [0] < 
cuºít
->
mö
 || data_ [0] >=

417 
cuºít
->
mö
 + cuºít->
cou¡
)

419 i‡(!
cuºít
->
√xt
.
èbÀ
 [
d©a_
 [0] - cuºít->
mö
])

421 
cuºít
 = cuºít->
√xt
.
èbÀ
 [
d©a_
 [0] - cuºít->
mö
];

422 
d©a_
++;

423 
size_
--;

425 
	}
}

427 
boﬁ
 
	gzmq
::
måõ_t
::
	$is_ªdund™t
 () const

429  !
pùes
 && 
live_nodes
 == 0;

430 
	}
}

	@mtrie.hpp

20 #i‚de‡
__ZMQ_MTRIE_HPP_INCLUDED__


21 
	#__ZMQ_MTRIE_HPP_INCLUDED__


	)

23 
	~<°ddef.h
>

24 
	~<£t
>

26 
	~"°döt.hµ
"

28 
«me•a˚
 
	gzmq


31 
˛ass
 
	gpùe_t
;

35 ˛as†
	cmåõ_t


37 
	gpublic
:

39 
måõ_t
 ();

40 ~
måõ_t
 ();

44 
boﬁ
 
add
 (*
¥efix_
, 
size_t
 
size_
, 
zmq
::
pùe_t
 *
pùe_
);

49 
rm
 (
zmq
::
pùe_t
 *
pùe_
,

50 (*
func_
Ë(*
d©a_
, 
size_t
 
size_
, *
¨g_
),

51 *
¨g_
);

55 
boﬁ
 
rm
 (*
¥efix_
, 
size_t
 
size_
, 
zmq
::
pùe_t
 *
pùe_
);

58 
m©ch
 (*
d©a_
, 
size_t
 
size_
,

59 (*
func_
Ë(
zmq
::
pùe_t
 *
pùe_
, *
¨g_
), *arg_);

61 
	g¥iv©e
:

63 
boﬁ
 
add_hñ≥r
 (*
¥efix_
, 
size_t
 
size_
,

64 
zmq
::
pùe_t
 *
pùe_
);

65 
rm_hñ≥r
 (
zmq
::
pùe_t
 *
pùe_
, **
buff_
,

66 
size_t
 
buffsize_
, size_à
maxbuffsize_
,

67 (*
func_
Ë(*
d©a_
, 
size_t
 
size_
, *
¨g_
),

68 *
¨g_
);

69 
boﬁ
 
rm_hñ≥r
 (*
¥efix_
, 
size_t
 
size_
,

70 
zmq
::
pùe_t
 *
pùe_
);

71 
boﬁ
 
is_ªdund™t
 () const;

73 
	g°d
::
	t£t
 <
	tzmq
::
	tpùe_t
*> 
	tpùes_t
;

74 
pùes_t
 *
	gpùes
;

76 
	gmö
;

77 
	gcou¡
;

78 
	glive_nodes
;

80 
˛ass
 
måõ_t
 *
	gnode
;

81 
˛ass
 
måõ_t
 **
	gèbÀ
;

82 } 
	g√xt
;

84 
måõ_t
 (const mtrie_t&);

85 c⁄° 
	gmåõ_t
 &
	g›î©‹
 = (c⁄° 
måõ_t
&);

	@mutex.hpp

20 #i‚de‡
__ZMQ_MUTEX_HPP_INCLUDED__


21 
	#__ZMQ_MUTEX_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

24 
	~"îr.hµ
"

28 #ifde‡
ZMQ_HAVE_WINDOWS


30 
	~"wödows.hµ
"

32 
«me•a˚
 
	gzmq


35 ˛as†
	cmuãx_t


37 
	gpublic
:

38 
ölöe
 
muãx_t
 ()

40 
InôülizeCrôiˇlSe˘i⁄
 (&
cs
);

43 
	gölöe
 ~
muãx_t
 ()

45 
DñëeCrôiˇlSe˘i⁄
 (&
cs
);

48 
ölöe
 
lock
 ()

50 
E¡îCrôiˇlSe˘i⁄
 (&
cs
);

53 
ölöe
 
boﬁ
 
åy_lock
 ()

55  (
TryE¡îCrôiˇlSe˘i⁄
 (&
cs
)Ë? 
	gåue
 : 
Ál£
;

58 
ölöe
 
u∆ock
 ()

60 
LóveCrôiˇlSe˘i⁄
 (&
cs
);

63 
	g¥iv©e
:

65 
CRITICAL_SECTION
 
cs
;

68 
muãx_t
 (const mutex_t&);

69 
	g›î©‹
 = (c⁄° 
muãx_t
&);

76 
	~<±hªad.h
>

78 
«me•a˚
 
	gzmq


81 ˛as†
	cmuãx_t


83 
	gpublic
:

84 
ölöe
 
muãx_t
 ()

86 
rc
 = 
±hªad_muãx_öô
 (&
muãx
, 
NULL
);

87 
posix_as£π
 (
rc
);

90 
	gölöe
 ~
muãx_t
 ()

92 
	grc
 = 
±hªad_muãx_de°roy
 (&
muãx
);

93 
posix_as£π
 (
rc
);

96 
ölöe
 
lock
 ()

98 
	grc
 = 
±hªad_muãx_lock
 (&
muãx
);

99 
posix_as£π
 (
rc
);

102 
ölöe
 
boﬁ
 
åy_lock
 ()

104 
	grc
 = 
±hªad_muãx_åylock
 (&
muãx
);

105 i‡(
	grc
 =
EBUSY
)

106  
Ál£
;

108 
posix_as£π
 (
rc
);

109  
	gåue
;

112 
ölöe
 
u∆ock
 ()

114 
	grc
 = 
±hªad_muãx_u∆ock
 (&
muãx
);

115 
posix_as£π
 (
rc
);

118 
	g¥iv©e
:

120 
±hªad_muãx_t
 
muãx
;

123 
muãx_t
 (const mutex_t&);

124 c⁄° 
	gmuãx_t
 &
	g›î©‹
 = (c⁄° 
muãx_t
&);

132 
«me•a˚
 
	gzmq


134 
	ssc›ed_lock_t


136 
sc›ed_lock_t
 (
muãx_t
& 
muãx_
)

137 : 
muãx
 (
muãx_
)

139 
muãx
.
lock
 ();

142 ~
sc›ed_lock_t
 ()

144 
	gmuãx
.
u∆ock
 ();

147 
	g¥iv©e
:

149 
muãx_t
& 
muãx
;

152 
sc›ed_lock_t
 (const scoped_lock_t&);

153 c⁄° 
	gsc›ed_lock_t
 &
	g›î©‹
 = (c⁄° 
sc›ed_lock_t
&);

	@null_mechanism.cpp

20 
	~"∂©f‹m.hµ
"

21 #ifde‡
ZMQ_HAVE_WINDOWS


22 
	~"wödows.hµ
"

25 
	~<°ddef.h
>

26 
	~<°rög.h
>

27 
	~<°dlib.h
>

29 
	~"îr.hµ
"

30 
	~"msg.hµ
"

31 
	~"£ssi⁄_ba£.hµ
"

32 
	~"wúe.hµ
"

33 
	~"nuŒ_mech™ism.hµ
"

35 
	gzmq
::
nuŒ_mech™ism_t
::
	$nuŒ_mech™ism_t
 (
£ssi⁄_ba£_t
 *
£ssi⁄_
,

36 c⁄° 
°d
::
°rög
 &
≥î_addªss_
,

37 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

38 
	`mech™ism_t
 (
›ti⁄s_
),

39 
	`£ssi⁄
 (
£ssi⁄_
),

40 
	`≥î_addªss
 (
≥î_addªss_
),

41 
	`ªady_comm™d_£¡
 (
Ál£
),

42 
	`ªady_comm™d_ª˚ived
 (
Ál£
),

43 
	`z≠_c⁄√˘ed
 (
Ál£
),

44 
	`z≠_ªque°_£¡
 (
Ál£
),

45 
	$z≠_ª∂y_ª˚ived
 (
Ál£
)

49 i‡(
›ti⁄s
.
z≠_domaö
.
	`size
 () > 0

50 && 
£ssi⁄
->
	`z≠_c⁄√˘
 () == 0)

51 
z≠_c⁄√˘ed
 = 
åue
;

52 
	}
}

54 
	gzmq
::
nuŒ_mech™ism_t
::~
	$nuŒ_mech™ism_t
 ()

56 
	}
}

58 
zmq
::
nuŒ_mech™ism_t
::
	$√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
)

60 i‡(
ªady_comm™d_£¡
) {

61 
î∫o
 = 
EAGAIN
;

64 i‡(
z≠_c⁄√˘ed
 && !
z≠_ª∂y_ª˚ived
) {

65 i‡(
z≠_ªque°_£¡
) {

66 
î∫o
 = 
EAGAIN
;

69 
	`£nd_z≠_ªque°
 ();

70 
z≠_ªque°_£¡
 = 
åue
;

71 c⁄° 
rc
 = 
	`ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

72 i‡(
rc
 != 0)

74 
z≠_ª∂y_ª˚ived
 = 
åue
;

77 * c⁄° 
comm™d_buf„r
 = (*Ë
	`mÆloc
 (512);

78 
	`Æloc_as£π
 (
comm™d_buf„r
);

80 *
±r
 = 
comm™d_buf„r
;

83 
	`mem˝y
 (
±r
, "\5READY", 6);

84 
±r
 += 6;

87 c⁄° *
sockë_ty≥
 = 
	`sockë_ty≥_°rög
 (
›ti⁄s
.
ty≥
);

88 
±r
 +
	`add_¥›îty
 (±r, "Sockë-Ty≥", 
sockë_ty≥
, 
	`°æí
 (socket_type));

91 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_REQ


92 || 
›ti⁄s
.
ty≥
 =
ZMQ_DEALER


93 || 
›ti⁄s
.
ty≥
 =
ZMQ_ROUTER
) {

94 
±r
 +
	`add_¥›îty
 (ptr, "Identity",

95 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

98 c⁄° 
size_t
 
comm™d_size
 = 
±r
 - 
comm™d_buf„r
;

99 c⁄° 
rc
 = 
msg_
->
	`öô_size
 (
comm™d_size
);

100 
	`î∫o_as£π
 (
rc
 == 0);

101 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
comm™d_buf„r
, 
comm™d_size
);

102 
	`‰ì
 (
comm™d_buf„r
);

104 
ªady_comm™d_£¡
 = 
åue
;

107 
	}
}

109 
	gzmq
::
nuŒ_mech™ism_t
::
	$¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
)

111 i‡(
ªady_comm™d_ª˚ived
) {

112 
î∫o
 = 
EPROTO
;

116 c⁄° *
±r
 =

117 
°©ic_ˇ°
 <*> (
msg_
->
	`d©a
 ());

118 
size_t
 
byãs_À·
 = 
msg_
->
	`size
 ();

120 i‡(
byãs_À·
 < 6 || 
	`memcmp
 (
±r
, "\5READY", 6)) {

121 
î∫o
 = 
EPROTO
;

125 
±r
 += 6;

126 
byãs_À·
 -= 6;

128 
rc
 = 
	`∑r£_mëad©a
 (
±r
, 
byãs_À·
);

129 i‡(
rc
 == 0) {

130 
rc
 = 
msg_
->
	`˛o£
 ();

131 
	`î∫o_as£π
 (
rc
 == 0);

132 
rc
 = 
msg_
->
	`öô
 ();

133 
	`î∫o_as£π
 (
rc
 == 0);

136 
ªady_comm™d_ª˚ived
 = 
åue
;

138  
rc
;

139 
	}
}

141 
	gzmq
::
nuŒ_mech™ism_t
::
	$z≠_msg_avaûabÀ
 ()

143 i‡(
z≠_ª∂y_ª˚ived
) {

144 
î∫o
 = 
EFSM
;

147 c⁄° 
rc
 = 
	`ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

148 i‡(
rc
 == 0)

149 
z≠_ª∂y_ª˚ived
 = 
åue
;

150  
rc
;

151 
	}
}

153 
boﬁ
 
	gzmq
::
nuŒ_mech™ism_t
::
	$is_h™dshake_com∂ëe
 () const

155  
ªady_comm™d_ª˚ived
 && 
ªady_comm™d_£¡
;

156 
	}
}

158 
	gzmq
::
nuŒ_mech™ism_t
::
	$£nd_z≠_ªque°
 ()

160 
rc
;

161 
msg_t
 
msg
;

164 
rc
 = 
msg
.
	`öô
 ();

165 
	`î∫o_as£π
 (
rc
 == 0);

166 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

167 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

168 
	`î∫o_as£π
 (
rc
 == 0);

171 
rc
 = 
msg
.
	`öô_size
 (3);

172 
	`î∫o_as£π
 (
rc
 == 0);

173 
	`mem˝y
 (
msg
.
	`d©a
 (), "1.0", 3);

174 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

175 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

176 
	`î∫o_as£π
 (
rc
 == 0);

179 
rc
 = 
msg
.
	`öô_size
 (1);

180 
	`î∫o_as£π
 (
rc
 == 0);

181 
	`mem˝y
 (
msg
.
	`d©a
 (), "1", 1);

182 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

183 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

184 
	`î∫o_as£π
 (
rc
 == 0);

187 
rc
 = 
msg
.
	`öô_size
 (
›ti⁄s
.
z≠_domaö
.
	`Àngth
 ());

188 
	`î∫o_as£π
 (
rc
 == 0);

189 
	`mem˝y
 (
msg
.
	`d©a
 (), 
›ti⁄s
.
z≠_domaö
.
	`c_°r
 (), o±i⁄s.z≠_domaö.
	`Àngth
 ());

190 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

191 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

192 
	`î∫o_as£π
 (
rc
 == 0);

195 
rc
 = 
msg
.
	`öô_size
 (
≥î_addªss
.
	`Àngth
 ());

196 
	`î∫o_as£π
 (
rc
 == 0);

197 
	`mem˝y
 (
msg
.
	`d©a
 (), 
≥î_addªss
.
	`c_°r
 (),Öìr_addªss.
	`Àngth
 ());

198 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

199 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

200 
	`î∫o_as£π
 (
rc
 == 0);

203 
rc
 = 
msg
.
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

204 
	`î∫o_as£π
 (
rc
 == 0);

205 
	`mem˝y
 (
msg
.
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

206 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

207 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

208 
	`î∫o_as£π
 (
rc
 == 0);

211 
rc
 = 
msg
.
	`öô_size
 (4);

212 
	`î∫o_as£π
 (
rc
 == 0);

213 
	`mem˝y
 (
msg
.
	`d©a
 (), "NULL", 4);

214 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

215 
	`î∫o_as£π
 (
rc
 == 0);

216 
	}
}

218 
	gzmq
::
nuŒ_mech™ism_t
::
	$ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ()

220 
rc
 = 0;

221 
msg_t
 
msg
 [7];

224 
i
 = 0; i < 7; i++) {

225 
rc
 = 
msg
 [
i
].
	`öô
 ();

226 
	`î∫o_as£π
 (
rc
 == 0);

229 
i
 = 0; i < 7; i++) {

230 
rc
 = 
£ssi⁄
->
	`ªad_z≠_msg
 (&
msg
 [
i
]);

231 i‡(
rc
 == -1)

233 i‡((
msg
 [
i
].
	`Êags
 (Ë& 
msg_t
::
m‹e
) == (i < 6? 0: msg_t::more)) {

234 
î∫o
 = 
EPROTO
;

235 
rc
 = -1;

240 i‡(
rc
 != 0)

241 
îr‹
;

244 i‡(
msg
 [0].
	`size
 () > 0) {

245 
rc
 = -1;

246 
î∫o
 = 
EPROTO
;

247 
îr‹
;

251 i‡(
msg
 [1].
	`size
 (Ë!3 || 
	`memcmp
 (msg [1].
	`d©a
 (), "1.0", 3)) {

252 
rc
 = -1;

253 
î∫o
 = 
EPROTO
;

254 
îr‹
;

258 i‡(
msg
 [2].
	`size
 (Ë!1 || 
	`memcmp
 (msg [2].
	`d©a
 (), "1", 1)) {

259 
rc
 = -1;

260 
î∫o
 = 
EPROTO
;

261 
îr‹
;

265 i‡(
msg
 [3].
	`size
 (Ë!3 || 
	`memcmp
 (msg [3].
	`d©a
 (), "200", 3)) {

266 
rc
 = -1;

267 
î∫o
 = 
EACCES
;

268 
îr‹
;

272 
rc
 = 
	`∑r£_mëad©a
 (
°©ic_ˇ°
 <c⁄° *> (
msg
 [6].
	`d©a
 ()),

273 
msg
 [6].
	`size
 ());

275 
îr‹
:

276 
i
 = 0; i < 7; i++) {

277 c⁄° 
rc2
 = 
msg
 [
i
].
	`˛o£
 ();

278 
	`î∫o_as£π
 (
rc2
 == 0);

281  
rc
;

282 
	}
}

	@null_mechanism.hpp

20 #i‚de‡
__ZMQ_NULL_MECHANISM_HPP_INCLUDED__


21 
	#__ZMQ_NULL_MECHANISM_HPP_INCLUDED__


	)

23 
	~"mech™ism.hµ
"

24 
	~"›ti⁄s.hµ
"

26 
«me•a˚
 
	gzmq


29 
˛ass
 
	gmsg_t
;

30 
˛ass
 
	g£ssi⁄_ba£_t
;

32 ˛as†
	cnuŒ_mech™ism_t
 : 
public
 
mech™ism_t


34 
public
:

36 
nuŒ_mech™ism_t
 (
£ssi⁄_ba£_t
 *
£ssi⁄_
,

37 c⁄° 
°d
::
°rög
 &
≥î_addªss
,

38 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

39 
	gvútuÆ
 ~
nuŒ_mech™ism_t
 ();

42 
vútuÆ
 
√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
);

43 
vútuÆ
 
¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
);

44 
vútuÆ
 
z≠_msg_avaûabÀ
 ();

45 
vútuÆ
 
boﬁ
 
is_h™dshake_com∂ëe
 () const;

47 
	g¥iv©e
:

49 
£ssi⁄_ba£_t
 * c⁄° 
£ssi⁄
;

51 c⁄° 
	g°d
::
°rög
 
≥î_addªss
;

53 
boﬁ
 
	gªady_comm™d_£¡
;

54 
boﬁ
 
	gªady_comm™d_ª˚ived
;

55 
boﬁ
 
	gz≠_c⁄√˘ed
;

56 
boﬁ
 
	gz≠_ªque°_£¡
;

57 
boﬁ
 
	gz≠_ª∂y_ª˚ived
;

59 
£nd_z≠_ªque°
 ();

60 
ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

	@object.cpp

20 
	~<°rög.h
>

21 
	~<°d¨g.h
>

23 
	~"obje˘.hµ
"

24 
	~"˘x.hµ
"

25 
	~"îr.hµ
"

26 
	~"pùe.hµ
"

27 
	~"io_thªad.hµ
"

28 
	~"£ssi⁄_ba£.hµ
"

29 
	~"sockë_ba£.hµ
"

31 
	gzmq
::
obje˘_t
::
	$obje˘_t
 (
˘x_t
 *
˘x_
, 
uöt32_t
 
tid_
) :

32 
	`˘x
 (
˘x_
),

33 
	$tid
 (
tid_
)

35 
	}
}

37 
	gzmq
::
obje˘_t
::
	$obje˘_t
 (
obje˘_t
 *
∑ª¡_
) :

38 
	`˘x
 (
∑ª¡_
->
˘x
),

39 
	`tid
 (
∑ª¡_
->
tid
)

41 
	}
}

43 
	gzmq
::
obje˘_t
::~
	$obje˘_t
 ()

45 
	}
}

47 
uöt32_t
 
zmq
::
obje˘_t
::
	$gë_tid
 ()

49  
tid
;

50 
	}
}

52 
	gzmq
::
obje˘_t
::
	$£t_tid
(
uöt32_t
 
id
)

54 
tid
 = 
id
;

55 
	}
}

57 
	gzmq
::
˘x_t
 *
zmq
::
obje˘_t
::
	$gë_˘x
 ()

59  
˘x
;

60 
	}
}

62 
	gzmq
::
obje˘_t
::
	$¥o˚ss_comm™d
 (
comm™d_t
 &
cmd_
)

64 
cmd_
.
ty≥
) {

66 
comm™d_t
::
a˘iv©e_ªad
:

67 
	`¥o˚ss_a˘iv©e_ªad
 ();

70 
comm™d_t
::
a˘iv©e_wrôe
:

71 
	`¥o˚ss_a˘iv©e_wrôe
 (
cmd_
.
¨gs
.
a˘iv©e_wrôe
.
msgs_ªad
);

74 
comm™d_t
::
°›
:

75 
	`¥o˚ss_°›
 ();

78 
comm™d_t
::
∂ug
:

79 
	`¥o˚ss_∂ug
 ();

80 
	`¥o˚ss_£qnum
 ();

83 
comm™d_t
::
own
:

84 
	`¥o˚ss_own
 (
cmd_
.
¨gs
.
own
.
obje˘
);

85 
	`¥o˚ss_£qnum
 ();

88 
comm™d_t
::
©èch
:

89 
	`¥o˚ss_©èch
 (
cmd_
.
¨gs
.
©èch
.
ígöe
);

90 
	`¥o˚ss_£qnum
 ();

93 
comm™d_t
::
böd
:

94 
	`¥o˚ss_böd
 (
cmd_
.
¨gs
.
böd
.
pùe
);

95 
	`¥o˚ss_£qnum
 ();

98 
comm™d_t
::
hiccup
:

99 
	`¥o˚ss_hiccup
 (
cmd_
.
¨gs
.
hiccup
.
pùe
);

102 
comm™d_t
::
pùe_ãrm
:

103 
	`¥o˚ss_pùe_ãrm
 ();

106 
comm™d_t
::
pùe_ãrm_ack
:

107 
	`¥o˚ss_pùe_ãrm_ack
 ();

110 
comm™d_t
::
ãrm_ªq
:

111 
	`¥o˚ss_ãrm_ªq
 (
cmd_
.
¨gs
.
ãrm_ªq
.
obje˘
);

114 
comm™d_t
::
ãrm
:

115 
	`¥o˚ss_ãrm
 (
cmd_
.
¨gs
.
ãrm
.
lögî
);

118 
comm™d_t
::
ãrm_ack
:

119 
	`¥o˚ss_ãrm_ack
 ();

122 
comm™d_t
::
ª≠
:

123 
	`¥o˚ss_ª≠
 (
cmd_
.
¨gs
.
ª≠
.
sockë
);

126 
comm™d_t
::
ª≠ed
:

127 
	`¥o˚ss_ª≠ed
 ();

130 
comm™d_t
::
ö¥oc_c⁄√˘ed
:

131 
	`¥o˚ss_£qnum
 ();

134 
comm™d_t
::
d⁄e
:

136 
	`zmq_as£π
 (
Ál£
);

138 
	}
}

140 
	gzmq
::
obje˘_t
::
	$ªgi°î_ídpoöt
 (c⁄° *
addr_
, 
ídpoöt_t
 &
ídpoöt_
)

142  
˘x
->
	`ªgi°î_ídpoöt
 (
addr_
, 
ídpoöt_
);

143 
	}
}

145 
	gzmq
::
obje˘_t
::
	$uƒegi°î_ídpoöts
 (
sockë_ba£_t
 *
sockë_
)

147  
˘x
->
	`uƒegi°î_ídpoöts
 (
sockë_
);

148 
	}
}

150 
	gzmq
::
ídpoöt_t
 
zmq
::
obje˘_t
::
	$föd_ídpoöt
 (c⁄° *
addr_
)

152  
˘x
->
	`föd_ídpoöt
 (
addr_
);

153 
	}
}

155 
	gzmq
::
obje˘_t
::
	$≥nd_c⁄√˘i⁄
 (c⁄° *
addr_
, 
≥ndög_c⁄√˘i⁄_t
 &
≥ndög_c⁄√˘i⁄_
)

157 
˘x
->
	`≥nd_c⁄√˘i⁄
 (
addr_
, 
≥ndög_c⁄√˘i⁄_
);

158 
	}
}

160 
	gzmq
::
obje˘_t
::
	$c⁄√˘_≥ndög
 (c⁄° *
addr_
, 
zmq
::
sockë_ba£_t
 *
böd_sockë_
)

162  
˘x
->
	`c⁄√˘_≥ndög
(
addr_
, 
böd_sockë_
);

163 
	}
}

165 
	gzmq
::
obje˘_t
::
	$de°roy_sockë
 (
sockë_ba£_t
 *
sockë_
)

167 
˘x
->
	`de°roy_sockë
 (
sockë_
);

168 
	}
}

170 
	gzmq
::
io_thªad_t
 *
zmq
::
obje˘_t
::
	$choo£_io_thªad
 (
uöt64_t
 
afföôy_
)

172  
˘x
->
	`choo£_io_thªad
 (
afföôy_
);

173 
	}
}

175 
	gzmq
::
obje˘_t
::
	$£nd_°›
 ()

179 
comm™d_t
 
cmd
;

180 
cmd
.
de°ö©i⁄
 = 
this
;

181 
cmd
.
ty≥
 = 
comm™d_t
::
°›
;

182 
˘x
->
	`£nd_comm™d
 (
tid
, 
cmd
);

183 
	}
}

185 
	gzmq
::
obje˘_t
::
	$£nd_∂ug
 (
own_t
 *
de°ö©i⁄_
, 
boﬁ
 
öc_£qnum_
)

187 i‡(
öc_£qnum_
)

188 
de°ö©i⁄_
->
	`öc_£qnum
 ();

190 
comm™d_t
 
cmd
;

191 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

192 
cmd
.
ty≥
 = 
comm™d_t
::
∂ug
;

193 
	`£nd_comm™d
 (
cmd
);

194 
	}
}

196 
	gzmq
::
obje˘_t
::
	$£nd_own
 (
own_t
 *
de°ö©i⁄_
, own_à*
obje˘_
)

198 
de°ö©i⁄_
->
	`öc_£qnum
 ();

199 
comm™d_t
 
cmd
;

200 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

201 
cmd
.
ty≥
 = 
comm™d_t
::
own
;

202 
cmd
.
¨gs
.
own
.
obje˘
 = 
obje˘_
;

203 
	`£nd_comm™d
 (
cmd
);

204 
	}
}

206 
	gzmq
::
obje˘_t
::
	$£nd_©èch
 (
£ssi⁄_ba£_t
 *
de°ö©i⁄_
,

207 
i_ígöe
 *
ígöe_
, 
boﬁ
 
öc_£qnum_
)

209 i‡(
öc_£qnum_
)

210 
de°ö©i⁄_
->
	`öc_£qnum
 ();

212 
comm™d_t
 
cmd
;

213 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

214 
cmd
.
ty≥
 = 
comm™d_t
::
©èch
;

215 
cmd
.
¨gs
.
©èch
.
ígöe
 = 
ígöe_
;

216 
	`£nd_comm™d
 (
cmd
);

217 
	}
}

219 
	gzmq
::
obje˘_t
::
	$£nd_böd
 (
own_t
 *
de°ö©i⁄_
, 
pùe_t
 *
pùe_
,

220 
boﬁ
 
öc_£qnum_
)

222 i‡(
öc_£qnum_
)

223 
de°ö©i⁄_
->
	`öc_£qnum
 ();

225 
comm™d_t
 
cmd
;

226 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

227 
cmd
.
ty≥
 = 
comm™d_t
::
böd
;

228 
cmd
.
¨gs
.
böd
.
pùe
 = 
pùe_
;

229 
	`£nd_comm™d
 (
cmd
);

230 
	}
}

232 
	gzmq
::
obje˘_t
::
	$£nd_a˘iv©e_ªad
 (
pùe_t
 *
de°ö©i⁄_
)

234 
comm™d_t
 
cmd
;

235 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

236 
cmd
.
ty≥
 = 
comm™d_t
::
a˘iv©e_ªad
;

237 
	`£nd_comm™d
 (
cmd
);

238 
	}
}

240 
	gzmq
::
obje˘_t
::
	$£nd_a˘iv©e_wrôe
 (
pùe_t
 *
de°ö©i⁄_
,

241 
uöt64_t
 
msgs_ªad_
)

243 
comm™d_t
 
cmd
;

244 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

245 
cmd
.
ty≥
 = 
comm™d_t
::
a˘iv©e_wrôe
;

246 
cmd
.
¨gs
.
a˘iv©e_wrôe
.
msgs_ªad
 = 
msgs_ªad_
;

247 
	`£nd_comm™d
 (
cmd
);

248 
	}
}

250 
	gzmq
::
obje˘_t
::
	$£nd_hiccup
 (
pùe_t
 *
de°ö©i⁄_
, *
pùe_
)

252 
comm™d_t
 
cmd
;

253 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

254 
cmd
.
ty≥
 = 
comm™d_t
::
hiccup
;

255 
cmd
.
¨gs
.
hiccup
.
pùe
 = 
pùe_
;

256 
	`£nd_comm™d
 (
cmd
);

257 
	}
}

259 
	gzmq
::
obje˘_t
::
	$£nd_pùe_ãrm
 (
pùe_t
 *
de°ö©i⁄_
)

261 
comm™d_t
 
cmd
;

262 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

263 
cmd
.
ty≥
 = 
comm™d_t
::
pùe_ãrm
;

264 
	`£nd_comm™d
 (
cmd
);

265 
	}
}

267 
	gzmq
::
obje˘_t
::
	$£nd_pùe_ãrm_ack
 (
pùe_t
 *
de°ö©i⁄_
)

269 
comm™d_t
 
cmd
;

270 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

271 
cmd
.
ty≥
 = 
comm™d_t
::
pùe_ãrm_ack
;

272 
	`£nd_comm™d
 (
cmd
);

273 
	}
}

275 
	gzmq
::
obje˘_t
::
	$£nd_ãrm_ªq
 (
own_t
 *
de°ö©i⁄_
,

276 
own_t
 *
obje˘_
)

278 
comm™d_t
 
cmd
;

279 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

280 
cmd
.
ty≥
 = 
comm™d_t
::
ãrm_ªq
;

281 
cmd
.
¨gs
.
ãrm_ªq
.
obje˘
 = 
obje˘_
;

282 
	`£nd_comm™d
 (
cmd
);

283 
	}
}

285 
	gzmq
::
obje˘_t
::
	$£nd_ãrm
 (
own_t
 *
de°ö©i⁄_
, 
lögî_
)

287 
comm™d_t
 
cmd
;

288 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

289 
cmd
.
ty≥
 = 
comm™d_t
::
ãrm
;

290 
cmd
.
¨gs
.
ãrm
.
lögî
 = 
lögî_
;

291 
	`£nd_comm™d
 (
cmd
);

292 
	}
}

294 
	gzmq
::
obje˘_t
::
	$£nd_ãrm_ack
 (
own_t
 *
de°ö©i⁄_
)

296 
comm™d_t
 
cmd
;

297 
cmd
.
de°ö©i⁄
 = 
de°ö©i⁄_
;

298 
cmd
.
ty≥
 = 
comm™d_t
::
ãrm_ack
;

299 
	`£nd_comm™d
 (
cmd
);

300 
	}
}

302 
	gzmq
::
obje˘_t
::
	$£nd_ª≠
 (
˛ass
 
sockë_ba£_t
 *
sockë_
)

304 
comm™d_t
 
cmd
;

305 
cmd
.
de°ö©i⁄
 = 
˘x
->
	`gë_ª≠î
 ();

306 
cmd
.
ty≥
 = 
comm™d_t
::
ª≠
;

307 
cmd
.
¨gs
.
ª≠
.
sockë
 = 
sockë_
;

308 
	`£nd_comm™d
 (
cmd
);

309 
	}
}

311 
	gzmq
::
obje˘_t
::
	$£nd_ª≠ed
 ()

313 
comm™d_t
 
cmd
;

314 
cmd
.
de°ö©i⁄
 = 
˘x
->
	`gë_ª≠î
 ();

315 
cmd
.
ty≥
 = 
comm™d_t
::
ª≠ed
;

316 
	`£nd_comm™d
 (
cmd
);

317 
	}
}

319 
	gzmq
::
obje˘_t
::
	$£nd_ö¥oc_c⁄√˘ed
 (
zmq
::
sockë_ba£_t
 *
sockë_
)

321 
comm™d_t
 
cmd
;

322 
cmd
.
de°ö©i⁄
 = 
sockë_
;

323 
cmd
.
ty≥
 = 
comm™d_t
::
ö¥oc_c⁄√˘ed
;

324 
	`£nd_comm™d
 (
cmd
);

325 
	}
}

327 
	gzmq
::
obje˘_t
::
	$£nd_d⁄e
 ()

329 
comm™d_t
 
cmd
;

330 
cmd
.
de°ö©i⁄
 = 
NULL
;

331 
cmd
.
ty≥
 = 
comm™d_t
::
d⁄e
;

332 
˘x
->
	`£nd_comm™d
 (
˘x_t
::
ãrm_tid
, 
cmd
);

333 
	}
}

335 
	gzmq
::
obje˘_t
::
	$¥o˚ss_°›
 ()

337 
	`zmq_as£π
 (
Ál£
);

338 
	}
}

340 
	gzmq
::
obje˘_t
::
	$¥o˚ss_∂ug
 ()

342 
	`zmq_as£π
 (
Ál£
);

343 
	}
}

345 
	gzmq
::
obje˘_t
::
	$¥o˚ss_own
 (
own_t
 *)

347 
	`zmq_as£π
 (
Ál£
);

348 
	}
}

350 
	gzmq
::
obje˘_t
::
	$¥o˚ss_©èch
 (
i_ígöe
 *)

352 
	`zmq_as£π
 (
Ál£
);

353 
	}
}

355 
	gzmq
::
obje˘_t
::
	$¥o˚ss_böd
 (
pùe_t
 *)

357 
	`zmq_as£π
 (
Ál£
);

358 
	}
}

360 
	gzmq
::
obje˘_t
::
	$¥o˚ss_a˘iv©e_ªad
 ()

362 
	`zmq_as£π
 (
Ál£
);

363 
	}
}

365 
	gzmq
::
obje˘_t
::
	$¥o˚ss_a˘iv©e_wrôe
 (
uöt64_t
)

367 
	`zmq_as£π
 (
Ál£
);

368 
	}
}

370 
	gzmq
::
obje˘_t
::
	$¥o˚ss_hiccup
 (*)

372 
	`zmq_as£π
 (
Ál£
);

373 
	}
}

375 
	gzmq
::
obje˘_t
::
	$¥o˚ss_pùe_ãrm
 ()

377 
	`zmq_as£π
 (
Ál£
);

378 
	}
}

380 
	gzmq
::
obje˘_t
::
	$¥o˚ss_pùe_ãrm_ack
 ()

382 
	`zmq_as£π
 (
Ál£
);

383 
	}
}

385 
	gzmq
::
obje˘_t
::
	$¥o˚ss_ãrm_ªq
 (
own_t
 *)

387 
	`zmq_as£π
 (
Ál£
);

388 
	}
}

390 
	gzmq
::
obje˘_t
::
	$¥o˚ss_ãrm
 ()

392 
	`zmq_as£π
 (
Ál£
);

393 
	}
}

395 
	gzmq
::
obje˘_t
::
	$¥o˚ss_ãrm_ack
 ()

397 
	`zmq_as£π
 (
Ál£
);

398 
	}
}

400 
	gzmq
::
obje˘_t
::
	$¥o˚ss_ª≠
 (
˛ass
 
sockë_ba£_t
 *)

402 
	`zmq_as£π
 (
Ál£
);

403 
	}
}

405 
	gzmq
::
obje˘_t
::
	$¥o˚ss_ª≠ed
 ()

407 
	`zmq_as£π
 (
Ál£
);

408 
	}
}

410 
	gzmq
::
obje˘_t
::
	$¥o˚ss_£qnum
 ()

412 
	`zmq_as£π
 (
Ál£
);

413 
	}
}

415 
	gzmq
::
obje˘_t
::
	$£nd_comm™d
 (
comm™d_t
 &
cmd_
)

417 
˘x
->
	`£nd_comm™d
 (
cmd_
.
de°ö©i⁄
->
	`gë_tid
 (), cmd_);

418 
	}
}

	@object.hpp

20 #i‚de‡
__ZMQ_OBJECT_HPP_INCLUDED__


21 
	#__ZMQ_OBJECT_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


28 
	gi_ígöe
;

29 
	gídpoöt_t
;

30 
	g≥ndög_c⁄√˘i⁄_t
;

31 
	gcomm™d_t
;

32 
˛ass
 
	g˘x_t
;

33 
˛ass
 
	gpùe_t
;

34 
˛ass
 
	gsockë_ba£_t
;

35 
˛ass
 
	g£ssi⁄_ba£_t
;

36 
˛ass
 
	gio_thªad_t
;

37 
˛ass
 
	gown_t
;

42 ˛as†
	cobje˘_t


44 
	gpublic
:

46 
obje˘_t
 (
zmq
::
˘x_t
 *
˘x_
, 
uöt32_t
 
tid_
);

47 
obje˘_t
 (obje˘_à*
∑ª¡_
);

48 
	gvútuÆ
 ~
obje˘_t
 ();

50 
uöt32_t
 
gë_tid
 ();

51 
£t_tid
(
uöt32_t
 
id
);

52 
˘x_t
 *
gë_˘x
 ();

53 
¥o˚ss_comm™d
 (
zmq
::
comm™d_t
 &
cmd_
);

54 
£nd_ö¥oc_c⁄√˘ed
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

55 
£nd_böd
 (
zmq
::
own_t
 *
de°ö©i⁄_
, zmq::
pùe_t
 *
pùe_
, 
boﬁ
 
öc_£qnum_
 = 
åue
);

57 
	g¥Ÿe˘ed
:

61 
ªgi°î_ídpoöt
 (c⁄° *
addr_
, 
zmq
::
ídpoöt_t
 &
ídpoöt_
);

62 
uƒegi°î_ídpoöts
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

63 
	gzmq
::
ídpoöt_t
 
föd_ídpoöt
 (c⁄° *
addr_
);

64 
≥nd_c⁄√˘i⁄
 (c⁄° *
addr_
, 
≥ndög_c⁄√˘i⁄_t
 &
≥ndög_c⁄√˘i⁄_
);

65 
c⁄√˘_≥ndög
 (c⁄° *
addr_
, 
zmq
::
sockë_ba£_t
 *
böd_sockë_
);

67 
de°roy_sockë
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

70 
log
 (c⁄° *
f‹m©_
, ...);

73 
	gzmq
::
io_thªad_t
 *
choo£_io_thªad
 (
uöt64_t
 
afföôy_
);

77 
£nd_°›
 ();

78 
£nd_∂ug
 (
zmq
::
own_t
 *
de°ö©i⁄_
,

79 
boﬁ
 
öc_£qnum_
 = 
åue
);

80 
£nd_own
 (
zmq
::
own_t
 *
de°ö©i⁄_
,

81 
zmq
::
own_t
 *
obje˘_
);

82 
£nd_©èch
 (
zmq
::
£ssi⁄_ba£_t
 *
de°ö©i⁄_
,

83 
zmq
::
i_ígöe
 *
ígöe_
, 
boﬁ
 
öc_£qnum_
 = 
åue
);

84 
£nd_a˘iv©e_ªad
 (
zmq
::
pùe_t
 *
de°ö©i⁄_
);

85 
£nd_a˘iv©e_wrôe
 (
zmq
::
pùe_t
 *
de°ö©i⁄_
,

86 
uöt64_t
 
msgs_ªad_
);

87 
£nd_hiccup
 (
zmq
::
pùe_t
 *
de°ö©i⁄_
, *
pùe_
);

88 
£nd_pùe_ãrm
 (
zmq
::
pùe_t
 *
de°ö©i⁄_
);

89 
£nd_pùe_ãrm_ack
 (
zmq
::
pùe_t
 *
de°ö©i⁄_
);

90 
£nd_ãrm_ªq
 (
zmq
::
own_t
 *
de°ö©i⁄_
,

91 
zmq
::
own_t
 *
obje˘_
);

92 
£nd_ãrm
 (
zmq
::
own_t
 *
de°ö©i⁄_
, 
lögî_
);

93 
£nd_ãrm_ack
 (
zmq
::
own_t
 *
de°ö©i⁄_
);

94 
£nd_ª≠
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

95 
£nd_ª≠ed
 ();

96 
£nd_d⁄e
 ();

100 
vútuÆ
 
¥o˚ss_°›
 ();

101 
vútuÆ
 
¥o˚ss_∂ug
 ();

102 
vútuÆ
 
¥o˚ss_own
 (
zmq
::
own_t
 *
obje˘_
);

103 
vútuÆ
 
¥o˚ss_©èch
 (
zmq
::
i_ígöe
 *
ígöe_
);

104 
vútuÆ
 
¥o˚ss_böd
 (
zmq
::
pùe_t
 *
pùe_
);

105 
vútuÆ
 
¥o˚ss_a˘iv©e_ªad
 ();

106 
vútuÆ
 
¥o˚ss_a˘iv©e_wrôe
 (
uöt64_t
 
msgs_ªad_
);

107 
vútuÆ
 
¥o˚ss_hiccup
 (*
pùe_
);

108 
vútuÆ
 
¥o˚ss_pùe_ãrm
 ();

109 
vútuÆ
 
¥o˚ss_pùe_ãrm_ack
 ();

110 
vútuÆ
 
¥o˚ss_ãrm_ªq
 (
zmq
::
own_t
 *
obje˘_
);

111 
vútuÆ
 
¥o˚ss_ãrm
 (
lögî_
);

112 
vútuÆ
 
¥o˚ss_ãrm_ack
 ();

113 
vútuÆ
 
¥o˚ss_ª≠
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

114 
vútuÆ
 
¥o˚ss_ª≠ed
 ();

119 
vútuÆ
 
¥o˚ss_£qnum
 ();

121 
	g¥iv©e
:

124 
zmq
::
˘x_t
 *
˘x
;

127 
uöt32_t
 
	gtid
;

129 
£nd_comm™d
 (
comm™d_t
 &
cmd_
);

131 
obje˘_t
 (const object_t&);

132 c⁄° 
	gobje˘_t
 &
	g›î©‹
 = (c⁄° 
obje˘_t
&);

	@options.cpp

20 
	~<°rög.h
>

22 
	~"›ti⁄s.hµ
"

23 
	~"îr.hµ
"

24 
	~"../ö˛ude/zmq_utûs.h
"

26 
	gzmq
::
›ti⁄s_t
::
	$›ti⁄s_t
 () :

27 
	`¢dhwm
 (1000),

28 
	`rcvhwm
 (1000),

29 
	`afföôy
 (0),

30 
	`idítôy_size
 (0),

31 
	`øã
 (100),

32 
	`ªcovîy_ivl
 (10000),

33 
	`mu…iˇ°_h›s
 (1),

34 
	`¢dbuf
 (0),

35 
	`rcvbuf
 (0),

36 
	`ty≥
 (-1),

37 
	`lögî
 (-1),

38 
	`ªc⁄√˘_ivl
 (100),

39 
	`ªc⁄√˘_ivl_max
 (0),

40 
	`backlog
 (100),

41 
	`maxmsgsize
 (-1),

42 
	`rcvtimeo
 (-1),

43 
	`¢dtimeo
 (-1),

44 
	`ùv6
 (0),

45 
	`immedüã
 (0),

46 
	`fûãr
 (
Ál£
),

47 
	`ªcv_idítôy
 (
Ál£
),

48 
	`øw_sock
 (
Ál£
),

49 
	`t˝_kì∑live
 (-1),

50 
	`t˝_kì∑live_˙t
 (-1),

51 
	`t˝_kì∑live_idÀ
 (-1),

52 
	`t˝_kì∑live_ötvl
 (-1),

53 
	`mech™ism
 (
ZMQ_NULL
),

54 
	`as_£rvî
 (0),

55 
	`sockë_id
 (0),

56 
	$c⁄Ê©e
 (
Ál£
)

58 
	}
}

60 
	gzmq
::
›ti⁄s_t
::
	$£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

61 
size_t
 
›tvÆÀn_
)

63 
boﬁ
 
is_öt
 = (
›tvÆÀn_
 ==  ());

64 
vÆue
 = 
is_öt
? *((*Ë
›tvÆ_
): 0;

66 
›ti⁄_
) {

67 
ZMQ_SNDHWM
:

68 i‡(
is_öt
 && 
vÆue
 >= 0) {

69 
¢dhwm
 = 
vÆue
;

74 
ZMQ_RCVHWM
:

75 i‡(
is_öt
 && 
vÆue
 >= 0) {

76 
rcvhwm
 = 
vÆue
;

81 
ZMQ_AFFINITY
:

82 i‡(
›tvÆÀn_
 = (
uöt64_t
)) {

83 
afföôy
 = *((
uöt64_t
*Ë
›tvÆ_
);

88 
ZMQ_IDENTITY
:

92 i‡(
›tvÆÀn_
 > 0 && optvallen_ < 256

93 && *((c⁄° *Ë
›tvÆ_
) != 0) {

94 
idítôy_size
 = 
›tvÆÀn_
;

95 
	`mem˝y
 (
idítôy
, 
›tvÆ_
, 
idítôy_size
);

100 
ZMQ_RATE
:

101 i‡(
is_öt
 && 
vÆue
 > 0) {

102 
øã
 = 
vÆue
;

107 
ZMQ_RECOVERY_IVL
:

108 i‡(
is_öt
 && 
vÆue
 >= 0) {

109 
ªcovîy_ivl
 = 
vÆue
;

114 
ZMQ_SNDBUF
:

115 i‡(
is_öt
 && 
vÆue
 >= 0) {

116 
¢dbuf
 = 
vÆue
;

121 
ZMQ_RCVBUF
:

122 i‡(
is_öt
 && 
vÆue
 >= 0) {

123 
rcvbuf
 = 
vÆue
;

128 
ZMQ_LINGER
:

129 i‡(
is_öt
 && 
vÆue
 >= -1) {

130 
lögî
 = 
vÆue
;

135 
ZMQ_RECONNECT_IVL
:

136 i‡(
is_öt
 && 
vÆue
 >= -1) {

137 
ªc⁄√˘_ivl
 = 
vÆue
;

142 
ZMQ_RECONNECT_IVL_MAX
:

143 i‡(
is_öt
 && 
vÆue
 >= 0) {

144 
ªc⁄√˘_ivl_max
 = 
vÆue
;

149 
ZMQ_BACKLOG
:

150 i‡(
is_öt
 && 
vÆue
 >= 0) {

151 
backlog
 = 
vÆue
;

156 
ZMQ_MAXMSGSIZE
:

157 i‡(
›tvÆÀn_
 = (
öt64_t
)) {

158 
maxmsgsize
 = *((
öt64_t
 *Ë
›tvÆ_
);

163 
ZMQ_MULTICAST_HOPS
:

164 i‡(
is_öt
 && 
vÆue
 > 0) {

165 
mu…iˇ°_h›s
 = 
vÆue
;

170 
ZMQ_RCVTIMEO
:

171 i‡(
is_öt
 && 
vÆue
 >= -1) {

172 
rcvtimeo
 = 
vÆue
;

177 
ZMQ_SNDTIMEO
:

178 i‡(
is_öt
 && 
vÆue
 >= -1) {

179 
¢dtimeo
 = 
vÆue
;

185 
ZMQ_IPV4ONLY
:

186 i‡(
is_öt
 && (
vÆue
 == 0 || value == 1)) {

187 
ùv6
 = (
vÆue
 == 0);

193 
ZMQ_IPV6
:

194 i‡(
is_öt
 && (
vÆue
 == 0 || value == 1)) {

195 
ùv6
 = (
vÆue
 != 0);

200 
ZMQ_TCP_KEEPALIVE
:

201 i‡(
is_öt
 && (
vÆue
 >= -1 || value <= 1)) {

202 
t˝_kì∑live
 = 
vÆue
;

207 
ZMQ_TCP_KEEPALIVE_CNT
:

208 i‡(
is_öt
 && (
vÆue
 == -1 || value >= 0)) {

209 
t˝_kì∑live_˙t
 = 
vÆue
;

214 
ZMQ_TCP_KEEPALIVE_IDLE
:

215 i‡(
is_öt
 && (
vÆue
 == -1 || value >= 0)) {

216 
t˝_kì∑live_idÀ
 = 
vÆue
;

221 
ZMQ_TCP_KEEPALIVE_INTVL
:

222 i‡(
is_öt
 && (
vÆue
 == -1 || value >= 0)) {

223 
t˝_kì∑live_ötvl
 = 
vÆue
;

228 
ZMQ_IMMEDIATE
:

229 i‡(
is_öt
 && (
vÆue
 == 0 || value == 1)) {

230 
immedüã
 = 
vÆue
;

235 
ZMQ_TCP_ACCEPT_FILTER
:

236 i‡(
›tvÆÀn_
 =0 && 
›tvÆ_
 =
NULL
) {

237 
t˝_ac˚±_fûãrs
.
	`˛ór
 ();

241 i‡(
›tvÆÀn_
 > 0 && o±vÆÀn_ < 256 && 
›tvÆ_
 !
NULL
 && *((const *) optval_) != 0) {

242 
°d
::
°rög
 
	`fûãr_°r
 ((c⁄° *Ë
›tvÆ_
, 
›tvÆÀn_
);

243 
t˝_addªss_mask_t
 
mask
;

244 
rc
 = 
mask
.
	`ªsﬁve
 (
fûãr_°r
.
	`c_°r
 (), 
ùv6
);

245 i‡(
rc
 == 0) {

246 
t˝_ac˚±_fûãrs
.
	`push_back
 (
mask
);

252 
ZMQ_PLAIN_SERVER
:

253 i‡(
is_öt
 && (
vÆue
 == 0 || value == 1)) {

254 
as_£rvî
 = 
vÆue
;

255 
mech™ism
 = 
vÆue
? 
ZMQ_PLAIN
: 
ZMQ_NULL
;

260 
ZMQ_PLAIN_USERNAME
:

261 i‡(
›tvÆÀn_
 =0 && 
›tvÆ_
 =
NULL
) {

262 
mech™ism
 = 
ZMQ_NULL
;

266 i‡(
›tvÆÀn_
 > 0 && o±vÆÀn_ < 256 && 
›tvÆ_
 !
NULL
) {

267 
∂aö_u£∫ame
.
	`assign
 ((c⁄° *Ë
›tvÆ_
, 
›tvÆÀn_
);

268 
as_£rvî
 = 0;

269 
mech™ism
 = 
ZMQ_PLAIN
;

274 
ZMQ_PLAIN_PASSWORD
:

275 i‡(
›tvÆÀn_
 =0 && 
›tvÆ_
 =
NULL
) {

276 
mech™ism
 = 
ZMQ_NULL
;

280 i‡(
›tvÆÀn_
 > 0 && o±vÆÀn_ < 256 && 
›tvÆ_
 !
NULL
) {

281 
∂aö_∑ssw‹d
.
	`assign
 ((c⁄° *Ë
›tvÆ_
, 
›tvÆÀn_
);

282 
as_£rvî
 = 0;

283 
mech™ism
 = 
ZMQ_PLAIN
;

288 
ZMQ_ZAP_DOMAIN
:

289 i‡(
›tvÆÀn_
 < 256) {

290 
z≠_domaö
.
	`assign
 ((c⁄° *Ë
›tvÆ_
, 
›tvÆÀn_
);

296 #ifde‡
HAVE_LIBSODIUM


297 
ZMQ_CURVE_SERVER
:

298 i‡(
is_öt
 && (
vÆue
 == 0 || value == 1)) {

299 
as_£rvî
 = 
vÆue
;

300 
mech™ism
 = 
vÆue
? 
ZMQ_CURVE
: 
ZMQ_NULL
;

305 
ZMQ_CURVE_PUBLICKEY
:

306 i‡(
›tvÆÀn_
 =
CURVE_KEYSIZE
) {

307 
	`mem˝y
 (
curve_public_key
, 
›tvÆ_
, 
CURVE_KEYSIZE
);

308 
mech™ism
 = 
ZMQ_CURVE
;

312 i‡(
›tvÆÀn_
 =
CURVE_KEYSIZE_Z85
) {

313 
	`zmq_z85_decode
 (
curve_public_key
, (*Ë
›tvÆ_
);

314 
mech™ism
 = 
ZMQ_CURVE
;

319 
ZMQ_CURVE_SECRETKEY
:

320 i‡(
›tvÆÀn_
 =
CURVE_KEYSIZE
) {

321 
	`mem˝y
 (
curve_£¸ë_key
, 
›tvÆ_
, 
CURVE_KEYSIZE
);

322 
mech™ism
 = 
ZMQ_CURVE
;

326 i‡(
›tvÆÀn_
 =
CURVE_KEYSIZE_Z85
) {

327 
	`zmq_z85_decode
 (
curve_£¸ë_key
, (*Ë
›tvÆ_
);

328 
mech™ism
 = 
ZMQ_CURVE
;

333 
ZMQ_CURVE_SERVERKEY
:

334 i‡(
›tvÆÀn_
 =
CURVE_KEYSIZE
) {

335 
	`mem˝y
 (
curve_£rvî_key
, 
›tvÆ_
, 
CURVE_KEYSIZE
);

336 
as_£rvî
 = 0;

337 
mech™ism
 = 
ZMQ_CURVE
;

341 i‡(
›tvÆÀn_
 =
CURVE_KEYSIZE_Z85
) {

342 
	`zmq_z85_decode
 (
curve_£rvî_key
, (*Ë
›tvÆ_
);

343 
as_£rvî
 = 0;

344 
mech™ism
 = 
ZMQ_CURVE
;

350 
ZMQ_CONFLATE
:

351 i‡(
is_öt
 && (
vÆue
 == 0 || value == 1)) {

352 
c⁄Ê©e
 = (
vÆue
 != 0);

360 
î∫o
 = 
EINVAL
;

362 
	}
}

364 
	gzmq
::
›ti⁄s_t
::
	$gësock›t
 (
›ti⁄_
, *
›tvÆ_
, 
size_t
 *
›tvÆÀn_
)

366 
boﬁ
 
is_öt
 = (*
›tvÆÀn_
 ==  ());

367 *
vÆue
 = (*Ë
›tvÆ_
;

369 
›ti⁄_
) {

370 
ZMQ_SNDHWM
:

371 i‡(
is_öt
) {

372 *
vÆue
 = 
¢dhwm
;

377 
ZMQ_RCVHWM
:

378 i‡(
is_öt
) {

379 *
vÆue
 = 
rcvhwm
;

384 
ZMQ_AFFINITY
:

385 i‡(*
›tvÆÀn_
 = (
uöt64_t
)) {

386 *((
uöt64_t
 *Ë
›tvÆ_
Ë
afföôy
;

391 
ZMQ_IDENTITY
:

392 i‡(*
›tvÆÀn_
 >
idítôy_size
) {

393 
	`mem˝y
 (
›tvÆ_
, 
idítôy
, 
idítôy_size
);

394 *
›tvÆÀn_
 = 
idítôy_size
;

399 
ZMQ_RATE
:

400 i‡(
is_öt
) {

401 *
vÆue
 = 
øã
;

406 
ZMQ_RECOVERY_IVL
:

407 i‡(
is_öt
) {

408 *
vÆue
 = 
ªcovîy_ivl
;

413 
ZMQ_SNDBUF
:

414 i‡(
is_öt
) {

415 *
vÆue
 = 
¢dbuf
;

420 
ZMQ_RCVBUF
:

421 i‡(
is_öt
) {

422 *
vÆue
 = 
rcvbuf
;

427 
ZMQ_TYPE
:

428 i‡(
is_öt
) {

429 *
vÆue
 = 
ty≥
;

434 
ZMQ_LINGER
:

435 i‡(
is_öt
) {

436 *
vÆue
 = 
lögî
;

441 
ZMQ_RECONNECT_IVL
:

442 i‡(
is_öt
) {

443 *
vÆue
 = 
ªc⁄√˘_ivl
;

448 
ZMQ_RECONNECT_IVL_MAX
:

449 i‡(
is_öt
) {

450 *
vÆue
 = 
ªc⁄√˘_ivl_max
;

455 
ZMQ_BACKLOG
:

456 i‡(
is_öt
) {

457 *
vÆue
 = 
backlog
;

462 
ZMQ_MAXMSGSIZE
:

463 i‡(*
›tvÆÀn_
 = (
öt64_t
)) {

464 *((
öt64_t
 *Ë
›tvÆ_
Ë
maxmsgsize
;

465 *
›tvÆÀn_
 =  (
öt64_t
);

470 
ZMQ_MULTICAST_HOPS
:

471 i‡(
is_öt
) {

472 *
vÆue
 = 
mu…iˇ°_h›s
;

477 
ZMQ_RCVTIMEO
:

478 i‡(
is_öt
) {

479 *
vÆue
 = 
rcvtimeo
;

484 
ZMQ_SNDTIMEO
:

485 i‡(
is_öt
) {

486 *
vÆue
 = 
¢dtimeo
;

491 
ZMQ_IPV4ONLY
:

492 i‡(
is_öt
) {

493 *
vÆue
 = 1 - 
ùv6
;

498 
ZMQ_IPV6
:

499 i‡(
is_öt
) {

500 *
vÆue
 = 
ùv6
;

505 
ZMQ_IMMEDIATE
:

506 i‡(
is_öt
) {

507 *
vÆue
 = 
immedüã
;

512 
ZMQ_TCP_KEEPALIVE
:

513 i‡(
is_öt
) {

514 *
vÆue
 = 
t˝_kì∑live
;

519 
ZMQ_TCP_KEEPALIVE_CNT
:

520 i‡(
is_öt
) {

521 *
vÆue
 = 
t˝_kì∑live_˙t
;

526 
ZMQ_TCP_KEEPALIVE_IDLE
:

527 i‡(
is_öt
) {

528 *
vÆue
 = 
t˝_kì∑live_idÀ
;

533 
ZMQ_TCP_KEEPALIVE_INTVL
:

534 i‡(
is_öt
) {

535 *
vÆue
 = 
t˝_kì∑live_ötvl
;

540 
ZMQ_MECHANISM
:

541 i‡(
is_öt
) {

542 *
vÆue
 = 
mech™ism
;

547 
ZMQ_PLAIN_SERVER
:

548 i‡(
is_öt
) {

549 *
vÆue
 = 
as_£rvî
 && 
mech™ism
 =
ZMQ_PLAIN
;

554 
ZMQ_PLAIN_USERNAME
:

555 i‡(*
›tvÆÀn_
 >
∂aö_u£∫ame
.
	`size
 () + 1) {

556 
	`mem˝y
 (
›tvÆ_
, 
∂aö_u£∫ame
.
	`c_°r
 (),Öœö_u£∫ame.
	`size
 () + 1);

557 *
›tvÆÀn_
 = 
∂aö_u£∫ame
.
	`size
 () + 1;

562 
ZMQ_PLAIN_PASSWORD
:

563 i‡(*
›tvÆÀn_
 >
∂aö_∑ssw‹d
.
	`size
 () + 1) {

564 
	`mem˝y
 (
›tvÆ_
, 
∂aö_∑ssw‹d
.
	`c_°r
 (),Öœö_∑ssw‹d.
	`size
 () + 1);

565 *
›tvÆÀn_
 = 
∂aö_∑ssw‹d
.
	`size
 () + 1;

570 
ZMQ_ZAP_DOMAIN
:

571 i‡(*
›tvÆÀn_
 >
z≠_domaö
.
	`size
 () + 1) {

572 
	`mem˝y
 (
›tvÆ_
, 
z≠_domaö
.
	`c_°r
 (), z≠_domaö.
	`size
 () + 1);

573 *
›tvÆÀn_
 = 
z≠_domaö
.
	`size
 () + 1;

579 #ifde‡
HAVE_LIBSODIUM


580 
ZMQ_CURVE_SERVER
:

581 i‡(
is_öt
) {

582 *
vÆue
 = 
as_£rvî
 && 
mech™ism
 =
ZMQ_CURVE
;

587 
ZMQ_CURVE_PUBLICKEY
:

588 i‡(*
›tvÆÀn_
 =
CURVE_KEYSIZE
) {

589 
	`mem˝y
 (
›tvÆ_
, 
curve_public_key
, 
CURVE_KEYSIZE
);

593 i‡(*
›tvÆÀn_
 =
CURVE_KEYSIZE_Z85
 + 1) {

594 
	`zmq_z85_ícode
 ((*Ë
›tvÆ_
, 
curve_public_key
, 
CURVE_KEYSIZE
);

599 
ZMQ_CURVE_SECRETKEY
:

600 i‡(*
›tvÆÀn_
 =
CURVE_KEYSIZE
) {

601 
	`mem˝y
 (
›tvÆ_
, 
curve_£¸ë_key
, 
CURVE_KEYSIZE
);

605 i‡(*
›tvÆÀn_
 =
CURVE_KEYSIZE_Z85
 + 1) {

606 
	`zmq_z85_ícode
 ((*Ë
›tvÆ_
, 
curve_£¸ë_key
, 
CURVE_KEYSIZE
);

611 
ZMQ_CURVE_SERVERKEY
:

612 i‡(*
›tvÆÀn_
 =
CURVE_KEYSIZE
) {

613 
	`mem˝y
 (
›tvÆ_
, 
curve_£rvî_key
, 
CURVE_KEYSIZE
);

617 i‡(*
›tvÆÀn_
 =
CURVE_KEYSIZE_Z85
 + 1) {

618 
	`zmq_z85_ícode
 ((*Ë
›tvÆ_
, 
curve_£rvî_key
, 
CURVE_KEYSIZE
);

624 
ZMQ_CONFLATE
:

625 i‡(
is_öt
) {

626 *
vÆue
 = 
c⁄Ê©e
;

632 
î∫o
 = 
EINVAL
;

634 
	}
}

	@options.hpp

20 #i‚de‡
__ZMQ_OPTIONS_HPP_INCLUDED__


21 
	#__ZMQ_OPTIONS_HPP_INCLUDED__


	)

23 
	~<°rög
>

24 
	~<ve˘‹
>

26 
	~"°ddef.h
"

27 
	~"°döt.hµ
"

28 
	~"t˝_addªss.hµ
"

29 
	~"../ö˛ude/zmq.h
"

32 
	#CURVE_KEYSIZE
 32

	)

34 
	#CURVE_KEYSIZE_Z85
 40

	)

36 
«me•a˚
 
	gzmq


38 
	s›ti⁄s_t


40 
›ti⁄s_t
 ();

42 
£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

43 
gësock›t
 (
›ti⁄_
, *
›tvÆ_
, 
size_t
 *
›tvÆÀn_
);

46 
	g¢dhwm
;

47 
	grcvhwm
;

50 
uöt64_t
 
	gafföôy
;

53 
	gidítôy_size
;

54 
	gidítôy
 [256];

57 
	gøã
;

60 
	gªcovîy_ivl
;

63 
	gmu…iˇ°_h›s
;

66 
	g¢dbuf
;

67 
	grcvbuf
;

70 
	gty≥
;

73 
	glögî
;

77 
	gªc⁄√˘_ivl
;

81 
	gªc⁄√˘_ivl_max
;

84 
	gbacklog
;

87 
öt64_t
 
	gmaxmsgsize
;

90 
	grcvtimeo
;

91 
	g¢dtimeo
;

94 
boﬁ
 
	gùv6
;

98 
	gimmedüã
;

101 
boﬁ
 
	gfûãr
;

104 
boﬁ
 
	gªcv_idítôy
;

107 
boﬁ
 
	gøw_sock
;

111 
	gt˝_kì∑live
;

112 
	gt˝_kì∑live_˙t
;

113 
	gt˝_kì∑live_idÀ
;

114 
	gt˝_kì∑live_ötvl
;

117 
	g°d
::
	tve˘‹
 <
	tt˝_addªss_mask_t
> 
	tt˝_ac˚±_fûãrs_t
;

118 
t˝_ac˚±_fûãrs_t
 
	gt˝_ac˚±_fûãrs
;

121 
	gmech™ism
;

124 
	gas_£rvî
;

127 
	g°d
::
°rög
 
z≠_domaö
;

130 
	g°d
::
°rög
 
∂aö_u£∫ame
;

131 
	g°d
::
°rög
 
∂aö_∑ssw‹d
;

134 
uöt8_t
 
	gcurve_public_key
 [
CURVE_KEYSIZE
];

135 
uöt8_t
 
	gcurve_£¸ë_key
 [
CURVE_KEYSIZE
];

136 
uöt8_t
 
	gcurve_£rvî_key
 [
CURVE_KEYSIZE
];

139 
	gsockë_id
;

145 
boﬁ
 
	gc⁄Ê©e
;

	@own.cpp

20 
	~"own.hµ
"

21 
	~"îr.hµ
"

22 
	~"io_thªad.hµ
"

24 
	gzmq
::
own_t
::
	$own_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
) :

25 
	`obje˘_t
 (
∑ª¡_
, 
tid_
),

26 
	`ãrmö©ög
 (
Ál£
),

27 
	`£¡_£qnum
 (0),

28 
	`¥o˚s£d_£qnum
 (0),

29 
	`ow√r
 (
NULL
),

30 
	$ãrm_acks
 (0)

32 
	}
}

34 
	gzmq
::
own_t
::
	$own_t
 (
io_thªad_t
 *
io_thªad_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

35 
	`obje˘_t
 (
io_thªad_
),

36 
	`›ti⁄s
 (
›ti⁄s_
),

37 
	`ãrmö©ög
 (
Ál£
),

38 
	`£¡_£qnum
 (0),

39 
	`¥o˚s£d_£qnum
 (0),

40 
	`ow√r
 (
NULL
),

41 
	$ãrm_acks
 (0)

43 
	}
}

45 
	gzmq
::
own_t
::~
	$own_t
 ()

47 
	}
}

49 
zmq
::
own_t
::
	$£t_ow√r
 (
own_t
 *
ow√r_
)

51 
	`zmq_as£π
 (!
ow√r
);

52 
ow√r
 = 
ow√r_
;

53 
	}
}

55 
	gzmq
::
own_t
::
	$öc_£qnum
 ()

58 
£¡_£qnum
.
	`add
 (1);

59 
	}
}

61 
	gzmq
::
own_t
::
	$¥o˚ss_£qnum
 ()

64 
¥o˚s£d_£qnum
++;

67 
	`check_ãrm_acks
 ();

68 
	}
}

70 
	gzmq
::
own_t
::
	$œunch_chûd
 (
own_t
 *
obje˘_
)

73 
obje˘_
->
	`£t_ow√r
 (
this
);

76 
	`£nd_∂ug
 (
obje˘_
);

79 
	`£nd_own
 (
this
, 
obje˘_
);

80 
	}
}

82 
	gzmq
::
own_t
::
	$ãrm_chûd
 (
own_t
 *
obje˘_
)

84 
	`¥o˚ss_ãrm_ªq
 (
obje˘_
);

85 
	}
}

87 
	gzmq
::
own_t
::
	$¥o˚ss_ãrm_ªq
 (
own_t
 *
obje˘_
)

91 i‡(
ãrmö©ög
)

95 
ow√d_t
::
ôî©‹
 
ô
 = 
°d
::
	`föd
 (
ow√d
.
	`begö
 (), ow√d.
	`íd
 (), 
obje˘_
);

99 i‡(
ô
 =
ow√d
.
	`íd
 ())

102 
ow√d
.
	`îa£
 (
ô
);

103 
	`ªgi°î_ãrm_acks
 (1);

107 
	`£nd_ãrm
 (
obje˘_
, 
›ti⁄s
.
lögî
);

108 
	}
}

110 
	gzmq
::
own_t
::
	$¥o˚ss_own
 (
own_t
 *
obje˘_
)

114 i‡(
ãrmö©ög
) {

115 
	`ªgi°î_ãrm_acks
 (1);

116 
	`£nd_ãrm
 (
obje˘_
, 0);

121 
ow√d
.
	`ö£π
 (
obje˘_
);

122 
	}
}

124 
	gzmq
::
own_t
::
	$ãrmö©e
 ()

128 i‡(
ãrmö©ög
)

133 i‡(!
ow√r
) {

134 
	`¥o˚ss_ãrm
 (
›ti⁄s
.
lögî
);

139 
	`£nd_ãrm_ªq
 (
ow√r
, 
this
);

140 
	}
}

142 
boﬁ
 
	gzmq
::
own_t
::
	$is_ãrmö©ög
 ()

144  
ãrmö©ög
;

145 
	}
}

147 
	gzmq
::
own_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

150 
	`zmq_as£π
 (!
ãrmö©ög
);

153 
ow√d_t
::
ôî©‹
 
ô
 = 
ow√d
.
	`begö
 (); ià!ow√d.
	`íd
 (); ++it)

154 
	`£nd_ãrm
 (*
ô
, 
lögî_
);

155 
	`ªgi°î_ãrm_acks
 ((Ë
ow√d
.
	`size
 ());

156 
ow√d
.
	`˛ór
 ();

160 
ãrmö©ög
 = 
åue
;

161 
	`check_ãrm_acks
 ();

162 
	}
}

164 
	gzmq
::
own_t
::
	$ªgi°î_ãrm_acks
 (
cou¡_
)

166 
ãrm_acks
 +
cou¡_
;

167 
	}
}

169 
	gzmq
::
own_t
::
	$uƒegi°î_ãrm_ack
 ()

171 
	`zmq_as£π
 (
ãrm_acks
 > 0);

172 
ãrm_acks
--;

175 
	`check_ãrm_acks
 ();

176 
	}
}

178 
	gzmq
::
own_t
::
	$¥o˚ss_ãrm_ack
 ()

180 
	`uƒegi°î_ãrm_ack
 ();

181 
	}
}

183 
	gzmq
::
own_t
::
	$check_ãrm_acks
 ()

185 i‡(
ãrmö©ög
 && 
¥o˚s£d_£qnum
 =
£¡_£qnum
.
	`gë
 () &&

186 
ãrm_acks
 == 0) {

189 
	`zmq_as£π
 (
ow√d
.
	`em±y
 ());

193 i‡(
ow√r
)

194 
	`£nd_ãrm_ack
 (
ow√r
);

197 
	`¥o˚ss_de°roy
 ();

199 
	}
}

201 
	gzmq
::
own_t
::
	$¥o˚ss_de°roy
 ()

203 
dñëe
 
this
;

204 
	}
}

	@own.hpp

20 #i‚de‡
__ZMQ_OWN_HPP_INCLUDED__


21 
	#__ZMQ_OWN_HPP_INCLUDED__


	)

23 
	~<£t
>

24 
	~<Æg‹ôhm
>

26 
	~"obje˘.hµ
"

27 
	~"›ti⁄s.hµ
"

28 
	~"©omic_cou¡î.hµ
"

29 
	~"°döt.hµ
"

31 
«me•a˚
 
	gzmq


34 
˛ass
 
	g˘x_t
;

35 
˛ass
 
	gio_thªad_t
;

40 ˛as†
	cown_t
 : 
public
 
obje˘_t


42 
public
:

49 
own_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
);

52 
own_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

57 
öc_£qnum
 ();

64 
ªgi°î_ãrm_acks
 (
cou¡_
);

65 
uƒegi°î_ãrm_ack
 ();

67 
	g¥Ÿe˘ed
:

70 
œunch_chûd
 (
own_t
 *
obje˘_
);

73 
ãrm_chûd
 (
own_t
 *
obje˘_
);

78 
ãrmö©e
 ();

81 
boﬁ
 
is_ãrmö©ög
 ();

87 
	gvútuÆ
 ~
own_t
 ();

92 
¥o˚ss_ãrm
 (
lögî_
);

96 
vútuÆ
 
¥o˚ss_de°roy
 ();

99 
›ti⁄s_t
 
	g›ti⁄s
;

101 
	g¥iv©e
:

104 
£t_ow√r
 (
own_t
 *
ow√r_
);

107 
¥o˚ss_own
 (
own_t
 *
obje˘_
);

108 
¥o˚ss_ãrm_ªq
 (
own_t
 *
obje˘_
);

109 
¥o˚ss_ãrm_ack
 ();

110 
¥o˚ss_£qnum
 ();

114 
check_ãrm_acks
 ();

118 
boﬁ
 
	gãrmö©ög
;

121 
©omic_cou¡î_t
 
	g£¡_£qnum
;

124 
uöt64_t
 
	g¥o˚s£d_£qnum
;

128 
own_t
 *
	gow√r
;

132 
	g°d
::
	t£t
 <
	town_t
*> 
	tow√d_t
;

133 
ow√d_t
 
	gow√d
;

136 
	gãrm_acks
;

138 
own_t
 (const own_t&);

139 c⁄° 
	gown_t
 &
	g›î©‹
 = (c⁄° 
own_t
&);

	@pair.cpp

20 
	~"∑ú.hµ
"

21 
	~"îr.hµ
"

22 
	~"pùe.hµ
"

23 
	~"msg.hµ
"

25 
	gzmq
::
∑ú_t
::
	$∑ú_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

26 
	`sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

27 
	$pùe
 (
NULL
)

29 
›ti⁄s
.
ty≥
 = 
ZMQ_PAIR
;

30 
	}
}

32 
	gzmq
::
∑ú_t
::~
	$∑ú_t
 ()

34 
	`zmq_as£π
 (!
pùe
);

35 
	}
}

37 
	gzmq
::
∑ú_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

40 ()
subs¸ibe_to_Æl_
;

42 
	`zmq_as£π
 (
pùe_
 !
NULL
);

46 i‡(
pùe
 =
NULL
)

47 
pùe
 = 
pùe_
;

49 
pùe_
->
	`ãrmö©e
 (
Ál£
);

50 
	}
}

52 
	gzmq
::
∑ú_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

54 i‡(
pùe_
 =
pùe
)

55 
pùe
 = 
NULL
;

56 
	}
}

58 
	gzmq
::
∑ú_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *)

62 
	}
}

64 
zmq
::
∑ú_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *)

68 
	}
}

70 
zmq
::
∑ú_t
::
	$x£nd
 (
msg_t
 *
msg_
)

72 i‡(!
pùe
 || !pùe->
	`wrôe
 (
msg_
)) {

73 
î∫o
 = 
EAGAIN
;

77 i‡(!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
))

78 
pùe
->
	`Êush
 ();

81 
rc
 = 
msg_
->
	`öô
 ();

82 
	`î∫o_as£π
 (
rc
 == 0);

85 
	}
}

87 
	gzmq
::
∑ú_t
::
	$xªcv
 (
msg_t
 *
msg_
)

90 
rc
 = 
msg_
->
	`˛o£
 ();

91 
	`î∫o_as£π
 (
rc
 == 0);

93 i‡(!
pùe
 || !pùe->
	`ªad
 (
msg_
)) {

96 
rc
 = 
msg_
->
	`öô
 ();

97 
	`î∫o_as£π
 (
rc
 == 0);

99 
î∫o
 = 
EAGAIN
;

103 
	}
}

105 
boﬁ
 
	gzmq
::
∑ú_t
::
	$xhas_ö
 ()

107 i‡(!
pùe
)

108  
Ál£
;

110  
pùe
->
	`check_ªad
 ();

111 
	}
}

113 
boﬁ
 
	gzmq
::
∑ú_t
::
	$xhas_out
 ()

115 i‡(!
pùe
)

116  
Ál£
;

118  
pùe
->
	`check_wrôe
 ();

119 
	}
}

	@pair.hpp

20 #i‚de‡
__ZMQ_PAIR_HPP_INCLUDED__


21 
	#__ZMQ_PAIR_HPP_INCLUDED__


	)

23 
	~"sockë_ba£.hµ
"

24 
	~"£ssi⁄_ba£.hµ
"

26 
«me•a˚
 
	gzmq


29 
˛ass
 
	g˘x_t
;

30 
˛ass
 
	gmsg_t
;

31 
˛ass
 
	gpùe_t
;

32 
˛ass
 
	gio_thªad_t
;

34 ˛as†
	c∑ú_t
 :

35 
public
 
sockë_ba£_t


37 
public
:

39 
∑ú_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid
);

40 ~
∑ú_t
 ();

43 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

44 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

45 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

46 
boﬁ
 
xhas_ö
 ();

47 
boﬁ
 
xhas_out
 ();

48 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

49 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

50 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

52 
	g¥iv©e
:

54 
zmq
::
pùe_t
 *
pùe
;

56 
∑ú_t
 (constÖair_t&);

57 c⁄° 
	g∑ú_t
 &
	g›î©‹
 = (c⁄° 
∑ú_t
&);

	@pgm_receiver.cpp

20 
	~"∂©f‹m.hµ
"

22 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


24 
	~<√w
>

26 #ifde‡
ZMQ_HAVE_WINDOWS


27 
	~"wödows.hµ
"

30 
	~"pgm_ª˚ivî.hµ
"

31 
	~"£ssi⁄_ba£.hµ
"

32 
	~"v1_decodî.hµ
"

33 
	~"°döt.hµ
"

34 
	~"wúe.hµ
"

35 
	~"îr.hµ
"

37 
	gzmq
::
pgm_ª˚ivî_t
::
	$pgm_ª˚ivî_t
 (
˛ass
 
io_thªad_t
 *
∑ª¡_
,

38 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

39 
	`io_obje˘_t
 (
∑ª¡_
),

40 
	`has_rx_timî
 (
Ál£
),

41 
	`pgm_sockë
 (
åue
, 
›ti⁄s_
),

42 
	`›ti⁄s
 (
›ti⁄s_
),

43 
	`£ssi⁄
 (
NULL
),

44 
	`a˘ive_tsi
 (
NULL
),

45 
	$ösize
 (0)

47 
	}
}

49 
	gzmq
::
pgm_ª˚ivî_t
::~
	$pgm_ª˚ivî_t
 ()

52 
	`zmq_as£π
 (
≥îs
.
	`em±y
 ());

53 
	}
}

55 
	gzmq
::
pgm_ª˚ivî_t
::
	$öô
 (
boﬁ
 
udp_íˇpsuœti⁄_
, c⁄° *
√tw‹k_
)

57  
pgm_sockë
.
	`öô
 (
udp_íˇpsuœti⁄_
, 
√tw‹k_
);

58 
	}
}

60 
	gzmq
::
pgm_ª˚ivî_t
::
	$∂ug
 (
io_thªad_t
 *
io_thªad_
,

61 
£ssi⁄_ba£_t
 *
£ssi⁄_
)

64 
fd_t
 
sockë_fd
 = 
ªtúed_fd
;

65 
fd_t
 
waôög_pùe_fd
 = 
ªtúed_fd
;

66 
pgm_sockë
.
	`gë_ª˚ivî_fds
 (&
sockë_fd
, &
waôög_pùe_fd
);

67 
sockë_h™dÀ
 = 
	`add_fd
 (
sockë_fd
);

68 
pùe_h™dÀ
 = 
	`add_fd
 (
waôög_pùe_fd
);

69 
	`£t_pﬁlö
 (
pùe_h™dÀ
);

70 
	`£t_pﬁlö
 (
sockë_h™dÀ
);

72 
£ssi⁄
 = 
£ssi⁄_
;

75 
	`dr›_subs¸ùti⁄s
 ();

76 
	}
}

78 
	gzmq
::
pgm_ª˚ivî_t
::
	$u≈lug
 ()

81 
≥îs_t
::
ôî©‹
 
ô
 = 
≥îs
.
	`begö
 (); ià!≥îs.
	`íd
 (); ++it) {

82 i‡(
ô
->
£c⁄d
.
decodî
 !
NULL
)

83 
dñëe
 
ô
->
£c⁄d
.
decodî
;

85 
≥îs
.
	`˛ór
 ();

86 
a˘ive_tsi
 = 
NULL
;

88 i‡(
has_rx_timî
) {

89 
	`ˇn˚l_timî
 (
rx_timî_id
);

90 
has_rx_timî
 = 
Ál£
;

93 
	`rm_fd
 (
sockë_h™dÀ
);

94 
	`rm_fd
 (
pùe_h™dÀ
);

96 
£ssi⁄
 = 
NULL
;

97 
	}
}

99 
	gzmq
::
pgm_ª˚ivî_t
::
	$ãrmö©e
 ()

101 
	`u≈lug
 ();

102 
dñëe
 
this
;

103 
	}
}

105 
	gzmq
::
pgm_ª˚ivî_t
::
	$ª°¨t_ouçut
 ()

107 
	`dr›_subs¸ùti⁄s
 ();

108 
	}
}

110 
	gzmq
::
pgm_ª˚ivî_t
::
	$ª°¨t_öput
 ()

112 
	`zmq_as£π
 (
£ssi⁄
 !
NULL
);

113 
	`zmq_as£π
 (
a˘ive_tsi
 !
NULL
);

115 c⁄° 
≥îs_t
::
ôî©‹
 
ô
 = 
≥îs
.
	`föd
 (*
a˘ive_tsi
);

116 
	`zmq_as£π
 (
ô
 !
≥îs
.
	`íd
 ());

117 
	`zmq_as£π
 (
ô
->
£c⁄d
.
joöed
);

120 
rc
 = 
£ssi⁄
->
	`push_msg
 (
ô
->
£c⁄d
.
decodî
->
	`msg
 ());

121 
	`î∫o_as£π
 (
rc
 == 0);

123 i‡(
ösize
 > 0) {

124 
rc
 = 
	`¥o˚ss_öput
 (
ô
->
£c⁄d
.
decodî
);

125 i‡(
rc
 == -1) {

127 i‡(
î∫o
 =
EAGAIN
) {

128 
£ssi⁄
->
	`Êush
 ();

133 
ô
->
£c⁄d
.
joöed
 = 
Ál£
;

134 
dñëe
 
ô
->
£c⁄d
.
decodî
;

135 
ô
->
£c⁄d
.
decodî
 = 
NULL
;

136 
ösize
 = 0;

141 
	`£t_pﬁlö
 (
pùe_h™dÀ
);

142 
	`£t_pﬁlö
 (
sockë_h™dÀ
);

144 
a˘ive_tsi
 = 
NULL
;

145 
	`ö_evít
 ();

146 
	}
}

148 
	gzmq
::
pgm_ª˚ivî_t
::
	$ö_evít
 ()

151 c⁄° 
pgm_tsi_t
 *
tsi
 = 
NULL
;

153 i‡(
has_rx_timî
) {

154 
	`ˇn˚l_timî
 (
rx_timî_id
);

155 
has_rx_timî
 = 
Ál£
;

160 
åue
) {

164 *
tmp
 = 
NULL
;

165 
ssize_t
 
ª˚ived
 = 
pgm_sockë
.
	`ª˚ive
 (&
tmp
, &
tsi
);

166 
öpos
 = (*Ë
tmp
;

170 i‡(
ª˚ived
 == 0) {

171 i‡(
î∫o
 =
ENOMEM
 ||Éºnÿ=
EBUSY
) {

172 c⁄° 
timeout
 = 
pgm_sockë
.
	`gë_rx_timeout
 ();

173 
	`add_timî
 (
timeout
, 
rx_timî_id
);

174 
has_rx_timî
 = 
åue
;

180 
≥îs_t
::
ôî©‹
 
ô
 = 
≥îs
.
	`föd
 (*
tsi
);

183 i‡(
ª˚ived
 == -1) {

184 i‡(
ô
 !
≥îs
.
	`íd
 ()) {

185 
ô
->
£c⁄d
.
joöed
 = 
Ál£
;

186 i‡(
ô
->
£c⁄d
.
decodî
 !
NULL
) {

187 
dñëe
 
ô
->
£c⁄d
.
decodî
;

188 
ô
->
£c⁄d
.
decodî
 = 
NULL
;

195 i‡(
ô
 =
≥îs
.
	`íd
 ()) {

196 
≥î_öfo_t
 
≥î_öfo
 = {
Ál£
, 
NULL
};

197 
ô
 = 
≥îs
.
	`ö£π
 (
≥îs_t
::
	`vÆue_ty≥
 (*
tsi
, 
≥î_öfo
)).
fú°
;

200 
ösize
 = 
°©ic_ˇ°
 <
size_t
> (
ª˚ived
);

203 
	`zmq_as£π
 (
ösize
 > (
uöt16_t
));

204 
uöt16_t
 
off£t
 = 
	`gë_uöt16
 (
öpos
);

205 
öpos
 + (
uöt16_t
);

206 
ösize
 - (
uöt16_t
);

209 i‡(!
ô
->
£c⁄d
.
joöed
) {

213 i‡(
off£t
 == 0xffff)

216 
	`zmq_as£π
 (
off£t
 <
ösize
);

217 
	`zmq_as£π
 (
ô
->
£c⁄d
.
decodî
 =
NULL
);

220 
öpos
 +
off£t
;

221 
ösize
 -
off£t
;

224 
ô
->
£c⁄d
.
joöed
 = 
åue
;

227 
ô
->
£c⁄d
.
decodî
 = 
	`√w
 (
°d
::
nŸhrow
)

228 
	`v1_decodî_t
 (0, 
›ti⁄s
.
maxmsgsize
);

229 
	`Æloc_as£π
 (
ô
->
£c⁄d
.
decodî
);

232 
rc
 = 
	`¥o˚ss_öput
 (
ô
->
£c⁄d
.
decodî
);

233 i‡(
rc
 == -1) {

234 i‡(
î∫o
 =
EAGAIN
) {

235 
a˘ive_tsi
 = 
tsi
;

238 
	`ª£t_pﬁlö
 (
pùe_h™dÀ
);

239 
	`ª£t_pﬁlö
 (
sockë_h™dÀ
);

244 
ô
->
£c⁄d
.
joöed
 = 
Ál£
;

245 
dñëe
 
ô
->
£c⁄d
.
decodî
;

246 
ô
->
£c⁄d
.
decodî
 = 
NULL
;

247 
ösize
 = 0;

252 
£ssi⁄
->
	`Êush
 ();

253 
	}
}

255 
	gzmq
::
pgm_ª˚ivî_t
::
	$¥o˚ss_öput
 (
v1_decodî_t
 *
decodî
)

257 
	`zmq_as£π
 (
£ssi⁄
 !
NULL
);

259 
ösize
 > 0) {

260 
size_t
 
n
 = 0;

261 
rc
 = 
decodî
->
	`decode
 (
öpos
, 
ösize
, 
n
);

262 i‡(
rc
 == -1)

264 
öpos
 +
n
;

265 
ösize
 -
n
;

266 i‡(
rc
 == 0)

268 
rc
 = 
£ssi⁄
->
	`push_msg
 (
decodî
->
	`msg
 ());

269 i‡(
rc
 == -1) {

270 
	`î∫o_as£π
 (
î∫o
 =
EAGAIN
);

275 
	}
}

278 
	gzmq
::
pgm_ª˚ivî_t
::
	$timî_evít
 (
tokí
)

280 
	`zmq_as£π
 (
tokí
 =
rx_timî_id
);

283 
has_rx_timî
 = 
Ál£
;

284 
	`ö_evít
 ();

285 
	}
}

287 
	gzmq
::
pgm_ª˚ivî_t
::
	$dr›_subs¸ùti⁄s
 ()

289 
msg_t
 
msg
;

290 
msg
.
	`öô
 ();

291 
£ssi⁄
->
	`puŒ_msg
 (&
msg
))

292 
msg
.
	`˛o£
 ();

293 
	}
}

	@pgm_receiver.hpp

20 #i‚de‡
__ZMQ_PGM_RECEIVER_HPP_INCLUDED__


21 
	#__ZMQ_PGM_RECEIVER_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


27 #ifde‡
ZMQ_HAVE_WINDOWS


28 
	~"wödows.hµ
"

31 
	~<m≠
>

32 
	~<Æg‹ôhm
>

34 
	~"io_obje˘.hµ
"

35 
	~"i_ígöe.hµ
"

36 
	~"›ti⁄s.hµ
"

37 
	~"v1_decodî.hµ
"

38 
	~"pgm_sockë.hµ
"

40 
«me•a˚
 
	gzmq


43 
˛ass
 
	gio_thªad_t
;

44 
˛ass
 
	g£ssi⁄_ba£_t
;

46 
˛ass
 
	gpgm_ª˚ivî_t
 : 
public
 
io_obje˘_t
,Öubli¯
	gi_ígöe


49 
	gpublic
:

51 
pgm_ª˚ivî_t
 (
zmq
::
io_thªad_t
 *
∑ª¡_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

52 ~
pgm_ª˚ivî_t
 ();

54 
öô
 (
boﬁ
 
udp_íˇpsuœti⁄_
, c⁄° *
√tw‹k_
);

57 
∂ug
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

58 
zmq
::
£ssi⁄_ba£_t
 *
£ssi⁄_
);

59 
ãrmö©e
 ();

60 
ª°¨t_öput
 ();

61 
ª°¨t_ouçut
 ();

62 
z≠_msg_avaûabÀ
 () {}

65 
ö_evít
 ();

66 
timî_evít
 (
tokí
);

68 
	g¥iv©e
:

71 
u≈lug
 ();

75 
¥o˚ss_öput
 (
v1_decodî_t
 *
decodî
);

79 
dr›_subs¸ùti⁄s
 ();

82 íum {
	grx_timî_id
 = 0xa1};

85 
boﬁ
 
	ghas_rx_timî
;

90 
	s≥î_öfo_t


92 
boﬁ
 
	gjoöed
;

93 
v1_decodî_t
 *
	gdecodî
;

96 
	stsi_comp


98 
boﬁ
 
›î©‹
 (Ë(c⁄° 
	gpgm_tsi_t
 &
	g…si
,

99 c⁄° 
	gpgm_tsi_t
 &
	gπsi
) const

101 
uöt32_t
 
	gŒ
[2], 
	gæ
[2];

102 
mem˝y
 (
Œ
, &
…si
,  (ll));

103 
mem˝y
 (
æ
, &
πsi
,  (rl));

104  (
	gŒ
[0] < 
	gæ
[0]Ë|| (Œ[0] =
æ
[0] && 
Œ
[1] <Ñl[1]);

108 
	g°d
::
	tm≠
 <
	tpgm_tsi_t
, 
	t≥î_öfo_t
, 
	ttsi_comp
> 
	t≥îs_t
;

109 
≥îs_t
 
	g≥îs
;

112 
pgm_sockë_t
 
	gpgm_sockë
;

115 
›ti⁄s_t
 
	g›ti⁄s
;

118 
	gzmq
::
£ssi⁄_ba£_t
 *
£ssi⁄
;

120 c⁄° 
pgm_tsi_t
 *
	ga˘ive_tsi
;

123 
size_t
 
	gösize
;

126 c⁄° *
	göpos
;

129 
h™dÀ_t
 
	gsockë_h™dÀ
;

132 
h™dÀ_t
 
	gpùe_h™dÀ
;

134 
pgm_ª˚ivî_t
 (constÖgm_receiver_t&);

135 c⁄° 
	gpgm_ª˚ivî_t
 &
	g›î©‹
 = (c⁄° 
pgm_ª˚ivî_t
&);

	@pgm_sender.cpp

20 
	~"∂©f‹m.hµ
"

22 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


24 #ifde‡
ZMQ_HAVE_WINDOWS


25 
	~"wödows.hµ
"

28 
	~<°dlib.h
>

30 
	~"io_thªad.hµ
"

31 
	~"pgm_£ndî.hµ
"

32 
	~"£ssi⁄_ba£.hµ
"

33 
	~"îr.hµ
"

34 
	~"wúe.hµ
"

35 
	~"°döt.hµ
"

37 
	gzmq
::
pgm_£ndî_t
::
	$pgm_£ndî_t
 (
io_thªad_t
 *
∑ª¡_
,

38 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

39 
	`io_obje˘_t
 (
∑ª¡_
),

40 
	`has_tx_timî
 (
Ál£
),

41 
	`has_rx_timî
 (
Ál£
),

42 
	`£ssi⁄
 (
NULL
),

43 
	`ícodî
 (0),

44 
	`m‹e_Êag
 (
Ál£
),

45 
	`pgm_sockë
 (
Ál£
, 
›ti⁄s_
),

46 
	`›ti⁄s
 (
›ti⁄s_
),

47 
	`out_buf„r
 (
NULL
),

48 
	`out_buf„r_size
 (0),

49 
	$wrôe_size
 (0)

51 
rc
 = 
msg
.
	`öô
 ();

52 
	`î∫o_as£π
 (
rc
 == 0);

53 
	}
}

55 
	gzmq
::
pgm_£ndî_t
::
	$öô
 (
boﬁ
 
udp_íˇpsuœti⁄_
, c⁄° *
√tw‹k_
)

57 
rc
 = 
pgm_sockë
.
	`öô
 (
udp_íˇpsuœti⁄_
, 
√tw‹k_
);

58 i‡(
rc
 != 0)

59  
rc
;

61 
out_buf„r_size
 = 
pgm_sockë
.
	`gë_max_tsdu_size
 ();

62 
out_buf„r
 = (*Ë
	`mÆloc
 (
out_buf„r_size
);

63 
	`Æloc_as£π
 (
out_buf„r
);

65  
rc
;

66 
	}
}

68 
	gzmq
::
pgm_£ndî_t
::
	$∂ug
 (
io_thªad_t
 *
io_thªad_
, 
£ssi⁄_ba£_t
 *
£ssi⁄_
)

71 
fd_t
 
dow∆ök_sockë_fd
 = 
ªtúed_fd
;

72 
fd_t
 
u∂ök_sockë_fd
 = 
ªtúed_fd
;

73 
fd_t
 
rd©a_nŸify_fd
 = 
ªtúed_fd
;

74 
fd_t
 
≥ndög_nŸify_fd
 = 
ªtúed_fd
;

76 
£ssi⁄
 = 
£ssi⁄_
;

79 
pgm_sockë
.
	`gë_£ndî_fds
 (&
dow∆ök_sockë_fd
, &
u∂ök_sockë_fd
,

80 &
rd©a_nŸify_fd
, &
≥ndög_nŸify_fd
);

82 
h™dÀ
 = 
	`add_fd
 (
dow∆ök_sockë_fd
);

83 
u∂ök_h™dÀ
 = 
	`add_fd
 (
u∂ök_sockë_fd
);

84 
rd©a_nŸify_h™dÀ
 = 
	`add_fd
 (
rd©a_nŸify_fd
);

85 
≥ndög_nŸify_h™dÀ
 = 
	`add_fd
 (
≥ndög_nŸify_fd
);

89 
	`£t_pﬁlö
 (
u∂ök_h™dÀ
);

90 
	`£t_pﬁlö
 (
rd©a_nŸify_h™dÀ
);

91 
	`£t_pﬁlö
 (
≥ndög_nŸify_h™dÀ
);

94 
	`£t_pﬁlout
 (
h™dÀ
);

95 
	}
}

97 
	gzmq
::
pgm_£ndî_t
::
	$u≈lug
 ()

99 i‡(
has_rx_timî
) {

100 
	`ˇn˚l_timî
 (
rx_timî_id
);

101 
has_rx_timî
 = 
Ál£
;

104 i‡(
has_tx_timî
) {

105 
	`ˇn˚l_timî
 (
tx_timî_id
);

106 
has_tx_timî
 = 
Ál£
;

109 
	`rm_fd
 (
h™dÀ
);

110 
	`rm_fd
 (
u∂ök_h™dÀ
);

111 
	`rm_fd
 (
rd©a_nŸify_h™dÀ
);

112 
	`rm_fd
 (
≥ndög_nŸify_h™dÀ
);

113 
£ssi⁄
 = 
NULL
;

114 
	}
}

116 
	gzmq
::
pgm_£ndî_t
::
	$ãrmö©e
 ()

118 
	`u≈lug
 ();

119 
dñëe
 
this
;

120 
	}
}

122 
	gzmq
::
pgm_£ndî_t
::
	$ª°¨t_ouçut
 ()

124 
	`£t_pﬁlout
 (
h™dÀ
);

125 
	`out_evít
 ();

126 
	}
}

128 
	gzmq
::
pgm_£ndî_t
::
	$ª°¨t_öput
 ()

130 
	`zmq_as£π
 (
Ál£
);

131 
	}
}

133 
	gzmq
::
pgm_£ndî_t
::~
	$pgm_£ndî_t
 ()

135 
rc
 = 
msg
.
	`˛o£
 ();

136 
	`î∫o_as£π
 (
rc
 == 0);

138 i‡(
out_buf„r
) {

139 
	`‰ì
 (
out_buf„r
);

140 
out_buf„r
 = 
NULL
;

142 
	}
}

144 
	gzmq
::
pgm_£ndî_t
::
	$ö_evít
 ()

146 i‡(
has_rx_timî
) {

147 
	`ˇn˚l_timî
 (
rx_timî_id
);

148 
has_rx_timî
 = 
Ál£
;

152 
pgm_sockë
.
	`¥o˚ss_up°ªam
 ();

153 i‡(
î∫o
 =
ENOMEM
 ||Éºnÿ=
EBUSY
) {

154 c⁄° 
timeout
 = 
pgm_sockë
.
	`gë_rx_timeout
 ();

155 
	`add_timî
 (
timeout
, 
rx_timî_id
);

156 
has_rx_timî
 = 
åue
;

158 
	}
}

160 
	gzmq
::
pgm_£ndî_t
::
	$out_evít
 ()

164 i‡(
wrôe_size
 == 0) {

169 *
bf
 = 
out_buf„r
 +  (
uöt16_t
);

170 
size_t
 
bfsz
 = 
out_buf„r_size
 -  (
uöt16_t
);

171 
uöt16_t
 
off£t
 = 0xffff;

173 
size_t
 
byãs
 = 
ícodî
.
	`ícode
 (&
bf
, 
bfsz
);

174 
byãs
 < 
bfsz
) {

175 i‡(!
m‹e_Êag
 && 
off£t
 == 0xffff)

176 
off£t
 = 
°©ic_ˇ°
 <
uöt16_t
> (
byãs
);

177 
rc
 = 
£ssi⁄
->
	`puŒ_msg
 (&
msg
);

178 i‡(
rc
 == -1)

180 
m‹e_Êag
 = 
msg
.
	`Êags
 (Ë& 
msg_t
::
m‹e
;

181 
ícodî
.
	`lﬂd_msg
 (&
msg
);

182 
bf
 = 
out_buf„r
 +  (
uöt16_t
Ë+ 
byãs
;

183 
byãs
 +
ícodî
.
	`ícode
 (&
bf
, 
bfsz
 - bytes);

187 i‡(
byãs
 == 0) {

188 
	`ª£t_pﬁlout
 (
h™dÀ
);

192 
wrôe_size
 =  (
uöt16_t
Ë+ 
byãs
;

195 
	`put_uöt16
 (
out_buf„r
, 
off£t
);

198 i‡(
has_tx_timî
) {

199 
	`ˇn˚l_timî
 (
tx_timî_id
);

200 
has_tx_timî
 = 
Ál£
;

204 
size_t
 
nbyãs
 = 
pgm_sockë
.
	`£nd
 (
out_buf„r
, 
wrôe_size
);

207 i‡(
nbyãs
 =
wrôe_size
)

208 
wrôe_size
 = 0;

210 
	`zmq_as£π
 (
nbyãs
 == 0);

212 i‡(
î∫o
 =
ENOMEM
) {

213 c⁄° 
timeout
 = 
pgm_sockë
.
	`gë_tx_timeout
 ();

214 
	`add_timî
 (
timeout
, 
tx_timî_id
);

215 
has_tx_timî
 = 
åue
;

218 
	`î∫o_as£π
 (
î∫o
 =
EBUSY
);

220 
	}
}

222 
	gzmq
::
pgm_£ndî_t
::
	$timî_evít
 (
tokí
)

225 i‡(
tokí
 =
rx_timî_id
) {

226 
has_rx_timî
 = 
Ál£
;

227 
	`ö_evít
 ();

230 i‡(
tokí
 =
tx_timî_id
) {

231 
has_tx_timî
 = 
Ál£
;

232 
	`out_evít
 ();

235 
	`zmq_as£π
 (
Ál£
);

236 
	}
}

	@pgm_sender.hpp

20 #i‚de‡
__ZMQ_PGM_SENDER_HPP_INCLUDED__


21 
	#__ZMQ_PGM_SENDER_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


27 #ifde‡
ZMQ_HAVE_WINDOWS


28 
	~"wödows.hµ
"

31 
	~"°döt.hµ
"

32 
	~"io_obje˘.hµ
"

33 
	~"i_ígöe.hµ
"

34 
	~"›ti⁄s.hµ
"

35 
	~"pgm_sockë.hµ
"

36 
	~"v1_ícodî.hµ
"

37 
	~"msg.hµ
"

39 
«me•a˚
 
	gzmq


42 
˛ass
 
	gio_thªad_t
;

43 
˛ass
 
	g£ssi⁄_ba£_t
;

45 
˛ass
 
	gpgm_£ndî_t
 : 
public
 
io_obje˘_t
,Öubli¯
	gi_ígöe


48 
	gpublic
:

50 
pgm_£ndî_t
 (
zmq
::
io_thªad_t
 *
∑ª¡_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

51 ~
pgm_£ndî_t
 ();

53 
öô
 (
boﬁ
 
udp_íˇpsuœti⁄_
, c⁄° *
√tw‹k_
);

56 
∂ug
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

57 
zmq
::
£ssi⁄_ba£_t
 *
£ssi⁄_
);

58 
ãrmö©e
 ();

59 
ª°¨t_öput
 ();

60 
ª°¨t_ouçut
 ();

61 
z≠_msg_avaûabÀ
 () {}

64 
ö_evít
 ();

65 
out_evít
 ();

66 
timî_evít
 (
tokí
);

68 
	g¥iv©e
:

71 
u≈lug
 ();

74 íum {
	gtx_timî_id
 = 0xa0, 
	grx_timî_id
 = 0xa1};

77 
boﬁ
 
	ghas_tx_timî
;

78 
boﬁ
 
	ghas_rx_timî
;

80 
£ssi⁄_ba£_t
 *
	g£ssi⁄
;

83 
v1_ícodî_t
 
	gícodî
;

85 
msg_t
 
	gmsg
;

88 
boﬁ
 
	gm‹e_Êag
;

91 
pgm_sockë_t
 
	gpgm_sockë
;

94 
›ti⁄s_t
 
	g›ti⁄s
;

97 
h™dÀ_t
 
	gh™dÀ
;

98 
h™dÀ_t
 
	gu∂ök_h™dÀ
;

99 
h™dÀ_t
 
	grd©a_nŸify_h™dÀ
;

100 
h™dÀ_t
 
	g≥ndög_nŸify_h™dÀ
;

103 *
	gout_buf„r
;

106 
size_t
 
	gout_buf„r_size
;

110 
size_t
 
	gwrôe_size
;

112 
pgm_£ndî_t
 (constÖgm_sender_t&);

113 c⁄° 
	gpgm_£ndî_t
 &
	g›î©‹
 = (c⁄° 
pgm_£ndî_t
&);

	@pgm_socket.cpp

20 
	~"∂©f‹m.hµ
"

22 #ifde‡
ZMQ_HAVE_OPENPGM


24 #ifde‡
ZMQ_HAVE_WINDOWS


25 
	~"wödows.hµ
"

28 #ifde‡
ZMQ_HAVE_LINUX


29 
	~<pﬁl.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

34 
	~<°rög
>

36 
	~"›ti⁄s.hµ
"

37 
	~"pgm_sockë.hµ
"

38 
	~"c⁄fig.hµ
"

39 
	~"îr.hµ
"

40 
	~"øndom.hµ
"

41 
	~"°döt.hµ
"

43 #i‚de‡
MSG_ERRQUEUE


44 
	#MSG_ERRQUEUE
 0x2000

	)

47 
	gzmq
::
pgm_sockë_t
::
	$pgm_sockë_t
 (
boﬁ
 
ª˚ivî_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

48 
	`sock
 (
NULL
),

49 
	`›ti⁄s
 (
›ti⁄s_
),

50 
	`ª˚ivî
 (
ª˚ivî_
),

51 
	`pgm_msgv
 (
NULL
),

52 
	`pgm_msgv_Àn
 (0),

53 
	`nbyãs_ªc
 (0),

54 
	`nbyãs_¥o˚s£d
 (0),

55 
	$pgm_msgv_¥o˚s£d
 (0)

57 
	}
}

64 
	gzmq
::
pgm_sockë_t
::
	$öô_addªss
 (c⁄° *
√tw‹k_
,

65 
pgm_addröfo_t
 **
ªs
, 
uöt16_t
 *
p‹t_numbî
)

68 c⁄° *
p‹t_dñim
 = 
	`°ºchr
 (
√tw‹k_
, ':');

69 i‡(!
p‹t_dñim
) {

70 
î∫o
 = 
EINVAL
;

74 *
p‹t_numbî
 = 
	`©oi
 (
p‹t_dñim
 + 1);

76 
√tw‹k
 [256];

77 i‡(
p‹t_dñim
 - 
√tw‹k_
 >(Ë (
√tw‹k
) - 1) {

78 
î∫o
 = 
EINVAL
;

81 
	`mem£t
 (
√tw‹k
, '\0',  (network));

82 
	`mem˝y
 (
√tw‹k
, 
√tw‹k_
, 
p‹t_dñim
 -Çetwork_);

84 
pgm_îr‹_t
 *
pgm_îr‹
 = 
NULL
;

85 
pgm_addröfo_t
 
höts
;

87 
	`mem£t
 (&
höts
, 0,  (hints));

88 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

89 i‡(!
	`pgm_gëaddröfo
 (
√tw‹k
, 
NULL
, 
ªs
, &
pgm_îr‹
)) {

92 
	`zmq_as£π
 (
pgm_îr‹
 !
NULL
);

93 i‡(
pgm_îr‹
->
domaö
 =
PGM_ERROR_DOMAIN_IF
 &&

96 –
pgm_îr‹
->
code
 !
PGM_ERROR_SERVICE
 &&

97 
pgm_îr‹
->
code
 !
PGM_ERROR_SOCKTNOSUPPORT
)) {

100 
	`pgm_îr‹_‰ì
 (
pgm_îr‹
);

101 
î∫o
 = 
EINVAL
;

106 
	`zmq_as£π
 (
Ál£
);

109 
	}
}

112 
	gzmq
::
pgm_sockë_t
::
	$öô
 (
boﬁ
 
udp_íˇpsuœti⁄_
, c⁄° *
√tw‹k_
)

115 
	`zmq_as£π
 (
sock
 =
NULL
);

116 
	`zmq_as£π
 (
›ti⁄s
.
øã
 > 0);

119 
nbyãs_ªc
 = 0;

120 
nbyãs_¥o˚s£d
 = 0;

121 
pgm_msgv_¥o˚s£d
 = 0;

123 
uöt16_t
 
p‹t_numbî
;

124 
pgm_addröfo_t
 *
ªs
 = 
NULL
;

125 
ß_Ámûy_t
 
ß_Ámûy
;

127 
pgm_îr‹_t
 *
pgm_îr‹
 = 
NULL
;

129 i‡(
	`öô_addªss
(
√tw‹k_
, &
ªs
, &
p‹t_numbî
) < 0) {

130 
îr_ab‹t
;

133 
	`zmq_as£π
 (
ªs
 !
NULL
);

136 
ß_Ámûy
 = 
ªs
->
ai_£nd_addrs
[0].
g§_group
.
ss_Ámûy
;

139 i‡(
udp_íˇpsuœti⁄_
) {

140 i‡(!
	`pgm_sockë
 (&
sock
, 
ß_Ámûy
, 
SOCK_SEQPACKET
, 
IPPROTO_UDP
,

141 &
pgm_îr‹
)) {

144 
	`zmq_as£π
 (
pgm_îr‹
 !
NULL
);

145 i‡(
pgm_îr‹
->
domaö
 =
PGM_ERROR_DOMAIN_SOCKET
 && (

146 
pgm_îr‹
->
code
 !
PGM_ERROR_BADF
 &&

147 
pgm_îr‹
->
code
 !
PGM_ERROR_FAULT
 &&

148 
pgm_îr‹
->
code
 !
PGM_ERROR_NOPROTOOPT
 &&

149 
pgm_îr‹
->
code
 !
PGM_ERROR_FAILED
))

152 
îr_ab‹t
;

155 
	`zmq_as£π
 (
Ál£
);

159 c⁄° 
íˇpsuœti⁄_p‹t
 = 
p‹t_numbî
;

160 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_UDP_ENCAP_UCAST_PORT
,

161 &
íˇpsuœti⁄_p‹t
,  (encapsulation_port)))

162 
îr_ab‹t
;

163 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_UDP_ENCAP_MCAST_PORT
,

164 &
íˇpsuœti⁄_p‹t
,  (encapsulation_port)))

165 
îr_ab‹t
;

168 i‡(!
	`pgm_sockë
 (&
sock
, 
ß_Ámûy
, 
SOCK_SEQPACKET
, 
IPPROTO_PGM
,

169 &
pgm_îr‹
)) {

172 
	`zmq_as£π
 (
pgm_îr‹
 !
NULL
);

173 i‡(
pgm_îr‹
->
domaö
 =
PGM_ERROR_DOMAIN_SOCKET
 && (

174 
pgm_îr‹
->
code
 !
PGM_ERROR_BADF
 &&

175 
pgm_îr‹
->
code
 !
PGM_ERROR_FAULT
 &&

176 
pgm_îr‹
->
code
 !
PGM_ERROR_NOPROTOOPT
 &&

177 
pgm_îr‹
->
code
 !
PGM_ERROR_FAILED
))

180 
îr_ab‹t
;

183 
	`zmq_as£π
 (
Ál£
);

188 c⁄° 
rcvbuf
 = (Ë
›ti⁄s
.rcvbuf;

189 i‡(
rcvbuf
) {

190 i‡(!
	`pgm_£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_RCVBUF
, &
rcvbuf
,

191  (
rcvbuf
)))

192 
îr_ab‹t
;

195 c⁄° 
¢dbuf
 = (Ë
›ti⁄s
.sndbuf;

196 i‡(
¢dbuf
) {

197 i‡(!
	`pgm_£tsock›t
 (
sock
, 
SOL_SOCKET
, 
SO_SNDBUF
, &
¢dbuf
,

198  (
¢dbuf
)))

199 
îr_ab‹t
;

202 c⁄° 
max_çdu
 = (Ë
pgm_max_çdu
;

203 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_MTU
, &
max_çdu
,

204  (
max_çdu
)))

205 
îr_ab‹t
;

208 i‡(
ª˚ivî
) {

209 c⁄° 
ªcv_⁄ly
 = 1,

210 
rxw_max_çdu
 = (Ë
pgm_max_çdu
,

211 
rxw_sqns
 = 
	`compuã_sqns
 (
rxw_max_çdu
),

212 
≥î_expúy
 = 
	`pgm_£cs
 (300),

213 
•mr_expúy
 = 
	`pgm_m£cs
 (25),

214 
«k_bo_ivl
 = 
	`pgm_m£cs
 (50),

215 
«k_Ωt_ivl
 = 
	`pgm_m£cs
 (200),

216 
«k_rd©a_ivl
 = 
	`pgm_m£cs
 (200),

217 
«k_d©a_ªåõs
 = 50,

218 
«k_ncf_ªåõs
 = 50;

220 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_RECV_ONLY
, &
ªcv_⁄ly
,

221  (
ªcv_⁄ly
)) ||

222 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_RXW_SQNS
, &
rxw_sqns
,

223  (
rxw_sqns
)) ||

224 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_PEER_EXPIRY
, &
≥î_expúy
,

225  (
≥î_expúy
)) ||

226 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_SPMR_EXPIRY
, &
•mr_expúy
,

227  (
•mr_expúy
)) ||

228 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_NAK_BO_IVL
, &
«k_bo_ivl
,

229  (
«k_bo_ivl
)) ||

230 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_NAK_RPT_IVL
, &
«k_Ωt_ivl
,

231  (
«k_Ωt_ivl
)) ||

232 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_NAK_RDATA_IVL
,

233 &
«k_rd©a_ivl
,  (nak_rdata_ivl)) ||

234 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_NAK_DATA_RETRIES
,

235 &
«k_d©a_ªåõs
,  (nak_data_retries)) ||

236 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_NAK_NCF_RETRIES
,

237 &
«k_ncf_ªåõs
,  (nak_ncf_retries)))

238 
îr_ab‹t
;

241 c⁄° 
£nd_⁄ly
 = 1,

242 
max_πe
 = (Ë((
›ti⁄s
.
øã
 * 1000) / 8),

243 
txw_max_çdu
 = (Ë
pgm_max_çdu
,

244 
txw_sqns
 = 
	`compuã_sqns
 (
txw_max_çdu
),

245 
ambõ¡_•m
 = 
	`pgm_£cs
 (30),

246 
hóπbót_•m
[] = { 
	`pgm_m£cs
 (100),

247 
	`pgm_m£cs
 (100),

248 
	`pgm_m£cs
 (100),

249 
	`pgm_m£cs
 (100),

250 
	`pgm_m£cs
 (1300),

251 
	`pgm_£cs
 (7),

252 
	`pgm_£cs
 (16),

253 
	`pgm_£cs
 (25),

254 
	`pgm_£cs
 (30) };

256 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_SEND_ONLY
,

257 &
£nd_⁄ly
,  (send_only)) ||

258 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_ODATA_MAX_RTE
,

259 &
max_πe
,  (max_rte)) ||

260 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_TXW_SQNS
,

261 &
txw_sqns
,  (txw_sqns)) ||

262 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_AMBIENT_SPM
,

263 &
ambõ¡_•m
,  (ambient_spm)) ||

264 !
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_HEARTBEAT_SPM
,

265 &
hóπbót_•m
,  (heartbeat_spm)))

266 
îr_ab‹t
;

270 
pgm_sockaddr_t
 
addr
;

272 
	`mem£t
 (&
addr
, 0, (addr));

273 
addr
.
ß_p‹t
 = 
p‹t_numbî
;

274 
addr
.
ß_addr
.
•‹t
 = 
DEFAULT_DATA_SOURCE_PORT
;

277 
uöt32_t
 
buf
 [2];

278 
buf
 [0] = 
	`gíî©e_øndom
 ();

279 
buf
 [1] = 
	`gíî©e_øndom
 ();

280 i‡(!
	`pgm_gsi_¸óã_‰om_d©a
 (&
addr
.
ß_addr
.
gsi
, (
uöt8_t
*Ë
buf
, 8))

281 
îr_ab‹t
;

285 
pgm_öãrÁ˚_ªq_t
 
if_ªq
;

286 
	`mem£t
 (&
if_ªq
, 0, (if_req));

287 
if_ªq
.
ú_öãrÁ˚
 = 
ªs
->
ai_ªcv_addrs
[0].
g§_öãrÁ˚
;

288 
if_ªq
.
ú_sc›e_id
 = 0;

289 i‡(
AF_INET6
 =
ß_Ámûy
) {

290 
sockaddr_ö6
 
ß6
;

291 
	`mem˝y
 (&
ß6
, &
ªs
->
ai_ªcv_addrs
[0].
g§_group
,  (sa6));

292 
if_ªq
.
ú_sc›e_id
 = 
ß6
.
sö6_sc›e_id
;

294 i‡(!
	`pgm_böd3
 (
sock
, &
addr
,  (addr), &
if_ªq
,  (if_req),

295 &
if_ªq
,  (if_ªq), &
pgm_îr‹
)) {

298 
	`zmq_as£π
 (
pgm_îr‹
 !
NULL
);

299 i‡((
pgm_îr‹
->
domaö
 =
PGM_ERROR_DOMAIN_SOCKET
 ||

300 
pgm_îr‹
->
domaö
 =
PGM_ERROR_DOMAIN_IF
) && (

301 
pgm_îr‹
->
code
 !
PGM_ERROR_INVAL
 &&

302 
pgm_îr‹
->
code
 !
PGM_ERROR_BADF
 &&

303 
pgm_îr‹
->
code
 !
PGM_ERROR_FAULT
))

306 
îr_ab‹t
;

309 
	`zmq_as£π
 (
Ál£
);

313 
i
 = 0; i < 
ªs
->
ai_ªcv_addrs_Àn
; i++) {

314 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_JOIN_GROUP
,

315 &
ªs
->
ai_ªcv_addrs
 [
i
],  (
group_ªq
)))

316 
îr_ab‹t
;

318 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_SEND_GROUP
,

319 &
ªs
->
ai_£nd_addrs
 [0],  (
group_ªq
)))

320 
îr_ab‹t
;

322 
	`pgm_‰ìaddröfo
 (
ªs
);

323 
ªs
 = 
NULL
;

328 c⁄° 
mu…iˇ°_lo›
 = 0;

329 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_MULTICAST_LOOP
,

330 &
mu…iˇ°_lo›
,  (multicast_loop)))

331 
îr_ab‹t
;

333 c⁄° 
mu…iˇ°_h›s
 = 
›ti⁄s
.multicast_hops;

334 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_MULTICAST_HOPS
,

335 &
mu…iˇ°_h›s
,  (multicast_hops)))

336 
îr_ab‹t
;

340 c⁄° 
ds˝
 = 0x2e << 2;

341 i‡(
AF_INET6
 !
ß_Ámûy
)

342 
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_TOS
,

343 &
ds˝
,  (dscp));

345 c⁄° 
n⁄blockög
 = 1;

346 i‡(!
	`pgm_£tsock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_NOBLOCK
,

347 &
n⁄blockög
,  (nonblocking)))

348 
îr_ab‹t
;

352 i‡(!
	`pgm_c⁄√˘
 (
sock
, &
pgm_îr‹
)) {

355 
	`zmq_as£π
 (
pgm_îr‹
 !
NULL
);

356 
îr_ab‹t
;

360 i‡(
ª˚ivî
) {

361 
	`zmq_as£π
 (
ö_b©ch_size
 > 0);

362 
size_t
 
max_tsdu_size
 = 
	`gë_max_tsdu_size
 ();

363 
pgm_msgv_Àn
 = (Ë
ö_b©ch_size
 / 
max_tsdu_size
;

364 i‡((Ë
ö_b©ch_size
 % 
max_tsdu_size
)

365 
pgm_msgv_Àn
++;

366 
	`zmq_as£π
 (
pgm_msgv_Àn
);

368 
pgm_msgv
 = (
pgm_msgv_t
*Ë
	`mÆloc
 ( (pgm_msgv_tË* 
pgm_msgv_Àn
);

369 
	`Æloc_as£π
 (
pgm_msgv
);

374 
îr_ab‹t
:

375 i‡(
sock
 !
NULL
) {

376 
	`pgm_˛o£
 (
sock
, 
FALSE
);

377 
sock
 = 
NULL
;

379 i‡(
ªs
 !
NULL
) {

380 
	`pgm_‰ìaddröfo
 (
ªs
);

381 
ªs
 = 
NULL
;

383 i‡(
pgm_îr‹
 !
NULL
) {

384 
	`pgm_îr‹_‰ì
 (
pgm_îr‹
);

385 
pgm_îr‹
 = 
NULL
;

387 
î∫o
 = 
EINVAL
;

389 
	}
}

391 
	gzmq
::
pgm_sockë_t
::~
	$pgm_sockë_t
 ()

393 i‡(
pgm_msgv
)

394 
	`‰ì
 (
pgm_msgv
);

395 i‡(
sock
)

396 
	`pgm_˛o£
 (
sock
, 
TRUE
);

397 
	}
}

401 
	gzmq
::
pgm_sockë_t
::
	$gë_ª˚ivî_fds
 (
fd_t
 *
ª˚ive_fd_
,

402 
fd_t
 *
waôög_pùe_fd_
)

404 
sockÀn_t
 
sockÀn
;

405 
boﬁ
 
rc
;

407 
	`zmq_as£π
 (
ª˚ive_fd_
);

408 
	`zmq_as£π
 (
waôög_pùe_fd_
);

410 
sockÀn
 =  (*
ª˚ive_fd_
);

411 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_RECV_SOCK
, 
ª˚ive_fd_
,

412 &
sockÀn
);

413 
	`zmq_as£π
 (
rc
);

414 
	`zmq_as£π
 (
sockÀn
 = (*
ª˚ive_fd_
));

416 
sockÀn
 =  (*
waôög_pùe_fd_
);

417 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_PENDING_SOCK
, 
waôög_pùe_fd_
,

418 &
sockÀn
);

419 
	`zmq_as£π
 (
rc
);

420 
	`zmq_as£π
 (
sockÀn
 = (*
waôög_pùe_fd_
));

421 
	}
}

428 
	gzmq
::
pgm_sockë_t
::
	$gë_£ndî_fds
 (
fd_t
 *
£nd_fd_
, fd_à*
ª˚ive_fd_
,

429 
fd_t
 *
rd©a_nŸify_fd_
, fd_à*
≥ndög_nŸify_fd_
)

431 
sockÀn_t
 
sockÀn
;

432 
boﬁ
 
rc
;

434 
	`zmq_as£π
 (
£nd_fd_
);

435 
	`zmq_as£π
 (
ª˚ive_fd_
);

436 
	`zmq_as£π
 (
rd©a_nŸify_fd_
);

437 
	`zmq_as£π
 (
≥ndög_nŸify_fd_
);

439 
sockÀn
 =  (*
£nd_fd_
);

440 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_SEND_SOCK
, 
£nd_fd_
, &
sockÀn
);

441 
	`zmq_as£π
 (
rc
);

442 
	`zmq_as£π
 (
sockÀn
 = (*
ª˚ive_fd_
));

444 
sockÀn
 =  (*
ª˚ive_fd_
);

445 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_RECV_SOCK
, 
ª˚ive_fd_
,

446 &
sockÀn
);

447 
	`zmq_as£π
 (
rc
);

448 
	`zmq_as£π
 (
sockÀn
 = (*
ª˚ive_fd_
));

450 
sockÀn
 =  (*
rd©a_nŸify_fd_
);

451 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_REPAIR_SOCK
, 
rd©a_nŸify_fd_
,

452 &
sockÀn
);

453 
	`zmq_as£π
 (
rc
);

454 
	`zmq_as£π
 (
sockÀn
 = (*
rd©a_nŸify_fd_
));

456 
sockÀn
 =  (*
≥ndög_nŸify_fd_
);

457 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_PENDING_SOCK
,

458 
≥ndög_nŸify_fd_
, &
sockÀn
);

459 
	`zmq_as£π
 (
rc
);

460 
	`zmq_as£π
 (
sockÀn
 = (*
≥ndög_nŸify_fd_
));

461 
	}
}

465 
size_t
 
	gzmq
::
pgm_sockë_t
::
	$£nd
 (*
d©a_
, 
size_t
 
d©a_Àn_
)

467 
size_t
 
nbyãs
 = 0;

469 c⁄° 
°©us
 = 
	`pgm_£nd
 (
sock
, 
d©a_
, 
d©a_Àn_
, &
nbyãs
);

472 i‡(
nbyãs
 > 0) {

473 
	`zmq_as£π
 (
°©us
 =
PGM_IO_STATUS_NORMAL
);

474 
	`zmq_as£π
 (
nbyãs
 =
d©a_Àn_
);

477 
	`zmq_as£π
 (
°©us
 =
PGM_IO_STATUS_RATE_LIMITED
 ||

478 
°©us
 =
PGM_IO_STATUS_WOULD_BLOCK
);

480 i‡(
°©us
 =
PGM_IO_STATUS_RATE_LIMITED
)

481 
î∫o
 = 
ENOMEM
;

483 
î∫o
 = 
EBUSY
;

487 
œ°_tx_°©us
 = 
°©us
;

489  
nbyãs
;

490 
	}
}

492 
	gzmq
::
pgm_sockë_t
::
	$gë_rx_timeout
 ()

494 i‡(
œ°_rx_°©us
 !
PGM_IO_STATUS_RATE_LIMITED
 &&

495 
œ°_rx_°©us
 !
PGM_IO_STATUS_TIMER_PENDING
)

498 
timevÆ
 
tv
;

499 
sockÀn_t
 
›éí
 =  (
tv
);

500 c⁄° 
boﬁ
 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
,

501 
œ°_rx_°©us
 =
PGM_IO_STATUS_RATE_LIMITED
 ? 
PGM_RATE_REMAIN
 :

502 
PGM_TIME_REMAIN
, &
tv
, &
›éí
);

503 
	`zmq_as£π
 (
rc
);

505 c⁄° 
timeout
 = (
tv
.
tv_£c
 * 1000Ë+ (tv.
tv_u£c
 / 1000);

507  
timeout
;

508 
	}
}

510 
	gzmq
::
pgm_sockë_t
::
	$gë_tx_timeout
 ()

512 i‡(
œ°_tx_°©us
 !
PGM_IO_STATUS_RATE_LIMITED
)

515 
timevÆ
 
tv
;

516 
sockÀn_t
 
›éí
 =  (
tv
);

517 c⁄° 
boﬁ
 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_RATE_REMAIN
, &
tv
,

518 &
›éí
);

519 
	`zmq_as£π
 (
rc
);

521 c⁄° 
timeout
 = (
tv
.
tv_£c
 * 1000Ë+ (tv.
tv_u£c
 / 1000);

523  
timeout
;

524 
	}
}

527 
size_t
 
	gzmq
::
pgm_sockë_t
::
	$gë_max_tsdu_size
 ()

529 
max_tsdu
 = 0;

530 
sockÀn_t
 
›éí
 =  (
max_tsdu
);

532 
boﬁ
 
rc
 = 
	`pgm_gësock›t
 (
sock
, 
IPPROTO_PGM
, 
PGM_MSS
, &
max_tsdu
, &
›éí
);

533 
	`zmq_as£π
 (
rc
);

534 
	`zmq_as£π
 (
›éí
 = (
max_tsdu
));

535  (
size_t
Ë
max_tsdu
;

536 
	}
}

540 
ssize_t
 
	gzmq
::
pgm_sockë_t
::
	$ª˚ive
 (**
øw_d©a_
, c⁄° 
pgm_tsi_t
 **
tsi_
)

542 
size_t
 
øw_d©a_Àn
 = 0;

546 i‡(
nbyãs_ªc
 =
nbyãs_¥o˚s£d
 &&Çbytes_rec > 0) {

549 
nbyãs_ªc
 = 0;

550 
nbyãs_¥o˚s£d
 = 0;

551 
pgm_msgv_¥o˚s£d
 = 0;

552 
î∫o
 = 
EAGAIN
;

558 i‡(
nbyãs_ªc
 =
nbyãs_¥o˚s£d
) {

561 
	`zmq_as£π
 (
pgm_msgv_¥o˚s£d
 == 0);

562 
	`zmq_as£π
 (
nbyãs_¥o˚s£d
 == 0);

563 
	`zmq_as£π
 (
nbyãs_ªc
 == 0);

567 
pgm_îr‹_t
 *
pgm_îr‹
 = 
NULL
;

569 c⁄° 
°©us
 = 
	`pgm_ªcvmsgv
 (
sock
, 
pgm_msgv
,

570 
pgm_msgv_Àn
, 
MSG_ERRQUEUE
, &
nbyãs_ªc
, &
pgm_îr‹
);

573 
	`zmq_as£π
 (
°©us
 !
PGM_IO_STATUS_ERROR
);

575 
œ°_rx_°©us
 = 
°©us
;

579 i‡(
°©us
 =
PGM_IO_STATUS_TIMER_PENDING
) {

581 
	`zmq_as£π
 (
nbyãs_ªc
 == 0);

585 
nbyãs_ªc
 = 0;

586 
î∫o
 = 
EBUSY
;

591 i‡(
°©us
 =
PGM_IO_STATUS_RATE_LIMITED
) {

593 
	`zmq_as£π
 (
nbyãs_ªc
 == 0);

596 
nbyãs_ªc
 = 0;

597 
î∫o
 = 
ENOMEM
;

602 i‡(
°©us
 =
PGM_IO_STATUS_WOULD_BLOCK
) {

604 
	`zmq_as£π
 (
nbyãs_ªc
 == 0);

607 
nbyãs_ªc
 = 0;

608 
î∫o
 = 
EAGAIN
;

613 i‡(
°©us
 =
PGM_IO_STATUS_RESET
) {

615 
pgm_sk_buff_t
* 
skb
 = 
pgm_msgv
 [0].
msgv_skb
 [0];

618 *
tsi_
 = &
skb
->
tsi
;

619 
nbyãs_ªc
 = 0;

622 
î∫o
 = 
EINVAL
;

623 
	`pgm_‰ì_skb
 (
skb
);

627 
	`zmq_as£π
 (
°©us
 =
PGM_IO_STATUS_NORMAL
);

631 
	`zmq_as£π
 (
pgm_msgv_¥o˚s£d
 <
pgm_msgv_Àn
);

635 
	`zmq_as£π
 (
nbyãs_ªc
 > 0);

638 
	`zmq_as£π
 (
pgm_msgv
 [
pgm_msgv_¥o˚s£d
].
msgv_Àn
 == 1);

640 
pgm_sk_buff_t
* 
skb
 =

641 
pgm_msgv
 [
pgm_msgv_¥o˚s£d
].
msgv_skb
 [0];

644 *
øw_d©a_
 = 
skb
->
d©a
;

645 
øw_d©a_Àn
 = 
skb
->
Àn
;

648 *
tsi_
 = &
skb
->
tsi
;

651 
pgm_msgv_¥o˚s£d
++;

652 
	`zmq_as£π
 (
pgm_msgv_¥o˚s£d
 <
pgm_msgv_Àn
);

653 
nbyãs_¥o˚s£d
 +=
øw_d©a_Àn
;

655  
øw_d©a_Àn
;

656 
	}
}

658 
	gzmq
::
pgm_sockë_t
::
	$¥o˚ss_up°ªam
 ()

660 
pgm_msgv_t
 
dummy_msg
;

662 
size_t
 
dummy_byãs
 = 0;

663 
pgm_îr‹_t
 *
pgm_îr‹
 = 
NULL
;

665 c⁄° 
°©us
 = 
	`pgm_ªcvmsgv
 (
sock
, &
dummy_msg
,

666 1, 
MSG_ERRQUEUE
, &
dummy_byãs
, &
pgm_îr‹
);

669 
	`zmq_as£π
 (
°©us
 !
PGM_IO_STATUS_ERROR
);

672 
	`zmq_as£π
 (
dummy_byãs
 =0 && (
°©us
 =
PGM_IO_STATUS_TIMER_PENDING
 ||

673 
°©us
 =
PGM_IO_STATUS_RATE_LIMITED
 ||

674 
°©us
 =
PGM_IO_STATUS_WOULD_BLOCK
));

676 
œ°_rx_°©us
 = 
°©us
;

678 i‡(
°©us
 =
PGM_IO_STATUS_TIMER_PENDING
)

679 
î∫o
 = 
EBUSY
;

681 i‡(
°©us
 =
PGM_IO_STATUS_RATE_LIMITED
)

682 
î∫o
 = 
ENOMEM
;

684 
î∫o
 = 
EAGAIN
;

685 
	}
}

687 
	gzmq
::
pgm_sockë_t
::
	$compuã_sqns
 (
çdu_
)

690 
uöt64_t
 
øã
 = 
	`uöt64_t
 (
›ti⁄s
.rate) / 8;

693 
uöt64_t
 
size
 = 
	`uöt64_t
 (
›ti⁄s
.
ªcovîy_ivl
Ë* 
øã
;

696 
uöt64_t
 
sqns
 = 
size
 / 
çdu_
;

699 i‡(
sqns
 == 0)

700 
sqns
 = 1;

702  (Ë
sqns
;

703 
	}
}

	@pgm_socket.hpp

20 #i‚de‡
__PGM_SOCKET_HPP_INCLUDED__


21 
	#__PGM_SOCKET_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


27 #ifde‡
ZMQ_HAVE_WINDOWS


28 
	~"wödows.hµ
"

29 
	#__PGM_WININT_H__


	)

32 
	~<pgm/pgm.h
>

34 #ifde‡
ZMQ_HAVE_OSX


35 
	~<pgm/ö.h
>

38 
	~"fd.hµ
"

39 
	~"›ti⁄s.hµ
"

41 
«me•a˚
 
	gzmq


44 ˛as†
	cpgm_sockë_t


47 
	gpublic
:

50 
pgm_sockë_t
 (
boﬁ
 
ª˚ivî_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

53 ~
pgm_sockë_t
 ();

56 
öô
 (
boﬁ
 
udp_íˇpsuœti⁄_
, c⁄° *
√tw‹k_
);

59 
öô_addªss
(c⁄° *
√tw‹k_
, 
pgm_addröfo_t
 **
addr
, 
uöt16_t
 *
p‹t_numbî
);

62 
gë_ª˚ivî_fds
 (
fd_t
 *
ª˚ive_fd_
, fd_à*
waôög_pùe_fd_
);

66 
gë_£ndî_fds
 (
fd_t
 *
£nd_fd_
, fd_à*
ª˚ive_fd_
,

67 
fd_t
 *
rd©a_nŸify_fd_
, fd_à*
≥ndög_nŸify_fd_
);

70 
size_t
 
£nd
 (*
d©a_
, size_à
d©a_Àn_
);

73 
size_t
 
gë_max_tsdu_size
 ();

76 
ssize_t
 
ª˚ive
 (**
d©a_
, c⁄° 
pgm_tsi_t
 **
tsi_
);

78 
gë_rx_timeout
 ();

79 
gë_tx_timeout
 ();

83 
¥o˚ss_up°ªam
 ();

85 
	g¥iv©e
:

88 
compuã_sqns
 (
çdu_
);

91 
pgm_sock_t
* 
	gsock
;

93 
	gœ°_rx_°©us
, 
	gœ°_tx_°©us
;

96 
›ti⁄s_t
 
	g›ti⁄s
;

99 
boﬁ
 
	gª˚ivî
;

103 
pgm_msgv_t
 *
	gpgm_msgv
;

106 
size_t
 
	gpgm_msgv_Àn
;

109 
size_t
 
	gnbyãs_ªc
;

112 
size_t
 
	gnbyãs_¥o˚s£d
;

115 
size_t
 
	gpgm_msgv_¥o˚s£d
;

	@pipe.cpp

20 
	~<√w
>

21 
	~<°ddef.h
>

23 
	~"pùe.hµ
"

24 
	~"îr.hµ
"

26 
	~"ypùe.hµ
"

27 
	~"ypùe_c⁄Ê©e.hµ
"

29 
	gzmq
::
	$pùïaú
 (
˛ass
 
obje˘_t
 *
∑ª¡s_
 [2], cœs†
pùe_t
* 
pùes_
 [2],

30 
hwms_
 [2], 
boﬁ
 
c⁄Ê©e_
 [2])

35 
ypùe_t
 <
	tmsg_t
, 
	tmesßge_pùe_gønuœrôy
> 
	tupùe_n‹mÆ_t
;

36 
ypùe_c⁄Ê©e_t
 <
	tmsg_t
, 
	tmesßge_pùe_gønuœrôy
> 
	tupùe_c⁄Ê©e_t
;

38 
pùe_t
::
upùe_t
 *
upùe1
;

39 if(
c⁄Ê©e_
 [0])

40 
upùe1
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`upùe_c⁄Ê©e_t
 ();

42 
upùe1
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`upùe_n‹mÆ_t
 ();

43 
	`Æloc_as£π
 (
upùe1
);

45 
pùe_t
::
upùe_t
 *
upùe2
;

46 if(
c⁄Ê©e_
 [1])

47 
upùe2
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`upùe_c⁄Ê©e_t
 ();

49 
upùe2
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`upùe_n‹mÆ_t
 ();

50 
	`Æloc_as£π
 (
upùe2
);

52 
pùes_
 [0] = 
	`√w
 (
°d
::
nŸhrow
Ë
	`pùe_t
 (
∑ª¡s_
 [0], 
upùe1
, 
upùe2
,

53 
hwms_
 [1], hwms_ [0], 
c⁄Ê©e_
 [0]);

54 
	`Æloc_as£π
 (
pùes_
 [0]);

55 
pùes_
 [1] = 
	`√w
 (
°d
::
nŸhrow
Ë
	`pùe_t
 (
∑ª¡s_
 [1], 
upùe2
, 
upùe1
,

56 
hwms_
 [0], hwms_ [1], 
c⁄Ê©e_
 [1]);

57 
	`Æloc_as£π
 (
pùes_
 [1]);

59 
pùes_
 [0]->
	`£t_≥î
 (pipes_ [1]);

60 
pùes_
 [1]->
	`£t_≥î
 (pipes_ [0]);

63 
	}
}

65 
	gzmq
::
pùe_t
::
	$pùe_t
 (
obje˘_t
 *
∑ª¡_
, 
upùe_t
 *
öpùe_
, upùe_à*
ouçùe_
,

66 
öhwm_
, 
outhwm_
, 
boﬁ
 
c⁄Ê©e_
) :

67 
	`obje˘_t
 (
∑ª¡_
),

68 
	`öpùe
 (
öpùe_
),

69 
	`ouçùe
 (
ouçùe_
),

70 
	`ö_a˘ive
 (
åue
),

71 
	`out_a˘ive
 (
åue
),

72 
	`hwm
 (
outhwm_
),

73 
	`lwm
 (
	`compuã_lwm
 (
öhwm_
)),

74 
	`msgs_ªad
 (0),

75 
	`msgs_wrôãn
 (0),

76 
	`≥îs_msgs_ªad
 (0),

77 
	`≥î
 (
NULL
),

78 
	`sök
 (
NULL
),

79 
	`°©e
 (
a˘ive
),

80 
	`dñay
 (
åue
),

81 
	$c⁄Ê©e
 (
c⁄Ê©e_
)

83 
	}
}

85 
	gzmq
::
pùe_t
::~
	$pùe_t
 ()

87 
	}
}

89 
zmq
::
pùe_t
::
	$£t_≥î
 (
pùe_t
 *
≥î_
)

92 
	`zmq_as£π
 (!
≥î
);

93 
≥î
 = 
≥î_
;

94 
	}
}

96 
	gzmq
::
pùe_t
::
	$£t_evít_sök
 (
i_pùe_evíts
 *
sök_
)

99 
	`zmq_as£π
 (!
sök
);

100 
sök
 = 
sök_
;

101 
	}
}

103 
	gzmq
::
pùe_t
::
	$£t_idítôy
 (c⁄° 
blob_t
 &
idítôy_
)

105 
idítôy
 = 
idítôy_
;

106 
	}
}

108 
	gzmq
::
blob_t
 
zmq
::
pùe_t
::
	$gë_idítôy
 ()

110  
idítôy
;

111 
	}
}

113 
boﬁ
 
	gzmq
::
pùe_t
::
	$check_ªad
 ()

115 i‡(
	`u∆ikñy
 (!
ö_a˘ive
))

116  
Ál£
;

117 i‡(
	`u∆ikñy
 (
°©e
 !
a˘ive
 && sèã !
waôög_f‹_dñimôî
))

118  
Ál£
;

121 i‡(!
öpùe
->
	`check_ªad
 ()) {

122 
ö_a˘ive
 = 
Ál£
;

123  
Ál£
;

128 i‡(
öpùe
->
	`¥obe
 (
is_dñimôî
)) {

129 
msg_t
 
msg
;

130 
boﬁ
 
ok
 = 
öpùe
->
	`ªad
 (&
msg
);

131 
	`zmq_as£π
 (
ok
);

132 
	`¥o˚ss_dñimôî
 ();

133  
Ál£
;

136  
åue
;

137 
	}
}

139 
boﬁ
 
	gzmq
::
pùe_t
::
	$ªad
 (
msg_t
 *
msg_
)

141 i‡(
	`u∆ikñy
 (!
ö_a˘ive
))

142  
Ál£
;

143 i‡(
	`u∆ikñy
 (
°©e
 !
a˘ive
 && sèã !
waôög_f‹_dñimôî
))

144  
Ál£
;

146 i‡(!
öpùe
->
	`ªad
 (
msg_
)) {

147 
ö_a˘ive
 = 
Ál£
;

148  
Ál£
;

152 i‡(
msg_
->
	`is_dñimôî
 ()) {

153 
	`¥o˚ss_dñimôî
 ();

154  
Ál£
;

157 i‡(!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
Ë&& !msg_->
	`is_idítôy
 ())

158 
msgs_ªad
++;

160 i‡(
lwm
 > 0 && 
msgs_ªad
 %Üwm == 0)

161 
	`£nd_a˘iv©e_wrôe
 (
≥î
, 
msgs_ªad
);

163  
åue
;

164 
	}
}

166 
boﬁ
 
	gzmq
::
pùe_t
::
	$check_wrôe
 ()

168 i‡(
	`u∆ikñy
 (!
out_a˘ive
 || 
°©e
 !
a˘ive
))

169  
Ál£
;

171 
boﬁ
 
fuŒ
 = 
hwm
 > 0 && 
msgs_wrôãn
 - 
≥îs_msgs_ªad
 =
	`uöt64_t
 (hwm);

173 i‡(
	`u∆ikñy
 (
fuŒ
)) {

174 
out_a˘ive
 = 
Ál£
;

175  
Ál£
;

178  
åue
;

179 
	}
}

181 
boﬁ
 
	gzmq
::
pùe_t
::
	$wrôe
 (
msg_t
 *
msg_
)

183 i‡(
	`u∆ikñy
 (!
	`check_wrôe
 ()))

184  
Ál£
;

186 
boﬁ
 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹ê? 
åue
 : 
Ál£
;

187 c⁄° 
boﬁ
 
is_idítôy
 = 
msg_
->
	`is_idítôy
 ();

188 
ouçùe
->
	`wrôe
 (*
msg_
, 
m‹e
);

189 i‡(!
m‹e
 && !
is_idítôy
)

190 
msgs_wrôãn
++;

192  
åue
;

193 
	}
}

195 
	gzmq
::
pùe_t
::
	$rﬁlback
 ()

198 
msg_t
 
msg
;

199 i‡(
ouçùe
) {

200 
ouçùe
->
	`unwrôe
 (&
msg
)) {

201 
	`zmq_as£π
 (
msg
.
	`Êags
 (Ë& 
msg_t
::
m‹e
);

202 
rc
 = 
msg
.
	`˛o£
 ();

203 
	`î∫o_as£π
 (
rc
 == 0);

206 
	}
}

208 
	gzmq
::
pùe_t
::
	$Êush
 ()

211 i‡(
°©e
 =
ãrm_ack_£¡
)

214 i‡(
ouçùe
 && !ouçùe->
	`Êush
 ())

215 
	`£nd_a˘iv©e_ªad
 (
≥î
);

216 
	}
}

218 
	gzmq
::
pùe_t
::
	$¥o˚ss_a˘iv©e_ªad
 ()

220 i‡(!
ö_a˘ive
 && (
°©e
 =
a˘ive
 || sèã =
waôög_f‹_dñimôî
)) {

221 
ö_a˘ive
 = 
åue
;

222 
sök
->
	`ªad_a˘iv©ed
 (
this
);

224 
	}
}

226 
	gzmq
::
pùe_t
::
	$¥o˚ss_a˘iv©e_wrôe
 (
uöt64_t
 
msgs_ªad_
)

229 
≥îs_msgs_ªad
 = 
msgs_ªad_
;

231 i‡(!
out_a˘ive
 && 
°©e
 =
a˘ive
) {

232 
out_a˘ive
 = 
åue
;

233 
sök
->
	`wrôe_a˘iv©ed
 (
this
);

235 
	}
}

237 
	gzmq
::
pùe_t
::
	$¥o˚ss_hiccup
 (*
pùe_
)

241 
	`zmq_as£π
 (
ouçùe
);

242 
ouçùe
->
	`Êush
 ();

243 
msg_t
 
msg
;

244 
ouçùe
->
	`ªad
 (&
msg
)) {

245 
rc
 = 
msg
.
	`˛o£
 ();

246 
	`î∫o_as£π
 (
rc
 == 0);

248 
dñëe
 
ouçùe
;

251 
	`zmq_as£π
 (
pùe_
);

252 
ouçùe
 = (
upùe_t
*Ë
pùe_
;

253 
out_a˘ive
 = 
åue
;

256 i‡(
°©e
 =
a˘ive
)

257 
sök
->
	`hiccu≥d
 (
this
);

258 
	}
}

260 
	gzmq
::
pùe_t
::
	$¥o˚ss_pùe_ãrm
 ()

267 i‡(
°©e
 =
a˘ive
) {

268 i‡(!
dñay
) {

269 
°©e
 = 
ãrm_ack_£¡
;

270 
ouçùe
 = 
NULL
;

271 
	`£nd_pùe_ãrm_ack
 (
≥î
);

274 
°©e
 = 
waôög_f‹_dñimôî
;

280 i‡(
°©e
 =
dñimôî_ª˚ived
) {

281 
°©e
 = 
ãrm_ack_£¡
;

282 
ouçùe
 = 
NULL
;

283 
	`£nd_pùe_ãrm_ack
 (
≥î
);

290 i‡(
°©e
 =
ãrm_ªq_£¡1
) {

291 
°©e
 = 
ãrm_ªq_£¡2
;

292 
ouçùe
 = 
NULL
;

293 
	`£nd_pùe_ãrm_ack
 (
≥î
);

298 
	`zmq_as£π
 (
Ál£
);

299 
	}
}

301 
	gzmq
::
pùe_t
::
	$¥o˚ss_pùe_ãrm_ack
 ()

304 
	`zmq_as£π
 (
sök
);

305 
sök
->
	`pùe_ãrmö©ed
 (
this
);

311 i‡(
°©e
 =
ãrm_ªq_£¡1
) {

312 
ouçùe
 = 
NULL
;

313 
	`£nd_pùe_ãrm_ack
 (
≥î
);

316 
	`zmq_as£π
 (
°©e
 =
ãrm_ack_£¡
 || sèã =
ãrm_ªq_£¡2
);

324 i‡(!
c⁄Ê©e
) {

325 
msg_t
 
msg
;

326 
öpùe
->
	`ªad
 (&
msg
)) {

327 
rc
 = 
msg
.
	`˛o£
 ();

328 
	`î∫o_as£π
 (
rc
 == 0);

332 
dñëe
 
öpùe
;

335 
dñëe
 
this
;

336 
	}
}

338 
	gzmq
::
pùe_t
::
	$£t_nodñay
 ()

340 
this
->
dñay
 = 
Ál£
;

341 
	}
}

343 
	gzmq
::
pùe_t
::
	$ãrmö©e
 (
boﬁ
 
dñay_
)

346 
dñay
 = 
dñay_
;

349 i‡(
°©e
 =
ãrm_ªq_£¡1
 || sèã =
ãrm_ªq_£¡2
)

355 i‡(
°©e
 =
ãrm_ack_£¡
)

361 i‡(
°©e
 =
a˘ive
) {

362 
	`£nd_pùe_ãrm
 (
≥î
);

363 
°©e
 = 
ãrm_ªq_£¡1
;

369 i‡(
°©e
 =
waôög_f‹_dñimôî
 && !
dñay
) {

370 
ouçùe
 = 
NULL
;

371 
	`£nd_pùe_ãrm_ack
 (
≥î
);

372 
°©e
 = 
ãrm_ack_£¡
;

377 i‡(
°©e
 =
waôög_f‹_dñimôî
) {

384 i‡(
°©e
 =
dñimôî_ª˚ived
) {

385 
	`£nd_pùe_ãrm
 (
≥î
);

386 
°©e
 = 
ãrm_ªq_£¡1
;

391 
	`zmq_as£π
 (
Ál£
);

394 
out_a˘ive
 = 
Ál£
;

396 i‡(
ouçùe
) {

399 
	`rﬁlback
 ();

403 
msg_t
 
msg
;

404 
msg
.
	`öô_dñimôî
 ();

405 
ouçùe
->
	`wrôe
 (
msg
, 
Ál£
);

406 
	`Êush
 ();

408 
	}
}

410 
boﬁ
 
	gzmq
::
pùe_t
::
	$is_dñimôî
 (
msg_t
 &
msg_
)

412  
msg_
.
	`is_dñimôî
 ();

413 
	}
}

415 
	gzmq
::
pùe_t
::
	$compuã_lwm
 (
hwm_
)

437 
ªsu…
 = (
hwm_
 > 
max_wm_dñè
 * 2) ?

438 
hwm_
 - 
max_wm_dñè
 : (hwm_ + 1) / 2;

440  
ªsu…
;

441 
	}
}

443 
	gzmq
::
pùe_t
::
	$¥o˚ss_dñimôî
 ()

445 
	`zmq_as£π
 (
°©e
 =
a˘ive


446 || 
°©e
 =
waôög_f‹_dñimôî
);

448 i‡(
°©e
 =
a˘ive
)

449 
°©e
 = 
dñimôî_ª˚ived
;

451 
ouçùe
 = 
NULL
;

452 
	`£nd_pùe_ãrm_ack
 (
≥î
);

453 
°©e
 = 
ãrm_ack_£¡
;

455 
	}
}

457 
	gzmq
::
pùe_t
::
	$hiccup
 ()

460 i‡(
°©e
 !
a˘ive
)

465 
öpùe
 = 
NULL
;

468 i‡(
c⁄Ê©e
)

469 
öpùe
 = 
	`√w
 (
°d
::
nŸhrow
)

470 
ypùe_c⁄Ê©e_t
 <
msg_t
, 
mesßge_pùe_gønuœrôy
> ();

472 
öpùe
 = 
	`√w
 (
°d
::
nŸhrow
)

473 
ypùe_t
 <
msg_t
, 
mesßge_pùe_gønuœrôy
> ();

475 
	`Æloc_as£π
 (
öpùe
);

476 
ö_a˘ive
 = 
åue
;

479 
	`£nd_hiccup
 (
≥î
, (*Ë
öpùe
);

480 
	}
}

482 
	gzmq
::
pùe_t
::
	$£t_hwms
 (
öhwm_
, 
outhwm_
)

484 
lwm
 = 
	`compuã_lwm
 (
öhwm_
);

485 
hwm
 = 
outhwm_
;

486 
	}
}

	@pipe.hpp

20 #i‚de‡
__ZMQ_PIPE_HPP_INCLUDED__


21 
	#__ZMQ_PIPE_HPP_INCLUDED__


	)

23 
	~"msg.hµ
"

24 
	~"ypùe_ba£.hµ
"

25 
	~"c⁄fig.hµ
"

26 
	~"obje˘.hµ
"

27 
	~"°döt.hµ
"

28 
	~"¨øy.hµ
"

29 
	~"blob.hµ
"

31 
«me•a˚
 
	gzmq


34 
˛ass
 
	gobje˘_t
;

35 
˛ass
 
	gpùe_t
;

45 
pùïaú
 (
zmq
::
obje˘_t
 *
∑ª¡s_
 [2], zmq::
pùe_t
* 
pùes_
 [2],

46 
hwms_
 [2], 
boﬁ
 
c⁄Ê©e_
 [2]);

48 
	si_pùe_evíts


50 
	gvútuÆ
 ~
i_pùe_evíts
 () {}

52 
vútuÆ
 
ªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
) = 0;

53 
vútuÆ
 
wrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
) = 0;

54 
vútuÆ
 
hiccu≥d
 (
zmq
::
pùe_t
 *
pùe_
) = 0;

55 
vútuÆ
 
pùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
) = 0;

62 
˛ass
 
	gpùe_t
 :

63 
public
 
obje˘_t
,

64 
public
 
	g¨øy_ôem_t
 <1>,

65 
public
 
	g¨øy_ôem_t
 <2>,

66 
public
 
	g¨øy_ôem_t
 <3>

69 
‰õnd
 
pùïaú
 (
zmq
::
obje˘_t
 *
∑ª¡s_
 [2], zmq::
pùe_t
* 
pùes_
 [2],

70 
hwms_
 [2], 
boﬁ
 
c⁄Ê©e_
 [2]);

72 
	gpublic
:

75 
£t_evít_sök
 (
i_pùe_evíts
 *
sök_
);

78 
£t_idítôy
 (c⁄° 
blob_t
 &
idítôy_
);

79 
blob_t
 
gë_idítôy
 ();

82 
boﬁ
 
check_ªad
 ();

85 
boﬁ
 
ªad
 (
msg_t
 *
msg_
);

89 
boﬁ
 
check_wrôe
 ();

93 
boﬁ
 
wrôe
 (
msg_t
 *
msg_
);

96 
rﬁlback
 ();

99 
Êush
 ();

104 
hiccup
 ();

107 
£t_nodñay
 ();

113 
ãrmö©e
 (
boﬁ
 
dñay_
);

116 
£t_hwms
 (
öhwm_
, 
outhwm_
);

118 
	g¥iv©e
:

121 
ypùe_ba£_t
 <
	tmsg_t
, 
	tmesßge_pùe_gønuœrôy
> 
	tupùe_t
;

124 
¥o˚ss_a˘iv©e_ªad
 ();

125 
¥o˚ss_a˘iv©e_wrôe
 (
uöt64_t
 
msgs_ªad_
);

126 
¥o˚ss_hiccup
 (*
pùe_
);

127 
¥o˚ss_pùe_ãrm
 ();

128 
¥o˚ss_pùe_ãrm_ack
 ();

131 
¥o˚ss_dñimôî
 ();

135 
pùe_t
 (
obje˘_t
 *
∑ª¡_
, 
upùe_t
 *
öpùe_
, upùe_à*
ouçùe_
,

136 
öhwm_
, 
outhwm_
, 
boﬁ
 
c⁄Ê©e_
);

140 
£t_≥î
 (
pùe_t
 *
pùe_
);

143 ~
pùe_t
 ();

146 
upùe_t
 *
	göpùe
;

147 
upùe_t
 *
	gouçùe
;

150 
boﬁ
 
	gö_a˘ive
;

151 
boﬁ
 
	gout_a˘ive
;

154 
	ghwm
;

157 
	glwm
;

160 
uöt64_t
 
	gmsgs_ªad
;

161 
uöt64_t
 
	gmsgs_wrôãn
;

165 
uöt64_t
 
	g≥îs_msgs_ªad
;

168 
pùe_t
 *
	g≥î
;

171 
i_pùe_evíts
 *
	gsök
;

185 
	ga˘ive
,

186 
	gdñimôî_ª˚ived
,

187 
	gwaôög_f‹_dñimôî
,

188 
	gãrm_ack_£¡
,

189 
	gãrm_ªq_£¡1
,

190 
	gãrm_ªq_£¡2


191 } 
	g°©e
;

196 
boﬁ
 
	gdñay
;

199 
blob_t
 
	gidítôy
;

202 
boﬁ
 
is_dñimôî
 (
msg_t
 &
msg_
);

205 
compuã_lwm
 (
hwm_
);

207 
boﬁ
 
	gc⁄Ê©e
;

210 
pùe_t
 (constÖipe_t&);

211 c⁄° 
	gpùe_t
 &
	g›î©‹
 = (c⁄° 
pùe_t
&);

	@plain_mechanism.cpp

20 
	~"∂©f‹m.hµ
"

21 #ifde‡
ZMQ_HAVE_WINDOWS


22 
	~"wödows.hµ
"

25 
	~<°rög.h
>

26 
	~<°rög
>

28 
	~"msg.hµ
"

29 
	~"£ssi⁄_ba£.hµ
"

30 
	~"îr.hµ
"

31 
	~"∂aö_mech™ism.hµ
"

32 
	~"wúe.hµ
"

34 
	gzmq
::
∂aö_mech™ism_t
::
	$∂aö_mech™ism_t
 (
£ssi⁄_ba£_t
 *
£ssi⁄_
,

35 c⁄° 
°d
::
°rög
 &
≥î_addªss_
,

36 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

37 
	`mech™ism_t
 (
›ti⁄s_
),

38 
	`£ssi⁄
 (
£ssi⁄_
),

39 
	`≥î_addªss
 (
≥î_addªss_
),

40 
	`ex≥˘ög_z≠_ª∂y
 (
Ál£
),

41 
	`°©e
 (
›ti⁄s
.
as_£rvî
? 
waôög_f‹_hñlo
: 
£ndög_hñlo
)

43 
	}
}

45 
zmq
::
∂aö_mech™ism_t
::~
	$∂aö_mech™ism_t
 ()

47 
	}
}

49 
zmq
::
∂aö_mech™ism_t
::
	$√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
)

51 
rc
 = 0;

53 
°©e
) {

54 
£ndög_hñlo
:

55 
rc
 = 
	`¥odu˚_hñlo
 (
msg_
);

56 i‡(
rc
 == 0)

57 
°©e
 = 
waôög_f‹_wñcome
;

59 
£ndög_wñcome
:

60 
rc
 = 
	`¥odu˚_wñcome
 (
msg_
);

61 i‡(
rc
 == 0)

62 
°©e
 = 
waôög_f‹_öôüã
;

64 
£ndög_öôüã
:

65 
rc
 = 
	`¥odu˚_öôüã
 (
msg_
);

66 i‡(
rc
 == 0)

67 
°©e
 = 
waôög_f‹_ªady
;

69 
£ndög_ªady
:

70 
rc
 = 
	`¥odu˚_ªady
 (
msg_
);

71 i‡(
rc
 == 0)

72 
°©e
 = 
ªady
;

75 
î∫o
 = 
EAGAIN
;

76 
rc
 = -1;

78  
rc
;

79 
	}
}

81 
	gzmq
::
∂aö_mech™ism_t
::
	$¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
)

83 
rc
 = 0;

85 
°©e
) {

86 
waôög_f‹_hñlo
:

87 
rc
 = 
	`¥o˚ss_hñlo
 (
msg_
);

88 i‡(
rc
 == 0)

89 
°©e
 = 
ex≥˘ög_z≠_ª∂y
? 
waôög_f‹_z≠_ª∂y
: 
£ndög_wñcome
;

91 
waôög_f‹_wñcome
:

92 
rc
 = 
	`¥o˚ss_wñcome
 (
msg_
);

93 i‡(
rc
 == 0)

94 
°©e
 = 
£ndög_öôüã
;

96 
waôög_f‹_öôüã
:

97 
rc
 = 
	`¥o˚ss_öôüã
 (
msg_
);

98 i‡(
rc
 == 0)

99 
°©e
 = 
£ndög_ªady
;

101 
waôög_f‹_ªady
:

102 
rc
 = 
	`¥o˚ss_ªady
 (
msg_
);

103 i‡(
rc
 == 0)

104 
°©e
 = 
ªady
;

107 
î∫o
 = 
EPROTO
;

108 
rc
 = -1;

111 i‡(
rc
 == 0) {

112 
rc
 = 
msg_
->
	`˛o£
 ();

113 
	`î∫o_as£π
 (
rc
 == 0);

114 
rc
 = 
msg_
->
	`öô
 ();

115 
	`î∫o_as£π
 (
rc
 == 0);

117  
rc
;

118 
	}
}

120 
boﬁ
 
	gzmq
::
∂aö_mech™ism_t
::
	$is_h™dshake_com∂ëe
 () const

122  
°©e
 =
ªady
;

123 
	}
}

125 
	gzmq
::
∂aö_mech™ism_t
::
	$z≠_msg_avaûabÀ
 ()

127 i‡(
°©e
 !
waôög_f‹_z≠_ª∂y
) {

128 
î∫o
 = 
EFSM
;

131 c⁄° 
rc
 = 
	`ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

132 i‡(
rc
 == 0)

133 
°©e
 = 
£ndög_wñcome
;

134  
rc
;

135 
	}
}

137 
	gzmq
::
∂aö_mech™ism_t
::
	$¥odu˚_hñlo
 (
msg_t
 *
msg_
) const

139 c⁄° 
°d
::
°rög
 
u£∫ame
 = 
›ti⁄s
.
∂aö_u£∫ame
;

140 
	`zmq_as£π
 (
u£∫ame
.
	`Àngth
 () < 256);

142 c⁄° 
°d
::
°rög
 
∑ssw‹d
 = 
›ti⁄s
.
∂aö_∑ssw‹d
;

143 
	`zmq_as£π
 (
∑ssw‹d
.
	`Àngth
 () < 256);

145 c⁄° 
size_t
 
comm™d_size
 = 6 + 1 + 
u£∫ame
.
	`Àngth
 ()

146 + 1 + 
∑ssw‹d
.
	`Àngth
 ();

148 c⁄° 
rc
 = 
msg_
->
	`öô_size
 (
comm™d_size
);

149 
	`î∫o_as£π
 (
rc
 == 0);

151 *
±r
 = 
°©ic_ˇ°
 <*> (
msg_
->
	`d©a
 ());

152 
	`mem˝y
 (
±r
, "\x05HELLO", 6);

153 
±r
 += 6;

155 *
±r
++ = 
°©ic_ˇ°
 <> (
u£∫ame
.
	`Àngth
 ());

156 
	`mem˝y
 (
±r
, 
u£∫ame
.
	`c_°r
 (), u£∫ame.
	`Àngth
 ());

157 
±r
 +
u£∫ame
.
	`Àngth
 ();

159 *
±r
++ = 
°©ic_ˇ°
 <> (
∑ssw‹d
.
	`Àngth
 ());

160 
	`mem˝y
 (
±r
, 
∑ssw‹d
.
	`c_°r
 (),Öassw‹d.
	`Àngth
 ());

161 
±r
 +
∑ssw‹d
.
	`Àngth
 ();

164 
	}
}

167 
	gzmq
::
∂aö_mech™ism_t
::
	$¥o˚ss_hñlo
 (
msg_t
 *
msg_
)

169 c⁄° *
±r
 = 
°©ic_ˇ°
 <*> (
msg_
->
	`d©a
 ());

170 
size_t
 
byãs_À·
 = 
msg_
->
	`size
 ();

172 i‡(
byãs_À·
 < 6 || 
	`memcmp
 (
±r
, "\x05HELLO", 6)) {

173 
î∫o
 = 
EPROTO
;

176 
±r
 += 6;

177 
byãs_À·
 -= 6;

179 i‡(
byãs_À·
 < 1) {

180 
î∫o
 = 
EPROTO
;

183 c⁄° 
size_t
 
u£∫ame_Àngth
 = 
°©ic_ˇ°
 <size_t> (*
±r
++);

184 
byãs_À·
 -= 1;

186 i‡(
byãs_À·
 < 
u£∫ame_Àngth
) {

187 
î∫o
 = 
EPROTO
;

190 c⁄° 
°d
::
°rög
 
u£∫ame
 = std::
	`°rög
 ((*Ë
±r
, 
u£∫ame_Àngth
);

191 
±r
 +
u£∫ame_Àngth
;

192 
byãs_À·
 -
u£∫ame_Àngth
;

194 i‡(
byãs_À·
 < 1) {

195 
î∫o
 = 
EPROTO
;

198 c⁄° 
size_t
 
∑ssw‹d_Àngth
 = 
°©ic_ˇ°
 <size_t> (*
±r
++);

199 
byãs_À·
 -= 1;

201 i‡(
byãs_À·
 < 
∑ssw‹d_Àngth
) {

202 
î∫o
 = 
EPROTO
;

205 c⁄° 
°d
::
°rög
 
∑ssw‹d
 = std::
	`°rög
 ((*Ë
±r
, 
∑ssw‹d_Àngth
);

206 
±r
 +
∑ssw‹d_Àngth
;

207 
byãs_À·
 -
∑ssw‹d_Àngth
;

209 i‡(
byãs_À·
 > 0) {

210 
î∫o
 = 
EPROTO
;

215 
rc
 = 
£ssi⁄
->
	`z≠_c⁄√˘
 ();

216 i‡(
rc
 == 0) {

217 
	`£nd_z≠_ªque°
 (
u£∫ame
, 
∑ssw‹d
);

218 
rc
 = 
	`ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

219 i‡(
rc
 != 0) {

220 i‡(
î∫o
 !
EAGAIN
)

222 
ex≥˘ög_z≠_ª∂y
 = 
åue
;

227 
	}
}

229 
	gzmq
::
∂aö_mech™ism_t
::
	$¥odu˚_wñcome
 (
msg_t
 *
msg_
) const

231 c⁄° 
rc
 = 
msg_
->
	`öô_size
 (8);

232 
	`î∫o_as£π
 (
rc
 == 0);

233 
	`mem˝y
 (
msg_
->
	`d©a
 (), "\x07WELCOME", 8);

235 
	}
}

237 
	gzmq
::
∂aö_mech™ism_t
::
	$¥o˚ss_wñcome
 (
msg_t
 *
msg_
)

239 c⁄° *
±r
 = 
°©ic_ˇ°
 <*> (
msg_
->
	`d©a
 ());

240 
size_t
 
byãs_À·
 = 
msg_
->
	`size
 ();

242 i‡(
byãs_À·
 !8 || 
	`memcmp
 (
±r
, "\x07WELCOME", 8)) {

243 
î∫o
 = 
EPROTO
;

247 
	}
}

249 
	gzmq
::
∂aö_mech™ism_t
::
	$¥odu˚_öôüã
 (
msg_t
 *
msg_
) const

251 * c⁄° 
comm™d_buf„r
 = (*Ë
	`mÆloc
 (512);

252 
	`Æloc_as£π
 (
comm™d_buf„r
);

254 *
±r
 = 
comm™d_buf„r
;

257 
	`mem˝y
 (
±r
, "\x08INITIATE", 9);

258 
±r
 += 9;

261 c⁄° *
sockë_ty≥
 = 
	`sockë_ty≥_°rög
 (
›ti⁄s
.
ty≥
);

262 
±r
 +
	`add_¥›îty
 (±r, "Sockë-Ty≥", 
sockë_ty≥
, 
	`°æí
 (socket_type));

265 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_REQ


266 || 
›ti⁄s
.
ty≥
 =
ZMQ_DEALER


267 || 
›ti⁄s
.
ty≥
 =
ZMQ_ROUTER
) {

268 
±r
 +
	`add_¥›îty
 (ptr, "Identity",

269 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

272 c⁄° 
size_t
 
comm™d_size
 = 
±r
 - 
comm™d_buf„r
;

273 c⁄° 
rc
 = 
msg_
->
	`öô_size
 (
comm™d_size
);

274 
	`î∫o_as£π
 (
rc
 == 0);

275 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
comm™d_buf„r
, 
comm™d_size
);

276 
	`‰ì
 (
comm™d_buf„r
);

279 
	}
}

281 
	gzmq
::
∂aö_mech™ism_t
::
	$¥o˚ss_öôüã
 (
msg_t
 *
msg_
)

283 c⁄° *
±r
 = 
°©ic_ˇ°
 <*> (
msg_
->
	`d©a
 ());

284 
size_t
 
byãs_À·
 = 
msg_
->
	`size
 ();

286 i‡(
byãs_À·
 < 9 || 
	`memcmp
 (
±r
, "\x08INITIATE", 9)) {

287 
î∫o
 = 
EPROTO
;

290 
±r
 += 9;

291 
byãs_À·
 -= 9;

292  
	`∑r£_mëad©a
 (
±r
, 
byãs_À·
);

293 
	}
}

295 
	gzmq
::
∂aö_mech™ism_t
::
	$¥odu˚_ªady
 (
msg_t
 *
msg_
) const

297 * c⁄° 
comm™d_buf„r
 = (*Ë
	`mÆloc
 (512);

298 
	`Æloc_as£π
 (
comm™d_buf„r
);

300 *
±r
 = 
comm™d_buf„r
;

303 
	`mem˝y
 (
±r
, "\x05READY", 6);

304 
±r
 += 6;

307 c⁄° *
sockë_ty≥
 = 
	`sockë_ty≥_°rög
 (
›ti⁄s
.
ty≥
);

308 
±r
 +
	`add_¥›îty
 (±r, "Sockë-Ty≥", 
sockë_ty≥
, 
	`°æí
 (socket_type));

311 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_REQ


312 || 
›ti⁄s
.
ty≥
 =
ZMQ_DEALER


313 || 
›ti⁄s
.
ty≥
 =
ZMQ_ROUTER
) {

314 
±r
 +
	`add_¥›îty
 (ptr, "Identity",

315 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

318 c⁄° 
size_t
 
comm™d_size
 = 
±r
 - 
comm™d_buf„r
;

319 c⁄° 
rc
 = 
msg_
->
	`öô_size
 (
comm™d_size
);

320 
	`î∫o_as£π
 (
rc
 == 0);

321 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
comm™d_buf„r
, 
comm™d_size
);

322 
	`‰ì
 (
comm™d_buf„r
);

325 
	}
}

327 
	gzmq
::
∂aö_mech™ism_t
::
	$¥o˚ss_ªady
 (
msg_t
 *
msg_
)

329 c⁄° *
±r
 = 
°©ic_ˇ°
 <*> (
msg_
->
	`d©a
 ());

330 
size_t
 
byãs_À·
 = 
msg_
->
	`size
 ();

332 i‡(
byãs_À·
 < 6 || 
	`memcmp
 (
±r
, "\x05READY", 6)) {

333 
î∫o
 = 
EPROTO
;

336 
±r
 += 6;

337 
byãs_À·
 -= 6;

338  
	`∑r£_mëad©a
 (
±r
, 
byãs_À·
);

339 
	}
}

341 
	gzmq
::
∂aö_mech™ism_t
::
	$£nd_z≠_ªque°
 (c⁄° 
°d
::
°rög
 &
u£∫ame
,

342 c⁄° 
°d
::
°rög
 &
∑ssw‹d
)

344 
rc
;

345 
msg_t
 
msg
;

348 
rc
 = 
msg
.
	`öô
 ();

349 
	`î∫o_as£π
 (
rc
 == 0);

350 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

351 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

352 
	`î∫o_as£π
 (
rc
 == 0);

355 
rc
 = 
msg
.
	`öô_size
 (3);

356 
	`î∫o_as£π
 (
rc
 == 0);

357 
	`mem˝y
 (
msg
.
	`d©a
 (), "1.0", 3);

358 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

359 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

360 
	`î∫o_as£π
 (
rc
 == 0);

363 
rc
 = 
msg
.
	`öô_size
 (1);

364 
	`î∫o_as£π
 (
rc
 == 0);

365 
	`mem˝y
 (
msg
.
	`d©a
 (), "1", 1);

366 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

367 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

368 
	`î∫o_as£π
 (
rc
 == 0);

371 
rc
 = 
msg
.
	`öô_size
 (
›ti⁄s
.
z≠_domaö
.
	`Àngth
 ());

372 
	`î∫o_as£π
 (
rc
 == 0);

373 
	`mem˝y
 (
msg
.
	`d©a
 (), 
›ti⁄s
.
z≠_domaö
.
	`c_°r
 (), o±i⁄s.z≠_domaö.
	`Àngth
 ());

374 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

375 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

376 
	`î∫o_as£π
 (
rc
 == 0);

379 
rc
 = 
msg
.
	`öô_size
 (
≥î_addªss
.
	`Àngth
 ());

380 
	`î∫o_as£π
 (
rc
 == 0);

381 
	`mem˝y
 (
msg
.
	`d©a
 (), 
≥î_addªss
.
	`c_°r
 (),Öìr_addªss.
	`Àngth
 ());

382 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

383 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

384 
	`î∫o_as£π
 (
rc
 == 0);

387 
rc
 = 
msg
.
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

388 
	`î∫o_as£π
 (
rc
 == 0);

389 
	`mem˝y
 (
msg
.
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

390 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

391 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

392 
	`î∫o_as£π
 (
rc
 == 0);

395 
rc
 = 
msg
.
	`öô_size
 (5);

396 
	`î∫o_as£π
 (
rc
 == 0);

397 
	`mem˝y
 (
msg
.
	`d©a
 (), "PLAIN", 5);

398 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

399 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

400 
	`î∫o_as£π
 (
rc
 == 0);

403 
rc
 = 
msg
.
	`öô_size
 (
u£∫ame
.
	`Àngth
 ());

404 
	`î∫o_as£π
 (
rc
 == 0);

405 
	`mem˝y
 (
msg
.
	`d©a
 (), 
u£∫ame
.
	`c_°r
 (), u£∫ame.
	`Àngth
 ());

406 
msg
.
	`£t_Êags
 (
msg_t
::
m‹e
);

407 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

408 
	`î∫o_as£π
 (
rc
 == 0);

411 
rc
 = 
msg
.
	`öô_size
 (
∑ssw‹d
.
	`Àngth
 ());

412 
	`î∫o_as£π
 (
rc
 == 0);

413 
	`mem˝y
 (
msg
.
	`d©a
 (), 
∑ssw‹d
.
	`c_°r
 (),Öassw‹d.
	`Àngth
 ());

414 
rc
 = 
£ssi⁄
->
	`wrôe_z≠_msg
 (&
msg
);

415 
	`î∫o_as£π
 (
rc
 == 0);

416 
	}
}

418 
	gzmq
::
∂aö_mech™ism_t
::
	$ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ()

420 
rc
 = 0;

421 
msg_t
 
msg
 [7];

424 
i
 = 0; i < 7; i++) {

425 
rc
 = 
msg
 [
i
].
	`öô
 ();

426 
	`î∫o_as£π
 (
rc
 == 0);

429 
i
 = 0; i < 7; i++) {

430 
rc
 = 
£ssi⁄
->
	`ªad_z≠_msg
 (&
msg
 [
i
]);

431 i‡(
rc
 == -1)

433 i‡((
msg
 [
i
].
	`Êags
 (Ë& 
msg_t
::
m‹e
) == (i < 6? 0: msg_t::more)) {

434 
î∫o
 = 
EPROTO
;

435 
rc
 = -1;

440 i‡(
rc
 != 0)

441 
îr‹
;

444 i‡(
msg
 [0].
	`size
 () > 0) {

445 
rc
 = -1;

446 
î∫o
 = 
EPROTO
;

447 
îr‹
;

451 i‡(
msg
 [1].
	`size
 (Ë!3 || 
	`memcmp
 (msg [1].
	`d©a
 (), "1.0", 3)) {

452 
rc
 = -1;

453 
î∫o
 = 
EPROTO
;

454 
îr‹
;

458 i‡(
msg
 [2].
	`size
 (Ë!1 || 
	`memcmp
 (msg [2].
	`d©a
 (), "1", 1)) {

459 
rc
 = -1;

460 
î∫o
 = 
EPROTO
;

461 
îr‹
;

465 i‡(
msg
 [3].
	`size
 (Ë!3 || 
	`memcmp
 (msg [3].
	`d©a
 (), "200", 3)) {

466 
rc
 = -1;

467 
î∫o
 = 
EACCES
;

468 
îr‹
;

472 
rc
 = 
	`∑r£_mëad©a
 (
°©ic_ˇ°
 <c⁄° *> (
msg
 [6].
	`d©a
 ()),

473 
msg
 [6].
	`size
 ());

475 
îr‹
:

476 
i
 = 0; i < 7; i++) {

477 c⁄° 
rc2
 = 
msg
 [
i
].
	`˛o£
 ();

478 
	`î∫o_as£π
 (
rc2
 == 0);

481  
rc
;

482 
	}
}

	@plain_mechanism.hpp

20 #i‚de‡
__ZMQ_PLAIN_MECHANISM_HPP_INCLUDED__


21 
	#__ZMQ_PLAIN_MECHANISM_HPP_INCLUDED__


	)

23 
	~"mech™ism.hµ
"

24 
	~"›ti⁄s.hµ
"

26 
«me•a˚
 
	gzmq


29 
˛ass
 
	gmsg_t
;

30 
˛ass
 
	g£ssi⁄_ba£_t
;

32 ˛as†
	c∂aö_mech™ism_t
 : 
public
 
mech™ism_t


34 
public
:

36 
∂aö_mech™ism_t
 (
£ssi⁄_ba£_t
 *
£ssi⁄_
,

37 c⁄° 
°d
::
°rög
 &
≥î_addªss_
,

38 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

39 
	gvútuÆ
 ~
∂aö_mech™ism_t
 ();

42 
vútuÆ
 
√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
);

43 
vútuÆ
 
¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
);

44 
vútuÆ
 
z≠_msg_avaûabÀ
 ();

45 
vútuÆ
 
boﬁ
 
is_h™dshake_com∂ëe
 () const;

47 
	g¥iv©e
:

49 
	e°©e_t
 {

50 
£ndög_hñlo
,

51 
	gwaôög_f‹_hñlo
,

52 
	g£ndög_wñcome
,

53 
	gwaôög_f‹_wñcome
,

54 
	g£ndög_öôüã
,

55 
	gwaôög_f‹_öôüã
,

56 
	g£ndög_ªady
,

57 
	gwaôög_f‹_ªady
,

58 
	gwaôög_f‹_z≠_ª∂y
,

59 
	gªady


62 
£ssi⁄_ba£_t
 * c⁄° 
	g£ssi⁄
;

64 c⁄° 
	g°d
::
°rög
 
≥î_addªss
;

67 
boﬁ
 
	gex≥˘ög_z≠_ª∂y
;

69 
°©e_t
 
	g°©e
;

71 
¥odu˚_hñlo
 (
msg_t
 *
msg_
) const;

72 
¥odu˚_wñcome
 (
msg_t
 *
msg_
) const;

73 
¥odu˚_öôüã
 (
msg_t
 *
msg_
) const;

74 
¥odu˚_ªady
 (
msg_t
 *
msg_
) const;

76 
¥o˚ss_hñlo
 (
msg_t
 *
msg_
);

77 
¥o˚ss_wñcome
 (
msg_t
 *
msg
);

78 
¥o˚ss_ªady
 (
msg_t
 *
msg_
);

79 
¥o˚ss_öôüã
 (
msg_t
 *
msg_
);

81 
£nd_z≠_ªque°
 (c⁄° 
°d
::
°rög
 &
u£∫ame
,

82 c⁄° 
°d
::
°rög
 &
∑ssw‹d
);

83 
ª˚ive_™d_¥o˚ss_z≠_ª∂y
 ();

	@poll.cpp

20 
	~"pﬁl.hµ
"

21 #i‡
deföed
 
ZMQ_USE_POLL


23 
	~<sys/ty≥s.h
>

24 
	~<sys/time.h
>

25 
	~<pﬁl.h
>

26 
	~<Æg‹ôhm
>

28 
	~"pﬁl.hµ
"

29 
	~"îr.hµ
"

30 
	~"c⁄fig.hµ
"

31 
	~"i_pﬁl_evíts.hµ
"

33 
	gzmq
::
pﬁl_t
::
	$pﬁl_t
 () :

34 
	`ªtúed
 (
Ál£
),

35 
	$°›pög
 (
Ál£
)

37 
	}
}

39 
	gzmq
::
pﬁl_t
::~
	$pﬁl_t
 ()

41 
w‹kî
.
	`°›
 ();

42 
	}
}

44 
	gzmq
::
pﬁl_t
::
h™dÀ_t
 
zmq
::pﬁl_t::
	$add_fd
 (
fd_t
 
fd_
, 
i_pﬁl_evíts
 *
evíts_
)

47 
fd_èbÀ_t
::
size_ty≥
 
sz
 = 
fd_èbÀ
.
	`size
 ();

48 i‡(
sz
 <(
fd_èbÀ_t
::
size_ty≥
Ë
fd_
) {

49 
fd_èbÀ
.
	`ªsize
 (
fd_
 + 1);

50 
sz
 !(
fd_èbÀ_t
::
size_ty≥
Ë(
fd_
 + 1)) {

51 
fd_èbÀ
 [
sz
].
ödex
 = 
ªtúed_fd
;

52 ++
sz
;

56 
pﬁlfd
 
pfd
 = {
fd_
, 0, 0};

57 
pﬁl£t
.
	`push_back
 (
pfd
);

58 
	`zmq_as£π
 (
fd_èbÀ
 [
fd_
].
ödex
 =
ªtúed_fd
);

60 
fd_èbÀ
 [
fd_
].
ödex
 = 
pﬁl£t
.
	`size
() - 1;

61 
fd_èbÀ
 [
fd_
].
evíts
 = 
evíts_
;

64 
	`adju°_lﬂd
 (1);

66  
fd_
;

67 
	}
}

69 
	gzmq
::
pﬁl_t
::
	$rm_fd
 (
h™dÀ_t
 
h™dÀ_
)

71 
fd_t
 
ödex
 = 
fd_èbÀ
 [
h™dÀ_
].index;

72 
	`zmq_as£π
 (
ödex
 !
ªtúed_fd
);

75 
pﬁl£t
 [
ödex
].
fd
 = 
ªtúed_fd
;

76 
fd_èbÀ
 [
h™dÀ_
].
ödex
 = 
ªtúed_fd
;

77 
ªtúed
 = 
åue
;

80 
	`adju°_lﬂd
 (-1);

81 
	}
}

83 
	gzmq
::
pﬁl_t
::
	$£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

85 
ödex
 = 
fd_èbÀ
 [
h™dÀ_
].index;

86 
pﬁl£t
 [
ödex
].
evíts
 |
POLLIN
;

87 
	}
}

89 
	gzmq
::
pﬁl_t
::
	$ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

91 
ödex
 = 
fd_èbÀ
 [
h™dÀ_
].index;

92 
pﬁl£t
 [
ödex
].
evíts
 &~((Ë
POLLIN
);

93 
	}
}

95 
	gzmq
::
pﬁl_t
::
	$£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

97 
ödex
 = 
fd_èbÀ
 [
h™dÀ_
].index;

98 
pﬁl£t
 [
ödex
].
evíts
 |
POLLOUT
;

99 
	}
}

101 
	gzmq
::
pﬁl_t
::
	$ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

103 
ödex
 = 
fd_èbÀ
 [
h™dÀ_
].index;

104 
pﬁl£t
 [
ödex
].
evíts
 &~((Ë
POLLOUT
);

105 
	}
}

107 
	gzmq
::
pﬁl_t
::
	$°¨t
 ()

109 
w‹kî
.
	`°¨t
 (
w‹kî_routöe
, 
this
);

110 
	}
}

112 
	gzmq
::
pﬁl_t
::
	$°›
 ()

114 
°›pög
 = 
åue
;

115 
	}
}

117 
	gzmq
::
pﬁl_t
::
	$max_fds
 ()

120 
	}
}

122 
	gzmq
::
pﬁl_t
::
	$lo›
 ()

124 !
°›pög
) {

127 
timeout
 = (Ë
	`execuã_timîs
 ();

130 
rc
 = 
	`pﬁl
 (&
pﬁl£t
 [0],Öﬁl£t.
	`size
 (), 
timeout
 ?Åimeout : -1);

131 i‡(
rc
 == -1) {

132 
	`î∫o_as£π
 (
î∫o
 =
EINTR
);

138 i‡(
rc
 == 0)

141 
pﬁl£t_t
::
size_ty≥
 
i
 = 0; i !
pﬁl£t
.
	`size
 (); i++) {

143 
	`zmq_as£π
 (!(
pﬁl£t
 [
i
].
ªvíts
 & 
POLLNVAL
));

144 i‡(
pﬁl£t
 [
i
].
fd
 =
ªtúed_fd
)

146 i‡(
pﬁl£t
 [
i
].
ªvíts
 & (
POLLERR
 | 
POLLHUP
))

147 
fd_èbÀ
 [
pﬁl£t
 [
i
].
fd
].
evíts
->
	`ö_evít
 ();

148 i‡(
pﬁl£t
 [
i
].
fd
 =
ªtúed_fd
)

150 i‡(
pﬁl£t
 [
i
].
ªvíts
 & 
POLLOUT
)

151 
fd_èbÀ
 [
pﬁl£t
 [
i
].
fd
].
evíts
->
	`out_evít
 ();

152 i‡(
pﬁl£t
 [
i
].
fd
 =
ªtúed_fd
)

154 i‡(
pﬁl£t
 [
i
].
ªvíts
 & 
POLLIN
)

155 
fd_èbÀ
 [
pﬁl£t
 [
i
].
fd
].
evíts
->
	`ö_evít
 ();

159 i‡(
ªtúed
) {

160 
pﬁl£t_t
::
size_ty≥
 
i
 = 0;

161 
i
 < 
pﬁl£t
.
	`size
 ()) {

162 i‡(
pﬁl£t
 [
i
].
fd
 =
ªtúed_fd
)

163 
pﬁl£t
.
	`îa£
 (pﬁl£t.
	`begö
 (Ë+ 
i
);

165 
fd_èbÀ
 [
pﬁl£t
 [
i
].
fd
].
ödex
 = i;

166 
i
 ++;

169 
ªtúed
 = 
Ál£
;

172 
	}
}

174 
	gzmq
::
pﬁl_t
::
	$w‹kî_routöe
 (*
¨g_
)

176 ((
pﬁl_t
*Ë
¨g_
)->
	`lo›
 ();

177 
	}
}

	@poll.hpp

20 #i‚de‡
__ZMQ_POLL_HPP_INCLUDED__


21 
	#__ZMQ_POLL_HPP_INCLUDED__


	)

24 
	~"pﬁÀr.hµ
"

25 #i‡
deföed
 
ZMQ_USE_POLL


27 
	~<pﬁl.h
>

28 
	~<°ddef.h
>

29 
	~<ve˘‹
>

31 
	~"fd.hµ
"

32 
	~"thªad.hµ
"

33 
	~"pﬁÀr_ba£.hµ
"

35 
«me•a˚
 
	gzmq


38 
	gi_pﬁl_evíts
;

43 ˛as†
	cpﬁl_t
 : 
public
 
pﬁÀr_ba£_t


45 
public
:

47 
fd_t
 
	th™dÀ_t
;

49 
pﬁl_t
 ();

50 ~
pﬁl_t
 ();

53 
h™dÀ_t
 
add_fd
 (
fd_t
 
fd_
, 
zmq
::
i_pﬁl_evíts
 *
evíts_
);

54 
rm_fd
 (
h™dÀ_t
 
h™dÀ_
);

55 
£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

56 
ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

57 
£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

58 
ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

59 
°¨t
 ();

60 
°›
 ();

62 
max_fds
 ();

64 
	g¥iv©e
:

67 
w‹kî_routöe
 (*
¨g_
);

70 
lo›
 ();

72 
	sfd_íåy_t


74 
fd_t
 
	gödex
;

75 
	gzmq
::
i_pﬁl_evíts
 *
evíts
;

79 
	g°d
::
	tve˘‹
 <
	tfd_íåy_t
> 
	tfd_èbÀ_t
;

80 
fd_èbÀ_t
 
	gfd_èbÀ
;

83 
	g°d
::
	tve˘‹
 <
	tpﬁlfd
> 
	tpﬁl£t_t
;

84 
pﬁl£t_t
 
	gpﬁl£t
;

87 
boﬁ
 
	gªtúed
;

90 
boﬁ
 
	g°›pög
;

93 
thªad_t
 
	gw‹kî
;

95 
pﬁl_t
 (constÖoll_t&);

96 c⁄° 
	gpﬁl_t
 &
	g›î©‹
 = (c⁄° 
pﬁl_t
&);

99 
pﬁl_t
 
	tpﬁÀr_t
;

	@poller.hpp

20 #i‚de‡
__ZMQ_POLLER_HPP_INCLUDED__


21 
	#__ZMQ_POLLER_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_FORCE_SELECT


26 
	#ZMQ_USE_SELECT


	)

27 
	~"£À˘.hµ
"

28 #ñi‡
deföed
 
ZMQ_FORCE_POLL


29 
	#ZMQ_USE_POLL


	)

30 
	~"pﬁl.hµ
"

31 #ñi‡
deföed
 
ZMQ_FORCE_EPOLL


32 
	#ZMQ_USE_EPOLL


	)

33 
	~"ïﬁl.hµ
"

34 #ñi‡
deföed
 
ZMQ_FORCE_DEVPOLL


35 
	#ZMQ_USE_DEVPOLL


	)

36 
	~"devpﬁl.hµ
"

37 #ñi‡
deföed
 
ZMQ_FORCE_KQUEUE


38 
	#ZMQ_USE_KQUEUE


	)

39 
	~"kqueue.hµ
"

40 #ñi‡
deföed
 
ZMQ_HAVE_LINUX


41 
	#ZMQ_USE_EPOLL


	)

42 
	~"ïﬁl.hµ
"

43 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS


44 
	#ZMQ_USE_SELECT


	)

45 
	~"£À˘.hµ
"

46 #ñi‡
deföed
 
ZMQ_HAVE_FREEBSD


47 
	#ZMQ_USE_KQUEUE


	)

48 
	~"kqueue.hµ
"

49 #ñi‡
deföed
 
ZMQ_HAVE_OPENBSD


50 
	#ZMQ_USE_KQUEUE


	)

51 
	~"kqueue.hµ
"

52 #ñi‡
deföed
 
ZMQ_HAVE_NETBSD


53 
	#ZMQ_USE_KQUEUE


	)

54 
	~"kqueue.hµ
"

55 #ñi‡
deföed
 
ZMQ_HAVE_SOLARIS


56 
	#ZMQ_USE_DEVPOLL


	)

57 
	~"devpﬁl.hµ
"

58 #ñi‡
deföed
 
ZMQ_HAVE_OSX


59 
	#ZMQ_USE_KQUEUE


	)

60 
	~"kqueue.hµ
"

61 #ñi‡
deföed
 
ZMQ_HAVE_QNXNTO


62 
	#ZMQ_USE_POLL


	)

63 
	~"pﬁl.hµ
"

64 #ñi‡
deföed
 
ZMQ_HAVE_AIX


65 
	#ZMQ_USE_POLL


	)

66 
	~"pﬁl.hµ
"

67 #ñi‡
deföed
 
ZMQ_HAVE_HPUX


68 
	#ZMQ_USE_DEVPOLL


	)

69 
	~"devpﬁl.hµ
"

70 #ñi‡
deföed
 
ZMQ_HAVE_OPENVMS


71 
	#ZMQ_USE_SELECT


	)

72 
	~"£À˘.hµ
"

73 #ñi‡
deföed
 
ZMQ_HAVE_CYGWIN


74 
	#ZMQ_USE_SELECT


	)

75 
	~"£À˘.hµ
"

77 #îr‹ 
Unsuµ‹ãd
 
∂©f‹m


	@poller_base.cpp

20 
	~"pﬁÀr_ba£.hµ
"

21 
	~"i_pﬁl_evíts.hµ
"

22 
	~"îr.hµ
"

24 
	gzmq
::
pﬁÀr_ba£_t
::
	$pﬁÀr_ba£_t
 ()

26 
	}
}

28 
zmq
::
pﬁÀr_ba£_t
::~
	$pﬁÀr_ba£_t
 ()

31 
	`zmq_as£π
 (
	`gë_lﬂd
 () == 0);

32 
	}
}

34 
	gzmq
::
pﬁÀr_ba£_t
::
	$gë_lﬂd
 ()

36  
lﬂd
.
	`gë
 ();

37 
	}
}

39 
	gzmq
::
pﬁÀr_ba£_t
::
	$adju°_lﬂd
 (
amou¡_
)

41 i‡(
amou¡_
 > 0)

42 
lﬂd
.
	`add
 (
amou¡_
);

44 i‡(
amou¡_
 < 0)

45 
lﬂd
.
	`sub
 (-
amou¡_
);

46 
	}
}

48 
	gzmq
::
pﬁÀr_ba£_t
::
	$add_timî
 (
timeout_
, 
i_pﬁl_evíts
 *
sök_
, 
id_
)

50 
uöt64_t
 
expú©i⁄
 = 
˛ock
.
	`now_ms
 (Ë+ 
timeout_
;

51 
timî_öfo_t
 
öfo
 = {
sök_
, 
id_
};

52 
timîs
.
	`ö£π
 (
timîs_t
::
	`vÆue_ty≥
 (
expú©i⁄
, 
öfo
));

53 
	}
}

55 
	gzmq
::
pﬁÀr_ba£_t
::
	$ˇn˚l_timî
 (
i_pﬁl_evíts
 *
sök_
, 
id_
)

58 
timîs_t
::
ôî©‹
 
ô
 = 
timîs
.
	`begö
 (); ià!timîs.
	`íd
 (); ++it)

59 i‡(
ô
->
£c⁄d
.
sök
 =
sök_
 && it->£c⁄d.
id
 =
id_
) {

60 
timîs
.
	`îa£
 (
ô
);

65 
	`zmq_as£π
 (
Ál£
);

66 
	}
}

68 
uöt64_t
 
	gzmq
::
pﬁÀr_ba£_t
::
	$execuã_timîs
 ()

71 i‡(
timîs
.
	`em±y
 ())

75 
uöt64_t
 
cuºít
 = 
˛ock
.
	`now_ms
 ();

78 
timîs_t
::
ôî©‹
 
ô
 = 
timîs
.
	`begö
 ();

79 
ô
 !
timîs
.
	`íd
 ()) {

85 i‡(
ô
->
fú°
 > 
cuºít
)

86  
ô
->
fú°
 - 
cuºít
;

89 
ô
->
£c⁄d
.
sök
->
	`timî_evít
 (ô->£c⁄d.
id
);

92 
timîs_t
::
ôî©‹
 
o
 = 
ô
;

93 ++
ô
;

94 
timîs
.
	`îa£
 (
o
);

99 
	}
}

	@poller_base.hpp

20 #i‚de‡
__ZMQ_POLLER_BASE_HPP_INCLUDED__


21 
	#__ZMQ_POLLER_BASE_HPP_INCLUDED__


	)

23 
	~<m≠
>

25 
	~"˛ock.hµ
"

26 
	~"©omic_cou¡î.hµ
"

28 
«me•a˚
 
	gzmq


31 
	gi_pﬁl_evíts
;

33 ˛as†
	cpﬁÀr_ba£_t


35 
	gpublic
:

37 
pﬁÀr_ba£_t
 ();

38 
	gvútuÆ
 ~
pﬁÀr_ba£_t
 ();

42 
gë_lﬂd
 ();

47 
add_timî
 (
timeout_
, 
zmq
::
i_pﬁl_evíts
 *
sök_
, 
id_
);

50 
ˇn˚l_timî
 (
zmq
::
i_pﬁl_evíts
 *
sök_
, 
id_
);

52 
	g¥Ÿe˘ed
:

55 
adju°_lﬂd
 (
amou¡_
);

59 
uöt64_t
 
execuã_timîs
 ();

61 
	g¥iv©e
:

64 
˛ock_t
 
˛ock
;

67 
	stimî_öfo_t


69 
	gzmq
::
i_pﬁl_evíts
 *
sök
;

70 
	gid
;

72 
	g°d
::
	tmu…im≠
 <
	tuöt64_t
, 
	ttimî_öfo_t
> 
	ttimîs_t
;

73 
timîs_t
 
	gtimîs
;

77 
©omic_cou¡î_t
 
	glﬂd
;

79 
pﬁÀr_ba£_t
 (constÖoller_base_t&);

80 c⁄° 
	gpﬁÀr_ba£_t
 &
	g›î©‹
 = (c⁄° 
pﬁÀr_ba£_t
&);

	@precompiled.cpp

20 
	~"¥ecompûed.hµ
"

	@precompiled.hpp

20 #i‚de‡
__ZMQ_PRECOMPILED_HPP_INCLUDED__


21 
	#__ZMQ_PRECOMPILED_HPP_INCLUDED__


	)

23 #ifde‡
_MSC_VER


26 
	~"∂©f‹m.hµ
"

27 
	~"wödows.hµ
"

28 
	~<f˙é.h
>

29 
	~<öåö.h
>

30 
	~<io.h
>

31 
	~<Ωc.h
>

32 
	~<sys/°©.h
>

35 
	~<Æg‹ôhm
>

36 
	~<m≠
>

37 
	~<£t
>

38 
	~<°rög
>

39 
	~<ve˘‹
>

42 
	~"../ö˛ude/zmq.h
"

	@proxy.cpp

20 
	~<°ddef.h
>

21 
	~"∂©f‹m.hµ
"

22 
	~"¥oxy.hµ
"

23 
	~"likñy.hµ
"

25 #i‡
deföed
 
ZMQ_FORCE_SELECT


26 
	#ZMQ_POLL_BASED_ON_SELECT


	)

27 #ñi‡
deföed
 
ZMQ_FORCE_POLL


28 
	#ZMQ_POLL_BASED_ON_POLL


	)

29 #ñi‡
deföed
 
ZMQ_HAVE_LINUX
 || deföed 
ZMQ_HAVE_FREEBSD
 ||\

30 
deföed
 
	gZMQ_HAVE_OPENBSD
 || deföed 
	gZMQ_HAVE_SOLARIS
 ||\

31 
deföed
 
	gZMQ_HAVE_OSX
 || deföed 
	gZMQ_HAVE_QNXNTO
 ||\

32 
deföed
 
	gZMQ_HAVE_HPUX
 || deföed 
	gZMQ_HAVE_AIX
 ||\

33 
deföed
 
	gZMQ_HAVE_NETBSD


34 
	#ZMQ_POLL_BASED_ON_POLL


	)

35 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS
 || deföed 
ZMQ_HAVE_OPENVMS
 ||\

36 
deföed
 
	gZMQ_HAVE_CYGWIN


37 
	#ZMQ_POLL_BASED_ON_SELECT


	)

44 #i‡
deföed
 
ZMQ_POLL_BASED_ON_POLL


45 
	~<pﬁl.h
>

50 
	~"sockë_ba£.hµ
"

51 
	~"îr.hµ
"

54 
	~"../ö˛ude/zmq.h
"

57 
	gzmq
::
	$¥oxy
 (

58 
˛ass
 
sockë_ba£_t
 *
‰⁄ãnd_
,

59 
˛ass
 
sockë_ba£_t
 *
backíd_
,

60 
˛ass
 
sockë_ba£_t
 *
ˇ±uª_
,

61 
˛ass
 
sockë_ba£_t
 *
c⁄åﬁ_
)

63 
msg_t
 
msg
;

64 
rc
 = 
msg
.
	`öô
 ();

65 i‡(
rc
 != 0)

71 
m‹e
;

72 
size_t
 
m‹esz
;

73 
zmq_pﬁlôem_t
 
ôems
 [] = {

74 { 
‰⁄ãnd_
, 0, 
ZMQ_POLLIN
, 0 },

75 { 
backíd_
, 0, 
ZMQ_POLLIN
, 0 },

76 { 
c⁄åﬁ_
, 0, 
ZMQ_POLLIN
, 0 }

78 
qt_pﬁl_ôems
 = (
c⁄åﬁ_
 ? 3 : 2);

82 
a˘ive
,

83 
∑u£d
,

84 
ãrmö©ed


85 } 
°©e
 = 
a˘ive
;

87 
°©e
 !
ãrmö©ed
) {

89 
rc
 = 
	`zmq_pﬁl
 (&
ôems
 [0], 
qt_pﬁl_ôems
, -1);

90 i‡(
	`u∆ikñy
 (
rc
 < 0))

94 i‡(
c⁄åﬁ_
 && 
ôems
 [2].
ªvíts
 & 
ZMQ_POLLIN
) {

95 
rc
 = 
c⁄åﬁ_
->
	`ªcv
 (&
msg
, 0);

96 i‡(
	`u∆ikñy
 (
rc
 < 0))

99 
m‹esz
 =  
m‹e
;

100 
rc
 = 
c⁄åﬁ_
->
	`gësock›t
 (
ZMQ_RCVMORE
, &
m‹e
, &
m‹esz
);

101 i‡(
	`u∆ikñy
 (
rc
 < 0Ë|| 
m‹e
)

105 i‡(
ˇ±uª_
) {

106 
msg_t
 
˘æ
;

107 
rc
 = 
˘æ
.
	`öô
 ();

108 i‡(
	`u∆ikñy
 (
rc
 < 0))

110 
rc
 = 
˘æ
.
	`c›y
 (
msg
);

111 i‡(
	`u∆ikñy
 (
rc
 < 0))

113 
rc
 = 
ˇ±uª_
->
	`£nd
 (&
˘æ
, 
m‹e
? 
ZMQ_SNDMORE
: 0);

114 i‡(
	`u∆ikñy
 (
rc
 < 0))

118 i‡(
msg
.
	`size
 (Ë=5 && 
	`memcmp
 (msg.
	`d©a
 (), "PAUSE", 5) == 0)

119 
°©e
 = 
∑u£d
;

121 i‡(
msg
.
	`size
 (Ë=6 && 
	`memcmp
 (msg.
	`d©a
 (), "RESUME", 6) == 0)

122 
°©e
 = 
a˘ive
;

124 i‡(
msg
.
	`size
 (Ë=9 && 
	`memcmp
 (msg.
	`d©a
 (), "TERMINATE", 9) == 0)

125 
°©e
 = 
ãrmö©ed
;

128 
	`puts
 ("E: invalid command sentÅoÖroxy");

129 
	`zmq_as£π
 (
Ál£
);

133 i‡(
ôems
 [0].
ªvíts
 & 
ZMQ_POLLIN
) {

134 
åue
) {

135 
rc
 = 
‰⁄ãnd_
->
	`ªcv
 (&
msg
, 0);

136 i‡(
	`u∆ikñy
 (
rc
 < 0))

139 
m‹esz
 =  
m‹e
;

140 
rc
 = 
‰⁄ãnd_
->
	`gësock›t
 (
ZMQ_RCVMORE
, &
m‹e
, &
m‹esz
);

141 i‡(
	`u∆ikñy
 (
rc
 < 0))

145 i‡(
ˇ±uª_
) {

146 
msg_t
 
˘æ
;

147 
rc
 = 
˘æ
.
	`öô
 ();

148 i‡(
	`u∆ikñy
 (
rc
 < 0))

150 
rc
 = 
˘æ
.
	`c›y
 (
msg
);

151 i‡(
	`u∆ikñy
 (
rc
 < 0))

153 
rc
 = 
ˇ±uª_
->
	`£nd
 (&
˘æ
, 
m‹e
? 
ZMQ_SNDMORE
: 0);

154 i‡(
	`u∆ikñy
 (
rc
 < 0))

157 
rc
 = 
backíd_
->
	`£nd
 (&
msg
, 
m‹e
? 
ZMQ_SNDMORE
: 0);

158 i‡(
	`u∆ikñy
 (
rc
 < 0))

160 i‡(
m‹e
 == 0)

165 i‡(
ôems
 [1].
ªvíts
 & 
ZMQ_POLLIN
) {

166 
åue
) {

167 
rc
 = 
backíd_
->
	`ªcv
 (&
msg
, 0);

168 i‡(
	`u∆ikñy
 (
rc
 < 0))

171 
m‹esz
 =  
m‹e
;

172 
rc
 = 
backíd_
->
	`gësock›t
 (
ZMQ_RCVMORE
, &
m‹e
, &
m‹esz
);

173 i‡(
	`u∆ikñy
 (
rc
 < 0))

177 i‡(
ˇ±uª_
) {

178 
msg_t
 
˘æ
;

179 
rc
 = 
˘æ
.
	`öô
 ();

180 i‡(
	`u∆ikñy
 (
rc
 < 0))

182 
rc
 = 
˘æ
.
	`c›y
 (
msg
);

183 i‡(
	`u∆ikñy
 (
rc
 < 0))

185 
rc
 = 
ˇ±uª_
->
	`£nd
 (&
˘æ
, 
m‹e
? 
ZMQ_SNDMORE
: 0);

186 i‡(
	`u∆ikñy
 (
rc
 < 0))

189 
rc
 = 
‰⁄ãnd_
->
	`£nd
 (&
msg
, 
m‹e
? 
ZMQ_SNDMORE
: 0);

190 i‡(
	`u∆ikñy
 (
rc
 < 0))

192 i‡(
m‹e
 == 0)

199 
	}
}

	@proxy.hpp

20 #i‚de‡
__ZMQ_PROXY_HPP_INCLUDED__


21 
	#__ZMQ_PROXY_HPP_INCLUDED__


	)

23 
«me•a˚
 
	gzmq


25 
¥oxy
 (

26 
˛ass
 
sockë_ba£_t
 *
‰⁄ãnd_
,

27 
˛ass
 
sockë_ba£_t
 *
backíd_
,

28 
˛ass
 
sockë_ba£_t
 *
ˇ±uª_
,

29 
˛ass
 
sockë_ba£_t
 *
c⁄åﬁ_
 = 
NULL
);

	@pub.cpp

20 
	~"pub.hµ
"

21 
	~"msg.hµ
"

23 
	gzmq
::
pub_t
::
	$pub_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

24 
	$xpub_t
 (
∑ª¡_
, 
tid_
, 
sid_
)

26 
›ti⁄s
.
ty≥
 = 
ZMQ_PUB
;

27 
	}
}

29 
	gzmq
::
pub_t
::~
	$pub_t
 ()

31 
	}
}

33 
zmq
::
pub_t
::
	$xªcv
 (
˛ass
 
msg_t
 *)

36 
î∫o
 = 
ENOTSUP
;

38 
	}
}

40 
boﬁ
 
	gzmq
::
pub_t
::
	$xhas_ö
 ()

42  
Ál£
;

43 
	}
}

	@pub.hpp

20 #i‚de‡
__ZMQ_PUB_HPP_INCLUDED__


21 
	#__ZMQ_PUB_HPP_INCLUDED__


	)

23 
	~"xpub.hµ
"

25 
«me•a˚
 
	gzmq


28 
˛ass
 
	g˘x_t
;

29 
˛ass
 
	gio_thªad_t
;

30 
˛ass
 
	gsockë_ba£_t
;

31 
˛ass
 
	gmsg_t
;

33 ˛as†
	cpub_t
 : 
public
 
xpub_t


35 
public
:

37 
pub_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

38 ~
pub_t
 ();

41 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

42 
boﬁ
 
xhas_ö
 ();

44 
	g¥iv©e
:

46 
pub_t
 (constÖub_t&);

47 c⁄° 
	gpub_t
 &
	g›î©‹
 = (c⁄° 
pub_t
&);

	@pull.cpp

20 
	~"puŒ.hµ
"

21 
	~"îr.hµ
"

22 
	~"msg.hµ
"

23 
	~"pùe.hµ
"

25 
	gzmq
::
puŒ_t
::
	$puŒ_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

26 
	$sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
)

28 
›ti⁄s
.
ty≥
 = 
ZMQ_PULL
;

29 
	}
}

31 
	gzmq
::
puŒ_t
::~
	$puŒ_t
 ()

33 
	}
}

35 
zmq
::
puŒ_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

38 ()
subs¸ibe_to_Æl_
;

40 
	`zmq_as£π
 (
pùe_
);

41 
fq
.
	`©èch
 (
pùe_
);

42 
	}
}

44 
	gzmq
::
puŒ_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

46 
fq
.
	`a˘iv©ed
 (
pùe_
);

47 
	}
}

49 
	gzmq
::
puŒ_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

51 
fq
.
	`pùe_ãrmö©ed
 (
pùe_
);

52 
	}
}

54 
	gzmq
::
puŒ_t
::
	$xªcv
 (
msg_t
 *
msg_
)

56  
fq
.
	`ªcv
 (
msg_
);

57 
	}
}

59 
boﬁ
 
	gzmq
::
puŒ_t
::
	$xhas_ö
 ()

61  
fq
.
	`has_ö
 ();

62 
	}
}

	@pull.hpp

20 #i‚de‡
__ZMQ_PULL_HPP_INCLUDED__


21 
	#__ZMQ_PULL_HPP_INCLUDED__


	)

23 
	~"sockë_ba£.hµ
"

24 
	~"£ssi⁄_ba£.hµ
"

25 
	~"fq.hµ
"

27 
«me•a˚
 
	gzmq


30 
˛ass
 
	g˘x_t
;

31 
˛ass
 
	gpùe_t
;

32 
˛ass
 
	gmsg_t
;

33 
˛ass
 
	gio_thªad_t
;

35 ˛as†
	cpuŒ_t
 :

36 
public
 
sockë_ba£_t


38 
public
:

40 
puŒ_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

41 ~
puŒ_t
 ();

43 
	g¥Ÿe˘ed
:

46 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

47 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

48 
boﬁ
 
xhas_ö
 ();

49 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

50 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

52 
	g¥iv©e
:

55 
fq_t
 
fq
;

57 
puŒ_t
 (constÖull_t&);

58 c⁄° 
	gpuŒ_t
 &
	g›î©‹
 = (c⁄° 
puŒ_t
&);

	@push.cpp

20 
	~"push.hµ
"

21 
	~"pùe.hµ
"

22 
	~"îr.hµ
"

23 
	~"msg.hµ
"

25 
	gzmq
::
push_t
::
	$push_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

26 
	$sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
)

28 
›ti⁄s
.
ty≥
 = 
ZMQ_PUSH
;

29 
	}
}

31 
	gzmq
::
push_t
::~
	$push_t
 ()

33 
	}
}

35 
zmq
::
push_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

38 ()
subs¸ibe_to_Æl_
;

40 
	`zmq_as£π
 (
pùe_
);

41 
lb
.
	`©èch
 (
pùe_
);

42 
	}
}

44 
	gzmq
::
push_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

46 
lb
.
	`a˘iv©ed
 (
pùe_
);

47 
	}
}

49 
	gzmq
::
push_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

51 
lb
.
	`pùe_ãrmö©ed
 (
pùe_
);

52 
	}
}

54 
	gzmq
::
push_t
::
	$x£nd
 (
msg_t
 *
msg_
)

56  
lb
.
	`£nd
 (
msg_
);

57 
	}
}

59 
boﬁ
 
	gzmq
::
push_t
::
	$xhas_out
 ()

61  
lb
.
	`has_out
 ();

62 
	}
}

	@push.hpp

20 #i‚de‡
__ZMQ_PUSH_HPP_INCLUDED__


21 
	#__ZMQ_PUSH_HPP_INCLUDED__


	)

23 
	~"sockë_ba£.hµ
"

24 
	~"£ssi⁄_ba£.hµ
"

25 
	~"lb.hµ
"

27 
«me•a˚
 
	gzmq


30 
˛ass
 
	g˘x_t
;

31 
˛ass
 
	gpùe_t
;

32 
˛ass
 
	gmsg_t
;

33 
˛ass
 
	gio_thªad_t
;

35 ˛as†
	cpush_t
 :

36 
public
 
sockë_ba£_t


38 
public
:

40 
push_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

41 ~
push_t
 ();

43 
	g¥Ÿe˘ed
:

46 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

47 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

48 
boﬁ
 
xhas_out
 ();

49 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

50 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

52 
	g¥iv©e
:

55 
lb_t
 
lb
;

57 
push_t
 (constÖush_t&);

58 c⁄° 
	gpush_t
 &
	g›î©‹
 = (c⁄° 
push_t
&);

	@random.cpp

20 
	~<°dlib.h
>

22 
	~"∂©f‹m.hµ
"

23 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


24 
	~"wödows.hµ
"

26 
	~<uni°d.h
>

29 
	~"øndom.hµ
"

30 
	~"°döt.hµ
"

31 
	~"˛ock.hµ
"

33 
	gzmq
::
	$£ed_øndom
 ()

35 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


36 
pid
 = (Ë
	`GëCuºítPro˚ssId
 ();

38 
pid
 = (Ë
	`gëpid
 ();

40 
	`§™d
 ((Ë(
˛ock_t
::
	`now_us
 (Ë+ 
pid
));

41 
	}
}

43 
uöt32_t
 
	gzmq
::
	$gíî©e_øndom
 ()

46 
uöt32_t
 
low
 = (uöt32_tË
	`ønd
 ();

47 
uöt32_t
 
high
 = (uöt32_tË
	`ønd
 ();

48 
high
 <<= ( () * 8 - 1);

49  
high
 | 
low
;

50 
	}
}

	@random.hpp

20 #i‚de‡
__ZMQ_RANDOM_HPP_INCLUDED__


21 
	#__ZMQ_RANDOM_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


29 
£ed_øndom
 ();

32 
uöt32_t
 
gíî©e_øndom
 ();

	@raw_decoder.cpp

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~"∂©f‹m.hµ
"

24 #ifde‡
ZMQ_HAVE_WINDOWS


25 
	~"wödows.hµ
"

28 
	~"øw_decodî.hµ
"

29 
	~"îr.hµ
"

31 
	gzmq
::
øw_decodî_t
::
	$øw_decodî_t
 (
size_t
 
bufsize_
) :

32 
	$bufsize
 (
bufsize_
)

34 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

35 
	`î∫o_as£π
 (
rc
 == 0);

37 
buf„r
 = (*Ë
	`mÆloc
 (
bufsize
);

38 
	`Æloc_as£π
 (
buf„r
);

39 
	}
}

41 
	gzmq
::
øw_decodî_t
::~
	$øw_decodî_t
 ()

43 
rc
 = 
ö_¥ogªss
.
	`˛o£
 ();

44 
	`î∫o_as£π
 (
rc
 == 0);

46 
	`‰ì
 (
buf„r
);

47 
	}
}

49 
	gzmq
::
øw_decodî_t
::
	$gë_buf„r
 (**
d©a_
, 
size_t
 *
size_
)

51 *
d©a_
 = 
buf„r
;

52 *
size_
 = 
bufsize
;

53 
	}
}

55 
	gzmq
::
øw_decodî_t
::
	$decode
 (c⁄° 
uöt8_t
 *
d©a_
, 
size_t
 
size_
,

56 
size_t
 &
byãs_u£d_
)

58 
rc
 = 
ö_¥ogªss
.
	`öô_size
 (
size_
);

59 
	`î∫o_as£π
 (
rc
 != -1);

60 
	`mem˝y
 (
ö_¥ogªss
.
	`d©a
 (), 
d©a_
, 
size_
);

61 
byãs_u£d_
 = 
size_
;

63 
	}
}

	@raw_decoder.hpp

20 #i‚de‡
__ZMQ_RAW_DECODER_HPP_INCLUDED__


21 
	#__ZMQ_RAW_DECODER_HPP_INCLUDED__


	)

23 
	~"îr.hµ
"

24 
	~"msg.hµ
"

25 
	~"i_decodî.hµ
"

26 
	~"°döt.hµ
"

28 
«me•a˚
 
	gzmq


33 ˛as†
	cøw_decodî_t
 : 
public
 
i_decodî


35 
public
:

37 
øw_decodî_t
 (
size_t
 
bufsize_
);

38 
	gvútuÆ
 ~
øw_decodî_t
 ();

42 
vútuÆ
 
gë_buf„r
 (**
d©a_
, 
size_t
 *
size_
);

44 
vútuÆ
 
decode
 (c⁄° *
d©a_
, 
size_t
 
size_
,

45 
size_t
 &
¥o˚s£d
);

47 
vútuÆ
 
msg_t
 *
msg
 (Ë{  &
	gö_¥ogªss
; }

50 
	g¥iv©e
:

53 
msg_t
 
ö_¥ogªss
;

55 c⁄° 
öt64_t
 
	gbufsize
;

57 *
	gbuf„r
;

59 
øw_decodî_t
 (constÑaw_decoder_t&);

60 
	g›î©‹
 = (c⁄° 
øw_decodî_t
&);

	@raw_encoder.cpp

20 
	~"ícodî.hµ
"

21 
	~"øw_ícodî.hµ
"

22 
	~"likñy.hµ
"

23 
	~"wúe.hµ
"

25 
	gzmq
::
øw_ícodî_t
::
	$øw_ícodî_t
 (
size_t
 
bufsize_
) :

26 
ícodî_ba£_t
 <
øw_ícodî_t
> (
bufsize_
)

29 
	`√xt_°ï
 (
NULL
, 0, &
øw_ícodî_t
::
øw_mesßge_ªady
, 
åue
);

30 
	}
}

32 
	gzmq
::
øw_ícodî_t
::~
	$øw_ícodî_t
 ()

34 
	}
}

36 
zmq
::
øw_ícodî_t
::
	$øw_mesßge_ªady
 ()

38 
	`√xt_°ï
 (
ö_¥ogªss
->
	`d©a
 (), in_¥ogªss->
	`size
 (),

39 &
øw_ícodî_t
::
øw_mesßge_ªady
, 
åue
);

40 
	}
}

	@raw_encoder.hpp

20 #i‚de‡
__ZMQ_RAW_ENCODER_HPP_INCLUDED__


21 
	#__ZMQ_RAW_ENCODER_HPP_INCLUDED__


	)

23 #i‡
deföed
(
_MSC_VER
)

24 #i‚de‡
NOMINMAX


25 
	#NOMINMAX


	)

29 
	~<°ddef.h
>

30 
	~<°rög.h
>

31 
	~<°dlib.h
>

32 
	~<Æg‹ôhm
>

34 
	~"îr.hµ
"

35 
	~"msg.hµ
"

36 
	~"i_ícodî.hµ
"

38 
«me•a˚
 
	gzmq


43 
˛ass
 
	gøw_ícodî_t
 : 
public
 
ícodî_ba£_t
 <
øw_ícodî_t
>

45 
public
:

47 
øw_ícodî_t
 (
size_t
 
bufsize_
);

48 ~
øw_ícodî_t
 ();

50 
	g¥iv©e
:

52 
øw_mesßge_ªady
 ();

54 
øw_ícodî_t
 (constÑaw_encoder_t&);

55 c⁄° 
	gøw_ícodî_t
 &
	g›î©‹
 = (c⁄° 
øw_ícodî_t
&);

	@reaper.cpp

20 
	~"ª≠î.hµ
"

21 
	~"sockë_ba£.hµ
"

22 
	~"îr.hµ
"

24 
	gzmq
::
ª≠î_t
::
	$ª≠î_t
 (
˛ass
 
˘x_t
 *
˘x_
, 
uöt32_t
 
tid_
) :

25 
	`obje˘_t
 (
˘x_
, 
tid_
),

26 
	`sockës
 (0),

27 
	$ãrmö©ög
 (
Ál£
)

29 
pﬁÀr
 = 
	`√w
 (
°d
::
nŸhrow
Ë
pﬁÀr_t
;

30 
	`Æloc_as£π
 (
pﬁÀr
);

32 
maûbox_h™dÀ
 = 
pﬁÀr
->
	`add_fd
 (
maûbox
.
	`gë_fd
 (), 
this
);

33 
pﬁÀr
->
	`£t_pﬁlö
 (
maûbox_h™dÀ
);

35 #ifde‡
HAVE_FORK


36 
pid
 = 
	`gëpid
();

38 
	}
}

40 
	gzmq
::
ª≠î_t
::~
	$ª≠î_t
 ()

42 
dñëe
 
pﬁÀr
;

43 
	}
}

45 
	gzmq
::
maûbox_t
 *
zmq
::
ª≠î_t
::
	$gë_maûbox
 ()

47  &
maûbox
;

48 
	}
}

50 
	gzmq
::
ª≠î_t
::
	$°¨t
 ()

53 
pﬁÀr
->
	`°¨t
 ();

54 
	}
}

56 
	gzmq
::
ª≠î_t
::
	$°›
 ()

58 
	`£nd_°›
 ();

59 
	}
}

61 
	gzmq
::
ª≠î_t
::
	$ö_evít
 ()

63 
åue
) {

64 #ifde‡
HAVE_FORK


65 i‡(
	`u∆ikñy
(
pid
 !
	`gëpid
()))

73 
comm™d_t
 
cmd
;

74 
rc
 = 
maûbox
.
	`ªcv
 (&
cmd
, 0);

75 i‡(
rc
 !0 && 
î∫o
 =
EINTR
)

77 i‡(
rc
 !0 && 
î∫o
 =
EAGAIN
)

79 
	`î∫o_as£π
 (
rc
 == 0);

82 
cmd
.
de°ö©i⁄
->
	`¥o˚ss_comm™d
 (cmd);

84 
	}
}

86 
	gzmq
::
ª≠î_t
::
	$out_evít
 ()

88 
	`zmq_as£π
 (
Ál£
);

89 
	}
}

91 
	gzmq
::
ª≠î_t
::
	$timî_evít
 ()

93 
	`zmq_as£π
 (
Ál£
);

94 
	}
}

96 
	gzmq
::
ª≠î_t
::
	$¥o˚ss_°›
 ()

98 
ãrmö©ög
 = 
åue
;

101 i‡(!
sockës
) {

102 
	`£nd_d⁄e
 ();

103 
pﬁÀr
->
	`rm_fd
 (
maûbox_h™dÀ
);

104 
pﬁÀr
->
	`°›
 ();

106 
	}
}

108 
	gzmq
::
ª≠î_t
::
	$¥o˚ss_ª≠
 (
sockë_ba£_t
 *
sockë_
)

111 
sockë_
->
	`°¨t_ª≠ög
 (
pﬁÀr
);

113 ++
sockës
;

114 
	}
}

116 
	gzmq
::
ª≠î_t
::
	$¥o˚ss_ª≠ed
 ()

118 --
sockës
;

122 i‡(!
sockës
 && 
ãrmö©ög
) {

123 
	`£nd_d⁄e
 ();

124 
pﬁÀr
->
	`rm_fd
 (
maûbox_h™dÀ
);

125 
pﬁÀr
->
	`°›
 ();

127 
	}
}

	@reaper.hpp

20 #i‚de‡
__ZMQ_REAPER_HPP_INCLUDED__


21 
	#__ZMQ_REAPER_HPP_INCLUDED__


	)

23 
	~"obje˘.hµ
"

24 
	~"maûbox.hµ
"

25 
	~"pﬁÀr.hµ
"

26 
	~"i_pﬁl_evíts.hµ
"

28 
«me•a˚
 
	gzmq


31 
˛ass
 
	g˘x_t
;

32 
˛ass
 
	gsockë_ba£_t
;

34 
˛ass
 
	gª≠î_t
 : 
public
 
obje˘_t
,Öubli¯
	gi_pﬁl_evíts


36 
	gpublic
:

38 
ª≠î_t
 (
zmq
::
˘x_t
 *
˘x_
, 
uöt32_t
 
tid_
);

39 ~
ª≠î_t
 ();

41 
maûbox_t
 *
gë_maûbox
 ();

43 
°¨t
 ();

44 
°›
 ();

47 
ö_evít
 ();

48 
out_evít
 ();

49 
timî_evít
 (
id_
);

51 
	g¥iv©e
:

54 
¥o˚ss_°›
 ();

55 
¥o˚ss_ª≠
 (
zmq
::
sockë_ba£_t
 *
sockë_
);

56 
¥o˚ss_ª≠ed
 ();

59 
maûbox_t
 
	gmaûbox
;

62 
	gpﬁÀr_t
::
h™dÀ_t
 
maûbox_h™dÀ
;

65 
pﬁÀr_t
 *
	gpﬁÀr
;

68 
	gsockës
;

71 
boﬁ
 
	gãrmö©ög
;

73 
ª≠î_t
 (constÑeaper_t&);

74 c⁄° 
	gª≠î_t
 &
	g›î©‹
 = (c⁄° 
ª≠î_t
&);

76 #ifde‡
HAVE_FORK


78 
pid_t
 
	gpid
;

	@rep.cpp

20 
	~"ªp.hµ
"

21 
	~"îr.hµ
"

22 
	~"msg.hµ
"

24 
	gzmq
::
ªp_t
::
	$ªp_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

25 
	`rouãr_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

26 
	`£ndög_ª∂y
 (
Ál£
),

27 
	$ªque°_begös
 (
åue
)

29 
›ti⁄s
.
ty≥
 = 
ZMQ_REP
;

30 
	}
}

32 
	gzmq
::
ªp_t
::~
	$ªp_t
 ()

34 
	}
}

36 
zmq
::
ªp_t
::
	$x£nd
 (
msg_t
 *
msg_
)

39 i‡(!
£ndög_ª∂y
) {

40 
î∫o
 = 
EFSM
;

44 
boﬁ
 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹ê? 
åue
 : 
Ál£
;

47 
rc
 = 
rouãr_t
::
	`x£nd
 (
msg_
);

48 i‡(
rc
 != 0)

49  
rc
;

52 i‡(!
m‹e
)

53 
£ndög_ª∂y
 = 
Ál£
;

56 
	}
}

58 
	gzmq
::
ªp_t
::
	$xªcv
 (
msg_t
 *
msg_
)

61 i‡(
£ndög_ª∂y
) {

62 
î∫o
 = 
EFSM
;

68 i‡(
ªque°_begös
) {

69 
åue
) {

70 
rc
 = 
rouãr_t
::
	`xªcv
 (
msg_
);

71 i‡(
rc
 != 0)

72  
rc
;

74 i‡((
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
)) {

76 
boﬁ
 
bŸtom
 = (
msg_
->
	`size
 () == 0);

79 
rc
 = 
rouãr_t
::
	`x£nd
 (
msg_
);

80 
	`î∫o_as£π
 (
rc
 == 0);

82 i‡(
bŸtom
)

88 
rc
 = 
rouãr_t
::
	`rﬁlback
 ();

89 
	`î∫o_as£π
 (
rc
 == 0);

92 
ªque°_begös
 = 
Ál£
;

96 
rc
 = 
rouãr_t
::
	`xªcv
 (
msg_
);

97 i‡(
rc
 != 0)

98  
rc
;

101 i‡(!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
)) {

102 
£ndög_ª∂y
 = 
åue
;

103 
ªque°_begös
 = 
åue
;

107 
	}
}

109 
boﬁ
 
	gzmq
::
ªp_t
::
	$xhas_ö
 ()

111 i‡(
£ndög_ª∂y
)

112  
Ál£
;

114  
rouãr_t
::
	`xhas_ö
 ();

115 
	}
}

117 
boﬁ
 
	gzmq
::
ªp_t
::
	$xhas_out
 ()

119 i‡(!
£ndög_ª∂y
)

120  
Ál£
;

122  
rouãr_t
::
	`xhas_out
 ();

123 
	}
}

	@rep.hpp

20 #i‚de‡
__ZMQ_REP_HPP_INCLUDED__


21 
	#__ZMQ_REP_HPP_INCLUDED__


	)

23 
	~"rouãr.hµ
"

25 
«me•a˚
 
	gzmq


28 
˛ass
 
	g˘x_t
;

29 
˛ass
 
	gmsg_t
;

30 
˛ass
 
	gio_thªad_t
;

31 
˛ass
 
	gsockë_ba£_t
;

33 ˛as†
	cªp_t
 : 
public
 
rouãr_t


35 
public
:

37 
ªp_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid
);

38 ~
ªp_t
 ();

41 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

42 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

43 
boﬁ
 
xhas_ö
 ();

44 
boﬁ
 
xhas_out
 ();

46 
	g¥iv©e
:

50 
boﬁ
 
£ndög_ª∂y
;

54 
boﬁ
 
	gªque°_begös
;

56 
ªp_t
 (constÑep_t&);

57 c⁄° 
	gªp_t
 &
	g›î©‹
 = (c⁄° 
ªp_t
&);

	@req.cpp

20 
	~"ªq.hµ
"

21 
	~"îr.hµ
"

22 
	~"msg.hµ
"

23 
	~"wúe.hµ
"

24 
	~"øndom.hµ
"

25 
	~"likñy.hµ
"

27 
	gzmq
::
ªq_t
::
	$ªq_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

28 
	`dóÀr_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

29 
	`ª˚ivög_ª∂y
 (
Ál£
),

30 
	`mesßge_begös
 (
åue
),

31 
	`ª∂y_pùe
 (
NULL
),

32 
	`ªque°_id_‰ames_íabÀd
 (
Ál£
),

33 
	`ªque°_id
 (
	`gíî©e_øndom
()),

34 
	$°ri˘
 (
åue
)

36 
›ti⁄s
.
ty≥
 = 
ZMQ_REQ
;

37 
	}
}

39 
	gzmq
::
ªq_t
::~
	$ªq_t
 ()

41 
	}
}

43 
zmq
::
ªq_t
::
	$x£nd
 (
msg_t
 *
msg_
)

47 i‡(
ª˚ivög_ª∂y
) {

48 i‡(
°ri˘
) {

49 
î∫o
 = 
EFSM
;

53 i‡(
ª∂y_pùe
)

54 
ª∂y_pùe
->
	`ãrmö©e
 (
Ál£
);

55 
ª˚ivög_ª∂y
 = 
Ál£
;

56 
mesßge_begös
 = 
åue
;

60 i‡(
mesßge_begös
) {

61 
ª∂y_pùe
 = 
NULL
;

63 i‡(
ªque°_id_‰ames_íabÀd
) {

64 
ªque°_id
++;

66 
msg_t
 
id
;

67 
rc
 = 
id
.
	`öô_d©a
 (&
ªque°_id
,  (ªque°_id), 
NULL
, NULL);

68 
	`î∫o_as£π
 (
rc
 == 0);

69 
id
.
	`£t_Êags
 (
msg_t
::
m‹e
);

71 
rc
 = 
dóÀr_t
::
	`£ndpùe
 (&
id
, &
ª∂y_pùe
);

72 i‡(
rc
 != 0)

76 
msg_t
 
bŸtom
;

77 
rc
 = 
bŸtom
.
	`öô
 ();

78 
	`î∫o_as£π
 (
rc
 == 0);

79 
bŸtom
.
	`£t_Êags
 (
msg_t
::
m‹e
);

81 
rc
 = 
dóÀr_t
::
	`£ndpùe
 (&
bŸtom
, &
ª∂y_pùe
);

82 i‡(
rc
 != 0)

84 
	`as£π
 (
ª∂y_pùe
);

86 
mesßge_begös
 = 
Ál£
;

93 
msg_t
 
dr›
;

94 
åue
) {

95 
rc
 = 
dr›
.
	`öô
 ();

96 
	`î∫o_as£π
 (
rc
 == 0);

97 
rc
 = 
dóÀr_t
::
	`xªcv
 (&
dr›
);

98 i‡(
rc
 != 0)

100 
dr›
.
	`˛o£
 ();

104 
boﬁ
 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹ê? 
åue
 : 
Ál£
;

106 
rc
 = 
dóÀr_t
::
	`x£nd
 (
msg_
);

107 i‡(
rc
 != 0)

108  
rc
;

111 i‡(!
m‹e
) {

112 
ª˚ivög_ª∂y
 = 
åue
;

113 
mesßge_begös
 = 
åue
;

117 
	}
}

119 
	gzmq
::
ªq_t
::
	$xªcv
 (
msg_t
 *
msg_
)

122 i‡(!
ª˚ivög_ª∂y
) {

123 
î∫o
 = 
EFSM
;

128 
mesßge_begös
) {

130 i‡(
ªque°_id_‰ames_íabÀd
) {

131 
rc
 = 
	`ªcv_ª∂y_pùe
 (
msg_
);

132 i‡(
rc
 != 0)

133  
rc
;

135 i‡(
	`u∆ikñy
 (!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) ||

136 
msg_
->
	`size
 (Ë! (
ªque°_id
) ||

137 *
°©ic_ˇ°
<
uöt32_t
 *> (
msg_
->
	`d©a
 ()Ë!
ªque°_id
)) {

139 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) {

140 
rc
 = 
	`ªcv_ª∂y_pùe
 (
msg_
);

141 
	`î∫o_as£π
 (
rc
 == 0);

149 
rc
 = 
	`ªcv_ª∂y_pùe
 (
msg_
);

150 i‡(
rc
 != 0)

151  
rc
;

153 i‡(
	`u∆ikñy
 (!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
Ë|| msg_->
	`size
 () != 0)) {

155 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) {

156 
rc
 = 
	`ªcv_ª∂y_pùe
 (
msg_
);

157 
	`î∫o_as£π
 (
rc
 == 0);

162 
mesßge_begös
 = 
Ál£
;

165 
rc
 = 
	`ªcv_ª∂y_pùe
 (
msg_
);

166 i‡(
rc
 != 0)

167  
rc
;

170 i‡(!(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
)) {

171 
ª˚ivög_ª∂y
 = 
Ál£
;

172 
mesßge_begös
 = 
åue
;

176 
	}
}

178 
boﬁ
 
	gzmq
::
ªq_t
::
	$xhas_ö
 ()

182 i‡(!
ª˚ivög_ª∂y
)

183  
Ál£
;

185  
dóÀr_t
::
	`xhas_ö
 ();

186 
	}
}

188 
boﬁ
 
	gzmq
::
ªq_t
::
	$xhas_out
 ()

190 i‡(
ª˚ivög_ª∂y
)

191  
Ál£
;

193  
dóÀr_t
::
	`xhas_out
 ();

194 
	}
}

196 
	gzmq
::
ªq_t
::
	$x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
)

198 
boﬁ
 
is_öt
 = (
›tvÆÀn_
 ==  ());

199 
vÆue
 = 
is_öt
? *((*Ë
›tvÆ_
): 0;

200 
›ti⁄_
) {

201 
ZMQ_REQ_CORRELATE
:

202 i‡(
is_öt
 && 
vÆue
 >= 0) {

203 
ªque°_id_‰ames_íabÀd
 = (
vÆue
 != 0);

208 
ZMQ_REQ_RELAXED
:

209 i‡(
is_öt
 && 
vÆue
 >= 0) {

210 
°ri˘
 = (
vÆue
 == 0);

219  
dóÀr_t
::
	`x£tsock›t
 (
›ti⁄_
, 
›tvÆ_
, 
›tvÆÀn_
);

220 
	}
}

222 
	gzmq
::
ªq_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

224 i‡(
ª∂y_pùe
 =
pùe_
)

225 
ª∂y_pùe
 = 
NULL
;

226 
dóÀr_t
::
	`xpùe_ãrmö©ed
 (
pùe_
);

227 
	}
}

229 
	gzmq
::
ªq_t
::
	$ªcv_ª∂y_pùe
 (
msg_t
 *
msg_
)

231 
åue
) {

232 
pùe_t
 *
pùe
 = 
NULL
;

233 
rc
 = 
dóÀr_t
::
	`ªcvpùe
 (
msg_
, &
pùe
);

234 i‡(
rc
 != 0)

235  
rc
;

236 i‡(!
ª∂y_pùe
 || 
pùe
 ==Ñeply_pipe)

239 
	}
}

241 
	gzmq
::
ªq_£ssi⁄_t
::
	$ªq_£ssi⁄_t
 (
io_thªad_t
 *
io_thªad_
, 
boﬁ
 
c⁄√˘_
,

242 
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

243 c⁄° 
addªss_t
 *
addr_
) :

244 
	`£ssi⁄_ba£_t
 (
io_thªad_
, 
c⁄√˘_
, 
sockë_
, 
›ti⁄s_
, 
addr_
),

245 
	$°©e
 (
bŸtom
)

247 
	}
}

249 
	gzmq
::
ªq_£ssi⁄_t
::~
	$ªq_£ssi⁄_t
 ()

251 
	}
}

253 
zmq
::
ªq_£ssi⁄_t
::
	$push_msg
 (
msg_t
 *
msg_
)

255 
°©e
) {

256 
bŸtom
:

257 i‡(
msg_
->
	`Êags
 (Ë=
msg_t
::
m‹e
 && msg_->
	`size
 () == 0) {

258 
°©e
 = 
body
;

259  
£ssi⁄_ba£_t
::
	`push_msg
 (
msg_
);

262 
body
:

263 i‡(
msg_
->
	`Êags
 (Ë=
msg_t
::
m‹e
)

264  
£ssi⁄_ba£_t
::
	`push_msg
 (
msg_
);

265 i‡(
msg_
->
	`Êags
 () == 0) {

266 
°©e
 = 
bŸtom
;

267  
£ssi⁄_ba£_t
::
	`push_msg
 (
msg_
);

271 
î∫o
 = 
EFAULT
;

273 
	}
}

275 
	gzmq
::
ªq_£ssi⁄_t
::
	$ª£t
 ()

277 
£ssi⁄_ba£_t
::
	`ª£t
 ();

278 
°©e
 = 
bŸtom
;

279 
	}
}

	@req.hpp

20 #i‚de‡
__ZMQ_REQ_HPP_INCLUDED__


21 
	#__ZMQ_REQ_HPP_INCLUDED__


	)

23 
	~"dóÀr.hµ
"

24 
	~"°döt.hµ
"

26 
«me•a˚
 
	gzmq


29 
˛ass
 
	g˘x_t
;

30 
˛ass
 
	gmsg_t
;

31 
˛ass
 
	gio_thªad_t
;

32 
˛ass
 
	gsockë_ba£_t
;

34 ˛as†
	cªq_t
 : 
public
 
dóÀr_t


36 
public
:

38 
ªq_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

39 ~
ªq_t
 ();

42 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

43 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

44 
boﬁ
 
xhas_ö
 ();

45 
boﬁ
 
xhas_out
 ();

46 
x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

47 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

49 
	g¥Ÿe˘ed
:

53 
ªcv_ª∂y_pùe
 (
zmq
::
msg_t
 *
msg_
);

55 
	g¥iv©e
:

59 
boﬁ
 
ª˚ivög_ª∂y
;

63 
boﬁ
 
	gmesßge_begös
;

66 
	gzmq
::
pùe_t
 *
ª∂y_pùe
;

69 
boﬁ
 
	gªque°_id_‰ames_íabÀd
;

73 
uöt32_t
 
	gªque°_id
;

78 
boﬁ
 
	g°ri˘
;

80 
ªq_t
 (constÑeq_t&);

81 c⁄° 
	gªq_t
 &
	g›î©‹
 = (c⁄° 
ªq_t
&);

84 ˛as†
	cªq_£ssi⁄_t
 : 
public
 
£ssi⁄_ba£_t


86 
public
:

88 
ªq_£ssi⁄_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
, 
boﬁ
 
c⁄√˘_
,

89 
zmq
::
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

90 c⁄° 
addªss_t
 *
addr_
);

91 ~
ªq_£ssi⁄_t
 ();

94 
push_msg
 (
msg_t
 *
msg_
);

95 
ª£t
 ();

97 
	g¥iv©e
:

100 
bŸtom
,

101 
	gbody


102 } 
	g°©e
;

104 
ªq_£ssi⁄_t
 (constÑeq_session_t&);

105 c⁄° 
	gªq_£ssi⁄_t
 &
	g›î©‹
 = (c⁄° 
ªq_£ssi⁄_t
&);

	@router.cpp

20 
	~"rouãr.hµ
"

21 
	~"pùe.hµ
"

22 
	~"wúe.hµ
"

23 
	~"øndom.hµ
"

24 
	~"likñy.hµ
"

25 
	~"îr.hµ
"

27 
	gzmq
::
rouãr_t
::
	$rouãr_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

28 
	`sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

29 
	`¥e„tched
 (
Ál£
),

30 
	`idítôy_£¡
 (
Ál£
),

31 
	`m‹e_ö
 (
Ál£
),

32 
	`cuºít_out
 (
NULL
),

33 
	`m‹e_out
 (
Ál£
),

34 
	`√xt_≥î_id
 (
	`gíî©e_øndom
 ()),

35 
	`m™d©‹y
 (
Ál£
),

37 
	`øw_sock
 (
Ál£
),

38 
	$¥obe_rouãr
 (
Ál£
)

40 
›ti⁄s
.
ty≥
 = 
ZMQ_ROUTER
;

41 
›ti⁄s
.
ªcv_idítôy
 = 
åue
;

42 
›ti⁄s
.
øw_sock
 = 
Ál£
;

44 
¥e„tched_id
.
	`öô
 ();

45 
¥e„tched_msg
.
	`öô
 ();

46 
	}
}

48 
	gzmq
::
rouãr_t
::~
	$rouãr_t
 ()

50 
	`zmq_as£π
 (
™⁄ymous_pùes
.
	`em±y
 ());;

51 
	`zmq_as£π
 (
ouçùes
.
	`em±y
 ());

52 
¥e„tched_id
.
	`˛o£
 ();

53 
¥e„tched_msg
.
	`˛o£
 ();

54 
	}
}

56 
	gzmq
::
rouãr_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

59 ()
subs¸ibe_to_Æl_
;

61 
	`zmq_as£π
 (
pùe_
);

63 i‡(
¥obe_rouãr
) {

64 
msg_t
 
¥obe_msg_
;

65 
rc
 = 
¥obe_msg_
.
	`öô
 ();

66 
	`î∫o_as£π
 (
rc
 == 0);

68 
rc
 = 
pùe_
->
	`wrôe
 (&
¥obe_msg_
);

70 
pùe_
->
	`Êush
 ();

72 
rc
 = 
¥obe_msg_
.
	`˛o£
 ();

73 
	`î∫o_as£π
 (
rc
 == 0);

76 
boﬁ
 
idítôy_ok
 = 
	`idítify_≥î
 (
pùe_
);

77 i‡(
idítôy_ok
)

78 
fq
.
	`©èch
 (
pùe_
);

80 
™⁄ymous_pùes
.
	`ö£π
 (
pùe_
);

81 
	}
}

83 
	gzmq
::
rouãr_t
::
	$x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

84 
size_t
 
›tvÆÀn_
)

86 
boﬁ
 
is_öt
 = (
›tvÆÀn_
 ==  ());

87 
vÆue
 = 
is_öt
? *((*Ë
›tvÆ_
): 0;

89 
›ti⁄_
) {

90 
ZMQ_ROUTER_RAW
:

91 i‡(
is_öt
 && 
vÆue
 >= 0) {

92 
øw_sock
 = (
vÆue
 != 0);

93 i‡(
øw_sock
) {

94 
›ti⁄s
.
ªcv_idítôy
 = 
Ál£
;

95 
›ti⁄s
.
øw_sock
 = 
åue
;

101 
ZMQ_ROUTER_MANDATORY
:

102 i‡(
is_öt
 && 
vÆue
 >= 0) {

103 
m™d©‹y
 = (
vÆue
 != 0);

108 
ZMQ_PROBE_ROUTER
:

109 i‡(
is_öt
 && 
vÆue
 >= 0) {

110 
¥obe_rouãr
 = (
vÆue
 != 0);

118 
î∫o
 = 
EINVAL
;

120 
	}
}

123 
	gzmq
::
rouãr_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

125 
°d
::
£t
 <
pùe_t
*>::
ôî©‹
 
ô
 = 
™⁄ymous_pùes
.
	`föd
 (
pùe_
);

126 i‡(
ô
 !
™⁄ymous_pùes
.
	`íd
 ())

127 
™⁄ymous_pùes
.
	`îa£
 (
ô
);

129 
ouçùes_t
::
ôî©‹
 
ô
 = 
ouçùes
.
	`föd
 (
pùe_
->
	`gë_idítôy
 ());

130 
	`zmq_as£π
 (
ô
 !
ouçùes
.
	`íd
 ());

131 
ouçùes
.
	`îa£
 (
ô
);

132 
fq
.
	`pùe_ãrmö©ed
 (
pùe_
);

133 i‡(
pùe_
 =
cuºít_out
)

134 
cuºít_out
 = 
NULL
;

136 
	}
}

138 
	gzmq
::
rouãr_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

140 
°d
::
£t
 <
pùe_t
*>::
ôî©‹
 
ô
 = 
™⁄ymous_pùes
.
	`föd
 (
pùe_
);

141 i‡(
ô
 =
™⁄ymous_pùes
.
	`íd
 ())

142 
fq
.
	`a˘iv©ed
 (
pùe_
);

144 
boﬁ
 
idítôy_ok
 = 
	`idítify_≥î
 (
pùe_
);

145 i‡(
idítôy_ok
) {

146 
™⁄ymous_pùes
.
	`îa£
 (
ô
);

147 
fq
.
	`©èch
 (
pùe_
);

150 
	}
}

152 
	gzmq
::
rouãr_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

154 
ouçùes_t
::
ôî©‹
 
ô
;

155 
ô
 = 
ouçùes
.
	`begö
 (); ià!ouçùes.
	`íd
 (); ++it)

156 i‡(
ô
->
£c⁄d
.
pùe
 =
pùe_
)

159 
	`zmq_as£π
 (
ô
 !
ouçùes
.
	`íd
 ());

160 
	`zmq_as£π
 (!
ô
->
£c⁄d
.
a˘ive
);

161 
ô
->
£c⁄d
.
a˘ive
 = 
åue
;

162 
	}
}

164 
	gzmq
::
rouãr_t
::
	$x£nd
 (
msg_t
 *
msg_
)

168 i‡(!
m‹e_out
) {

169 
	`zmq_as£π
 (!
cuºít_out
);

174 i‡(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) {

176 
m‹e_out
 = 
åue
;

181 
blob_t
 
	`idítôy
 ((*Ë
msg_
->
	`d©a
 (), msg_->
	`size
 ());

182 
ouçùes_t
::
ôî©‹
 
ô
 = 
ouçùes
.
	`föd
 (
idítôy
);

184 i‡(
ô
 !
ouçùes
.
	`íd
 ()) {

185 
cuºít_out
 = 
ô
->
£c⁄d
.
pùe
;

186 i‡(!
cuºít_out
->
	`check_wrôe
 ()) {

187 
ô
->
£c⁄d
.
a˘ive
 = 
Ál£
;

188 
cuºít_out
 = 
NULL
;

189 i‡(
m™d©‹y
) {

190 
m‹e_out
 = 
Ál£
;

191 
î∫o
 = 
EAGAIN
;

197 i‡(
m™d©‹y
) {

198 
m‹e_out
 = 
Ál£
;

199 
î∫o
 = 
EHOSTUNREACH
;

204 
rc
 = 
msg_
->
	`˛o£
 ();

205 
	`î∫o_as£π
 (
rc
 == 0);

206 
rc
 = 
msg_
->
	`öô
 ();

207 
	`î∫o_as£π
 (
rc
 == 0);

212 i‡(
›ti⁄s
.
øw_sock
)

213 
msg_
->
	`ª£t_Êags
 (
msg_t
::
m‹e
);

216 
m‹e_out
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

219 i‡(
cuºít_out
) {

224 i‡(
øw_sock
 && 
msg_
->
	`size
() == 0) {

225 
cuºít_out
->
	`ãrmö©e
 (
Ál£
);

226 
rc
 = 
msg_
->
	`˛o£
 ();

227 
	`î∫o_as£π
 (
rc
 == 0);

228 
rc
 = 
msg_
->
	`öô
 ();

229 
	`î∫o_as£π
 (
rc
 == 0);

230 
cuºít_out
 = 
NULL
;

234 
boﬁ
 
ok
 = 
cuºít_out
->
	`wrôe
 (
msg_
);

235 i‡(
	`u∆ikñy
 (!
ok
))

236 
cuºít_out
 = 
NULL
;

238 i‡(!
m‹e_out
) {

239 
cuºít_out
->
	`Êush
 ();

240 
cuºít_out
 = 
NULL
;

244 
rc
 = 
msg_
->
	`˛o£
 ();

245 
	`î∫o_as£π
 (
rc
 == 0);

249 
rc
 = 
msg_
->
	`öô
 ();

250 
	`î∫o_as£π
 (
rc
 == 0);

253 
	}
}

255 
	gzmq
::
rouãr_t
::
	$xªcv
 (
msg_t
 *
msg_
)

257 i‡(
¥e„tched
) {

258 i‡(!
idítôy_£¡
) {

259 
rc
 = 
msg_
->
	`move
 (
¥e„tched_id
);

260 
	`î∫o_as£π
 (
rc
 == 0);

261 
idítôy_£¡
 = 
åue
;

264 
rc
 = 
msg_
->
	`move
 (
¥e„tched_msg
);

265 
	`î∫o_as£π
 (
rc
 == 0);

266 
¥e„tched
 = 
Ál£
;

268 
m‹e_ö
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

272 
pùe_t
 *
pùe
 = 
NULL
;

273 
rc
 = 
fq
.
	`ªcvpùe
 (
msg_
, &
pùe
);

278 
rc
 =0 && 
msg_
->
	`is_idítôy
 ())

279 
rc
 = 
fq
.
	`ªcvpùe
 (
msg_
, &
pùe
);

281 i‡(
rc
 != 0)

284 
	`zmq_as£π
 (
pùe
 !
NULL
);

287 i‡(
m‹e_ö
)

288 
m‹e_ö
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

293 
rc
 = 
¥e„tched_msg
.
	`move
 (*
msg_
);

294 
	`î∫o_as£π
 (
rc
 == 0);

295 
¥e„tched
 = 
åue
;

297 
blob_t
 
idítôy
 = 
pùe
->
	`gë_idítôy
 ();

298 
rc
 = 
msg_
->
	`öô_size
 (
idítôy
.
	`size
 ());

299 
	`î∫o_as£π
 (
rc
 == 0);

300 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
idítôy
.d©®(), idítôy.
	`size
 ());

301 
msg_
->
	`£t_Êags
 (
msg_t
::
m‹e
);

302 
idítôy_£¡
 = 
åue
;

306 
	}
}

308 
	gzmq
::
rouãr_t
::
	$rﬁlback
 ()

310 i‡(
cuºít_out
) {

311 
cuºít_out
->
	`rﬁlback
 ();

312 
cuºít_out
 = 
NULL
;

313 
m‹e_out
 = 
Ál£
;

316 
	}
}

318 
boﬁ
 
	gzmq
::
rouãr_t
::
	$xhas_ö
 ()

322 i‡(
m‹e_ö
)

323  
åue
;

326 i‡(
¥e„tched
)

327  
åue
;

331 
pùe_t
 *
pùe
 = 
NULL
;

332 
rc
 = 
fq
.
	`ªcvpùe
 (&
¥e„tched_msg
, &
pùe
);

338 
rc
 =0 && 
¥e„tched_msg
.
	`is_idítôy
 ())

339 
rc
 = 
fq
.
	`ªcvpùe
 (&
¥e„tched_msg
, &
pùe
);

341 i‡(
rc
 != 0)

342  
Ál£
;

344 
	`zmq_as£π
 (
pùe
 !
NULL
);

346 
blob_t
 
idítôy
 = 
pùe
->
	`gë_idítôy
 ();

347 
rc
 = 
¥e„tched_id
.
	`öô_size
 (
idítôy
.
	`size
 ());

348 
	`î∫o_as£π
 (
rc
 == 0);

349 
	`mem˝y
 (
¥e„tched_id
.
	`d©a
 (), 
idítôy
.d©®(), idítôy.
	`size
 ());

350 
¥e„tched_id
.
	`£t_Êags
 (
msg_t
::
m‹e
);

352 
¥e„tched
 = 
åue
;

353 
idítôy_£¡
 = 
Ál£
;

355  
åue
;

356 
	}
}

358 
boﬁ
 
	gzmq
::
rouãr_t
::
	$xhas_out
 ()

363  
åue
;

364 
	}
}

366 
boﬁ
 
	gzmq
::
rouãr_t
::
	$idítify_≥î
 (
pùe_t
 *
pùe_
)

368 
msg_t
 
msg
;

369 
blob_t
 
idítôy
;

370 
boﬁ
 
ok
;

372 i‡(
›ti⁄s
.
øw_sock
) {

373 
buf
 [5];

374 
buf
 [0] = 0;

375 
	`put_uöt32
 (
buf
 + 1, 
√xt_≥î_id
++);

376 
idítôy
 = 
	`blob_t
 (
buf
,  buf);

379 
msg
.
	`öô
 ();

380 
ok
 = 
pùe_
->
	`ªad
 (&
msg
);

381 i‡(!
ok
)

382  
Ál£
;

384 i‡(
msg
.
	`size
 () == 0) {

386 
buf
 [5];

387 
buf
 [0] = 0;

388 
	`put_uöt32
 (
buf
 + 1, 
√xt_≥î_id
++);

389 
idítôy
 = 
	`blob_t
 (
buf
,  buf);

390 
msg
.
	`˛o£
 ();

393 
idítôy
 = 
	`blob_t
 ((*Ë
msg
.
	`d©a
 (), msg.
	`size
 ());

394 
ouçùes_t
::
ôî©‹
 
ô
 = 
ouçùes
.
	`föd
 (
idítôy
);

395 
msg
.
	`˛o£
 ();

398 i‡(
ô
 !
ouçùes
.
	`íd
 ())

399  
Ál£
;

403 
pùe_
->
	`£t_idítôy
 (
idítôy
);

405 
ouçùe_t
 
ouçùe
 = {
pùe_
, 
åue
};

406 
ok
 = 
ouçùes
.
	`ö£π
 (
ouçùes_t
::
	`vÆue_ty≥
 (
idítôy
, 
ouçùe
)).
£c⁄d
;

407 
	`zmq_as£π
 (
ok
);

409  
åue
;

410 
	}
}

	@router.hpp

20 #i‚de‡
__ZMQ_ROUTER_HPP_INCLUDED__


21 
	#__ZMQ_ROUTER_HPP_INCLUDED__


	)

23 
	~<m≠
>

25 
	~"sockë_ba£.hµ
"

26 
	~"£ssi⁄_ba£.hµ
"

27 
	~"°döt.hµ
"

28 
	~"blob.hµ
"

29 
	~"msg.hµ
"

30 
	~"fq.hµ
"

32 
«me•a˚
 
	gzmq


35 
˛ass
 
	g˘x_t
;

36 
˛ass
 
	gpùe_t
;

39 ˛as†
	crouãr_t
 :

40 
public
 
sockë_ba£_t


42 
public
:

44 
rouãr_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid
);

45 ~
rouãr_t
 ();

48 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

49 
x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

50 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

51 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

52 
boﬁ
 
xhas_ö
 ();

53 
boﬁ
 
xhas_out
 ();

54 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

55 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

56 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

58 
	g¥Ÿe˘ed
:

61 
rﬁlback
 ();

63 
	g¥iv©e
:

66 
boﬁ
 
idítify_≥î
 (
pùe_t
 *
pùe_
);

69 
fq_t
 
	gfq
;

72 
boﬁ
 
	g¥e„tched
;

76 
boﬁ
 
	gidítôy_£¡
;

79 
msg_t
 
	g¥e„tched_id
;

82 
msg_t
 
	g¥e„tched_msg
;

85 
boﬁ
 
	gm‹e_ö
;

87 
	souçùe_t


89 
	gzmq
::
pùe_t
 *
pùe
;

90 
boﬁ
 
	ga˘ive
;

94 
	g°d
::
£t
 <
pùe_t
*> 
™⁄ymous_pùes
;

97 
	g°d
::
	tm≠
 <
	tblob_t
, 
	touçùe_t
> 
	touçùes_t
;

98 
ouçùes_t
 
	gouçùes
;

101 
	gzmq
::
pùe_t
 *
cuºít_out
;

104 
boﬁ
 
	gm‹e_out
;

108 
uöt32_t
 
	g√xt_≥î_id
;

112 
boﬁ
 
	gm™d©‹y
;

113 
boﬁ
 
	gøw_sock
;

116 
boﬁ
 
	g¥obe_rouãr
;

118 
rouãr_t
 (constÑouter_t&);

119 c⁄° 
	grouãr_t
 &
	g›î©‹
 = (c⁄° 
rouãr_t
&);

	@select.cpp

20 
	~"£À˘.hµ
"

21 #i‡
deföed
 
ZMQ_USE_SELECT


23 
	~"∂©f‹m.hµ
"

24 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


25 
	~"wödows.hµ
"

26 #ñi‡
deföed
 
ZMQ_HAVE_HPUX


27 
	~<sys/∑øm.h
>

28 
	~<sys/ty≥s.h
>

29 
	~<sys/time.h
>

30 #ñi‡
deföed
 
ZMQ_HAVE_OPENVMS


31 
	~<sys/ty≥s.h
>

32 
	~<sys/time.h
>

34 
	~<sys/£À˘.h
>

37 
	~<°rög.h
>

38 
	~<Æg‹ôhm
>

40 
	~"îr.hµ
"

41 
	~"c⁄fig.hµ
"

42 
	~"i_pﬁl_evíts.hµ
"

44 
	gzmq
::
£À˘_t
::
	$£À˘_t
 () :

45 
	`maxfd
 (
ªtúed_fd
),

46 
	`ªtúed
 (
Ál£
),

47 
	$°›pög
 (
Ál£
)

50 
	`FD_ZERO
 (&
sour˚_£t_ö
);

51 
	`FD_ZERO
 (&
sour˚_£t_out
);

52 
	`FD_ZERO
 (&
sour˚_£t_îr
);

53 
	}
}

55 
	gzmq
::
£À˘_t
::~
	$£À˘_t
 ()

57 
w‹kî
.
	`°›
 ();

58 
	}
}

60 
	gzmq
::
£À˘_t
::
h™dÀ_t
 
zmq
::£À˘_t::
	$add_fd
 (
fd_t
 
fd_
, 
i_pﬁl_evíts
 *
evíts_
)

63 
fd_íåy_t
 
íåy
 = {
fd_
, 
evíts_
};

64 
fds
.
	`push_back
 (
íåy
);

68 
	`zmq_as£π
 (
fds
.
	`size
 (Ë<
FD_SETSIZE
);

71 
	`FD_SET
 (
fd_
, &
sour˚_£t_îr
);

74 i‡(
fd_
 > 
maxfd
)

75 
maxfd
 = 
fd_
;

78 
	`adju°_lﬂd
 (1);

80  
fd_
;

81 
	}
}

83 
	gzmq
::
£À˘_t
::
	$rm_fd
 (
h™dÀ_t
 
h™dÀ_
)

86 
fd_£t_t
::
ôî©‹
 
ô
;

87 
ô
 = 
fds
.
	`begö
 (); ià!fds.
	`íd
 (); ++it)

88 i‡(
ô
->
fd
 =
h™dÀ_
)

90 
	`zmq_as£π
 (
ô
 !
fds
.
	`íd
 ());

91 
ô
->
fd
 = 
ªtúed_fd
;

92 
ªtúed
 = 
åue
;

95 
	`FD_CLR
 (
h™dÀ_
, &
sour˚_£t_ö
);

96 
	`FD_CLR
 (
h™dÀ_
, &
sour˚_£t_out
);

97 
	`FD_CLR
 (
h™dÀ_
, &
sour˚_£t_îr
);

100 
	`FD_CLR
 (
h™dÀ_
, &
ªadfds
);

101 
	`FD_CLR
 (
h™dÀ_
, &
wrôefds
);

102 
	`FD_CLR
 (
h™dÀ_
, &
ex˚±fds
);

106 i‡(
h™dÀ_
 =
maxfd
) {

107 
maxfd
 = 
ªtúed_fd
;

108 
fd_£t_t
::
ôî©‹
 
ô
 = 
fds
.
	`begö
 (); ià!fds.
	`íd
 (); ++it)

109 i‡(
ô
->
fd
 > 
maxfd
)

110 
maxfd
 = 
ô
->
fd
;

114 
	`adju°_lﬂd
 (-1);

115 
	}
}

117 
	gzmq
::
£À˘_t
::
	$£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

119 
	`FD_SET
 (
h™dÀ_
, &
sour˚_£t_ö
);

120 
	}
}

122 
	gzmq
::
£À˘_t
::
	$ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
)

124 
	`FD_CLR
 (
h™dÀ_
, &
sour˚_£t_ö
);

125 
	}
}

127 
	gzmq
::
£À˘_t
::
	$£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

129 
	`FD_SET
 (
h™dÀ_
, &
sour˚_£t_out
);

130 
	}
}

132 
	gzmq
::
£À˘_t
::
	$ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
)

134 
	`FD_CLR
 (
h™dÀ_
, &
sour˚_£t_out
);

135 
	}
}

137 
	gzmq
::
£À˘_t
::
	$°¨t
 ()

139 
w‹kî
.
	`°¨t
 (
w‹kî_routöe
, 
this
);

140 
	}
}

142 
	gzmq
::
£À˘_t
::
	$°›
 ()

144 
°›pög
 = 
åue
;

145 
	}
}

147 
	gzmq
::
£À˘_t
::
	$max_fds
 ()

149  
FD_SETSIZE
;

150 
	}
}

152 
	gzmq
::
£À˘_t
::
	$lo›
 ()

154 !
°›pög
) {

157 
timeout
 = (Ë
	`execuã_timîs
 ();

160 
	`mem˝y
 (&
ªadfds
, &
sour˚_£t_ö
,  source_set_in);

161 
	`mem˝y
 (&
wrôefds
, &
sour˚_£t_out
,  source_set_out);

162 
	`mem˝y
 (&
ex˚±fds
, &
sour˚_£t_îr
,  source_set_err);

165 
timevÆ
 
tv
 = {(Ë(
timeout
 / 1000),

166 (Ë(
timeout
 % 1000 * 1000)};

167 #ifde‡
ZMQ_HAVE_WINDOWS


168 
rc
 = 
	`£À˘
 (0, &
ªadfds
, &
wrôefds
, &
ex˚±fds
,

169 
timeout
 ? &
tv
 : 
NULL
);

170 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

172 
rc
 = 
	`£À˘
 (
maxfd
 + 1, &
ªadfds
, &
wrôefds
, &
ex˚±fds
,

173 
timeout
 ? &
tv
 : 
NULL
);

174 i‡(
rc
 == -1) {

175 
	`î∫o_as£π
 (
î∫o
 =
EINTR
);

182 i‡(
rc
 == 0)

185 
fd_£t_t
::
size_ty≥
 
i
 = 0; i < 
fds
.
	`size
 (); i ++) {

186 i‡(
fds
 [
i
].
fd
 =
ªtúed_fd
)

188 i‡(
	`FD_ISSET
 (
fds
 [
i
].
fd
, &
ex˚±fds
))

189 
fds
 [
i
].
evíts
->
	`ö_evít
 ();

190 i‡(
fds
 [
i
].
fd
 =
ªtúed_fd
)

192 i‡(
	`FD_ISSET
 (
fds
 [
i
].
fd
, &
wrôefds
))

193 
fds
 [
i
].
evíts
->
	`out_evít
 ();

194 i‡(
fds
 [
i
].
fd
 =
ªtúed_fd
)

196 i‡(
	`FD_ISSET
 (
fds
 [
i
].
fd
, &
ªadfds
))

197 
fds
 [
i
].
evíts
->
	`ö_evít
 ();

201 i‡(
ªtúed
) {

202 
fds
.
	`îa£
 (
°d
::
	`ªmove_if
 (fds.
	`begö
 (), fds.
	`íd
 (),

203 
zmq
::
£À˘_t
::
is_ªtúed_fd
), 
fds
.
	`íd
 ());

204 
ªtúed
 = 
Ál£
;

207 
	}
}

209 
	gzmq
::
£À˘_t
::
	$w‹kî_routöe
 (*
¨g_
)

211 ((
£À˘_t
*Ë
¨g_
)->
	`lo›
 ();

212 
	}
}

214 
boﬁ
 
	gzmq
::
£À˘_t
::
	$is_ªtúed_fd
 (c⁄° 
fd_íåy_t
 &
íåy
)

216  (
íåy
.
fd
 =
ªtúed_fd
);

217 
	}
}

	@select.hpp

20 #i‚de‡
__ZMQ_SELECT_HPP_INCLUDED__


21 
	#__ZMQ_SELECT_HPP_INCLUDED__


	)

24 
	~"pﬁÀr.hµ
"

25 #i‡
deföed
 
ZMQ_USE_SELECT


27 
	~"∂©f‹m.hµ
"

29 
	~<°ddef.h
>

30 
	~<ve˘‹
>

32 #ifde‡
ZMQ_HAVE_WINDOWS


33 
	~"wösock2.h
"

34 #ñi‡
deföed
 
ZMQ_HAVE_OPENVMS


35 
	~<sys/ty≥s.h
>

36 
	~<sys/time.h
>

38 
	~<sys/£À˘.h
>

41 
	~"fd.hµ
"

42 
	~"thªad.hµ
"

43 
	~"pﬁÀr_ba£.hµ
"

45 
«me•a˚
 
	gzmq


48 
	gi_pﬁl_evíts
;

53 ˛as†
	c£À˘_t
 : 
public
 
pﬁÀr_ba£_t


55 
public
:

57 
fd_t
 
	th™dÀ_t
;

59 
£À˘_t
 ();

60 ~
£À˘_t
 ();

63 
h™dÀ_t
 
add_fd
 (
fd_t
 
fd_
, 
zmq
::
i_pﬁl_evíts
 *
evíts_
);

64 
rm_fd
 (
h™dÀ_t
 
h™dÀ_
);

65 
£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

66 
ª£t_pﬁlö
 (
h™dÀ_t
 
h™dÀ_
);

67 
£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

68 
ª£t_pﬁlout
 (
h™dÀ_t
 
h™dÀ_
);

69 
°¨t
 ();

70 
°›
 ();

72 
max_fds
 ();

74 
	g¥iv©e
:

77 
w‹kî_routöe
 (*
¨g_
);

80 
lo›
 ();

82 
	sfd_íåy_t


84 
fd_t
 
	gfd
;

85 
	gzmq
::
i_pﬁl_evíts
 *
evíts
;

89 
boﬁ
 
is_ªtúed_fd
 (c⁄° 
fd_íåy_t
 &
íåy
);

93 
	g°d
::
	tve˘‹
 <
	tfd_íåy_t
> 
	tfd_£t_t
;

94 
fd_£t_t
 
	gfds
;

96 
fd_£t
 
	gsour˚_£t_ö
;

97 
fd_£t
 
	gsour˚_£t_out
;

98 
fd_£t
 
	gsour˚_£t_îr
;

100 
fd_£t
 
	gªadfds
;

101 
fd_£t
 
	gwrôefds
;

102 
fd_£t
 
	gex˚±fds
;

105 
fd_t
 
	gmaxfd
;

108 
boﬁ
 
	gªtúed
;

111 
boﬁ
 
	g°›pög
;

114 
thªad_t
 
	gw‹kî
;

116 
£À˘_t
 (const select_t&);

117 c⁄° 
	g£À˘_t
 &
	g›î©‹
 = (c⁄° 
£À˘_t
&);

120 
£À˘_t
 
	tpﬁÀr_t
;

	@session_base.cpp

20 
	~"£ssi⁄_ba£.hµ
"

21 
	~"i_ígöe.hµ
"

22 
	~"îr.hµ
"

23 
	~"pùe.hµ
"

24 
	~"likñy.hµ
"

25 
	~"t˝_c⁄√˘î.hµ
"

26 
	~"ùc_c⁄√˘î.hµ
"

27 
	~"pgm_£ndî.hµ
"

28 
	~"pgm_ª˚ivî.hµ
"

29 
	~"addªss.hµ
"

31 
	~"˘x.hµ
"

32 
	~"ªq.hµ
"

34 
	gzmq
::
£ssi⁄_ba£_t
 *
zmq
::£ssi⁄_ba£_t::
	$¸óã
 (
˛ass
 
io_thªad_t
 *
io_thªad_
,

35 
boﬁ
 
c⁄√˘_
, 
˛ass
 
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

36 c⁄° 
addªss_t
 *
addr_
)

38 
£ssi⁄_ba£_t
 *
s
 = 
NULL
;

39 
›ti⁄s_
.
ty≥
) {

40 
ZMQ_REQ
:

41 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ªq_£ssi⁄_t
 (
io_thªad_
, 
c⁄√˘_
,

42 
sockë_
, 
›ti⁄s_
, 
addr_
);

44 
ZMQ_DEALER
:

45 
ZMQ_REP
:

46 
ZMQ_ROUTER
:

47 
ZMQ_PUB
:

48 
ZMQ_XPUB
:

49 
ZMQ_SUB
:

50 
ZMQ_XSUB
:

51 
ZMQ_PUSH
:

52 
ZMQ_PULL
:

53 
ZMQ_PAIR
:

54 
ZMQ_STREAM
:

55 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`£ssi⁄_ba£_t
 (
io_thªad_
, 
c⁄√˘_
,

56 
sockë_
, 
›ti⁄s_
, 
addr_
);

59 
î∫o
 = 
EINVAL
;

60  
NULL
;

62 
	`Æloc_as£π
 (
s
);

63  
s
;

64 
	}
}

66 
	gzmq
::
£ssi⁄_ba£_t
::
	$£ssi⁄_ba£_t
 (
˛ass
 
io_thªad_t
 *
io_thªad_
,

67 
boﬁ
 
c⁄√˘_
, 
˛ass
 
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

68 c⁄° 
addªss_t
 *
addr_
) :

69 
	`own_t
 (
io_thªad_
, 
›ti⁄s_
),

70 
	`io_obje˘_t
 (
io_thªad_
),

71 
	`c⁄√˘
 (
c⁄√˘_
),

72 
	`pùe
 (
NULL
),

73 
	`z≠_pùe
 (
NULL
),

74 
	`öcom∂ëe_ö
 (
Ál£
),

75 
	`≥ndög
 (
Ál£
),

76 
	`ígöe
 (
NULL
),

77 
	`sockë
 (
sockë_
),

78 
	`io_thªad
 (
io_thªad_
),

79 
	`has_lögî_timî
 (
Ál£
),

80 
	$addr
 (
addr_
)

82 
	}
}

84 
	gzmq
::
£ssi⁄_ba£_t
::~
	$£ssi⁄_ba£_t
 ()

86 
	`zmq_as£π
 (!
pùe
);

87 
	`zmq_as£π
 (!
z≠_pùe
);

90 i‡(
has_lögî_timî
) {

91 
	`ˇn˚l_timî
 (
lögî_timî_id
);

92 
has_lögî_timî
 = 
Ál£
;

96 i‡(
ígöe
)

97 
ígöe
->
	`ãrmö©e
 ();

99 
dñëe
 
addr
;

100 
	}
}

102 
	gzmq
::
£ssi⁄_ba£_t
::
	$©èch_pùe
 (
pùe_t
 *
pùe_
)

104 
	`zmq_as£π
 (!
	`is_ãrmö©ög
 ());

105 
	`zmq_as£π
 (!
pùe
);

106 
	`zmq_as£π
 (
pùe_
);

107 
pùe
 = 
pùe_
;

108 
pùe
->
	`£t_evít_sök
 (
this
);

109 
	}
}

111 
	gzmq
::
£ssi⁄_ba£_t
::
	$puŒ_msg
 (
msg_t
 *
msg_
)

113 i‡(!
pùe
 || !pùe->
	`ªad
 (
msg_
)) {

114 
î∫o
 = 
EAGAIN
;

117 
öcom∂ëe_ö
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

120 
	}
}

122 
	gzmq
::
£ssi⁄_ba£_t
::
	$push_msg
 (
msg_t
 *
msg_
)

124 i‡(
pùe
 &&Öùe->
	`wrôe
 (
msg_
)) {

125 
rc
 = 
msg_
->
	`öô
 ();

126 
	`î∫o_as£π
 (
rc
 == 0);

130 
î∫o
 = 
EAGAIN
;

132 
	}
}

134 
	gzmq
::
£ssi⁄_ba£_t
::
	$ªad_z≠_msg
 (
msg_t
 *
msg_
)

136 i‡(
z≠_pùe
 =
NULL
) {

137 
î∫o
 = 
ENOTCONN
;

141 i‡(!
z≠_pùe
->
	`ªad
 (
msg_
)) {

142 
î∫o
 = 
EAGAIN
;

147 
	}
}

149 
	gzmq
::
£ssi⁄_ba£_t
::
	$wrôe_z≠_msg
 (
msg_t
 *
msg_
)

151 i‡(
z≠_pùe
 =
NULL
) {

152 
î∫o
 = 
ENOTCONN
;

156 c⁄° 
boﬁ
 
ok
 = 
z≠_pùe
->
	`wrôe
 (
msg_
);

157 
	`zmq_as£π
 (
ok
);

159 i‡((
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) == 0)

160 
z≠_pùe
->
	`Êush
 ();

162 c⁄° 
rc
 = 
msg_
->
	`öô
 ();

163 
	`î∫o_as£π
 (
rc
 == 0);

165 
	}
}

167 
	gzmq
::
£ssi⁄_ba£_t
::
	$ª£t
 ()

169 
	}
}

171 
zmq
::
£ssi⁄_ba£_t
::
	$Êush
 ()

173 i‡(
pùe
)

174 
pùe
->
	`Êush
 ();

175 
	}
}

177 
	gzmq
::
£ssi⁄_ba£_t
::
	$˛ón_pùes
 ()

179 i‡(
pùe
) {

183 
pùe
->
	`rﬁlback
 ();

184 
pùe
->
	`Êush
 ();

187 
öcom∂ëe_ö
) {

188 
msg_t
 
msg
;

189 
rc
 = 
msg
.
	`öô
 ();

190 
	`î∫o_as£π
 (
rc
 == 0);

191 
rc
 = 
	`puŒ_msg
 (&
msg
);

192 
	`î∫o_as£π
 (
rc
 == 0);

193 
rc
 = 
msg
.
	`˛o£
 ();

194 
	`î∫o_as£π
 (
rc
 == 0);

197 
	}
}

199 
	gzmq
::
£ssi⁄_ba£_t
::
	$pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

202 
	`zmq_as£π
 (
pùe_
 =
pùe


203 || 
pùe_
 =
z≠_pùe


204 || 
ãrmö©ög_pùes
.
	`cou¡
 (
pùe_
) == 1);

206 i‡(
pùe_
 =
pùe
)

208 
pùe
 = 
NULL
;

210 i‡(
pùe_
 =
z≠_pùe
) {

211 
z≠_pùe
 = 
NULL
;

215 
ãrmö©ög_pùes
.
	`îa£
 (
pùe_
);

217 i‡(!
	`is_ãrmö©ög
 (Ë&& 
›ti⁄s
.
øw_sock
) {

218 i‡(
ígöe
) {

219 
ígöe
->
	`ãrmö©e
 ();

220 
ígöe
 = 
NULL
;

222 
	`ãrmö©e
 ();

228 i‡(
≥ndög
 && !
pùe
 && !
z≠_pùe
 && 
ãrmö©ög_pùes
.
	`em±y
 ())

229 
	`¥o˚ed_wôh_ãrm
 ();

230 
	}
}

232 
	gzmq
::
£ssi⁄_ba£_t
::
	$ªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

235 i‡(
	`u∆ikñy
(
pùe_
 !
pùe
 &&Öùe_ !
z≠_pùe
)) {

236 
	`zmq_as£π
 (
ãrmö©ög_pùes
.
	`cou¡
 (
pùe_
) == 1);

240 i‡(
	`u∆ikñy
 (
ígöe
 =
NULL
)) {

241 
pùe
->
	`check_ªad
 ();

245 i‡(
	`likñy
 (
pùe_
 =
pùe
))

246 
ígöe
->
	`ª°¨t_ouçut
 ();

248 
ígöe
->
	`z≠_msg_avaûabÀ
 ();

249 
	}
}

251 
	gzmq
::
£ssi⁄_ba£_t
::
	$wrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

254 i‡(
pùe
 !
pùe_
) {

255 
	`zmq_as£π
 (
ãrmö©ög_pùes
.
	`cou¡
 (
pùe_
) == 1);

259 i‡(
ígöe
)

260 
ígöe
->
	`ª°¨t_öput
 ();

261 
	}
}

263 
	gzmq
::
£ssi⁄_ba£_t
::
	$hiccu≥d
 (
pùe_t
 *)

267 
	`zmq_as£π
 (
Ál£
);

268 
	}
}

270 
	gzmq
::
sockë_ba£_t
 *
zmq
::
£ssi⁄_ba£_t
::
	$gë_sockë
 ()

272  
sockë
;

273 
	}
}

275 
	gzmq
::
£ssi⁄_ba£_t
::
	$¥o˚ss_∂ug
 ()

277 i‡(
c⁄√˘
)

278 
	`°¨t_c⁄√˘ög
 (
Ál£
);

279 
	}
}

281 
	gzmq
::
£ssi⁄_ba£_t
::
	$z≠_c⁄√˘
 ()

283 
	`zmq_as£π
 (
z≠_pùe
 =
NULL
);

285 
ídpoöt_t
 
≥î
 = 
	`föd_ídpoöt
 ("inproc://zeromq.zap.01");

286 i‡(
≥î
.
sockë
 =
NULL
) {

287 
î∫o
 = 
ECONNREFUSED
;

290 i‡(
≥î
.
›ti⁄s
.
ty≥
 !
ZMQ_REP


291 && 
≥î
.
›ti⁄s
.
ty≥
 !
ZMQ_ROUTER
) {

292 
î∫o
 = 
ECONNREFUSED
;

298 
obje˘_t
 *
∑ª¡s
 [2] = {
this
, 
≥î
.
sockë
};

299 
pùe_t
 *
√w_pùes
 [2] = {
NULL
, NULL};

300 
hwms
 [2] = {0, 0};

301 
boﬁ
 
c⁄Ê©es
 [2] = {
Ál£
, false};

302 
rc
 = 
	`pùïaú
 (
∑ª¡s
, 
√w_pùes
, 
hwms
, 
c⁄Ê©es
);

303 
	`î∫o_as£π
 (
rc
 == 0);

306 
z≠_pùe
 = 
√w_pùes
 [0];

307 
z≠_pùe
->
	`£t_nodñay
 ();

308 
z≠_pùe
->
	`£t_evít_sök
 (
this
);

310 
	`£nd_böd
 (
≥î
.
sockë
, 
√w_pùes
 [1], 
Ál£
);

313 i‡(
≥î
.
›ti⁄s
.
ªcv_idítôy
) {

314 
msg_t
 
id
;

315 
rc
 = 
id
.
	`öô
 ();

316 
	`î∫o_as£π
 (
rc
 == 0);

317 
id
.
	`£t_Êags
 (
msg_t
::
idítôy
);

318 
boﬁ
 
ok
 = 
z≠_pùe
->
	`wrôe
 (&
id
);

319 
	`zmq_as£π
 (
ok
);

320 
z≠_pùe
->
	`Êush
 ();

324 
	}
}

326 
	gzmq
::
£ssi⁄_ba£_t
::
	$¥o˚ss_©èch
 (
i_ígöe
 *
ígöe_
)

328 
	`zmq_as£π
 (
ígöe_
 !
NULL
);

331 i‡(!
pùe
 && !
	`is_ãrmö©ög
 ()) {

332 
obje˘_t
 *
∑ª¡s
 [2] = {
this
, 
sockë
};

333 
pùe_t
 *
pùes
 [2] = {
NULL
, NULL};

335 
boﬁ
 
c⁄Ê©e
 = 
›ti⁄s
.conflate &&

336 (
›ti⁄s
.
ty≥
 =
ZMQ_DEALER
 ||

337 
›ti⁄s
.
ty≥
 =
ZMQ_PULL
 ||

338 
›ti⁄s
.
ty≥
 =
ZMQ_PUSH
 ||

339 
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 ||

340 
›ti⁄s
.
ty≥
 =
ZMQ_SUB
);

342 
hwms
 [2] = {
c⁄Ê©e
? -1 : 
›ti⁄s
.
rcvhwm
,

343 
c⁄Ê©e
? -1 : 
›ti⁄s
.
¢dhwm
};

344 
boﬁ
 
c⁄Ê©es
 [2] = {
c⁄Ê©e
, conflate};

345 
rc
 = 
	`pùïaú
 (
∑ª¡s
, 
pùes
, 
hwms
, 
c⁄Ê©es
);

346 
	`î∫o_as£π
 (
rc
 == 0);

349 
pùes
 [0]->
	`£t_evít_sök
 (
this
);

352 
	`zmq_as£π
 (!
pùe
);

353 
pùe
 = 
pùes
 [0];

356 
	`£nd_böd
 (
sockë
, 
pùes
 [1]);

360 
	`zmq_as£π
 (!
ígöe
);

361 
ígöe
 = 
ígöe_
;

362 
ígöe
->
	`∂ug
 (
io_thªad
, 
this
);

363 
	}
}

365 
	gzmq
::
£ssi⁄_ba£_t
::
	$dëach
 ()

368 
ígöe
 = 
NULL
;

371 
	`˛ón_pùes
 ();

374 
	`dëached
 ();

377 i‡(
pùe
)

378 
pùe
->
	`check_ªad
 ();

380 i‡(
z≠_pùe
)

381 
z≠_pùe
->
	`check_ªad
 ();

382 
	}
}

384 
	gzmq
::
£ssi⁄_ba£_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

386 
	`zmq_as£π
 (!
≥ndög
);

391 i‡(!
pùe
 && !
z≠_pùe
) {

392 
	`¥o˚ed_wôh_ãrm
 ();

396 
≥ndög
 = 
åue
;

398 i‡(
pùe
 !
NULL
) {

402 i‡(
lögî_
 > 0) {

403 
	`zmq_as£π
 (!
has_lögî_timî
);

404 
	`add_timî
 (
lögî_
, 
lögî_timî_id
);

405 
has_lögî_timî
 = 
åue
;

410 
pùe
->
	`ãrmö©e
 (
lögî_
 != 0);

415 
pùe
->
	`check_ªad
 ();

418 i‡(
z≠_pùe
 !
NULL
)

419 
z≠_pùe
->
	`ãrmö©e
 (
Ál£
);

420 
	}
}

422 
	gzmq
::
£ssi⁄_ba£_t
::
	$¥o˚ed_wôh_ãrm
 ()

425 
≥ndög
 = 
Ál£
;

428 
own_t
::
	`¥o˚ss_ãrm
 (0);

429 
	}
}

431 
	gzmq
::
£ssi⁄_ba£_t
::
	$timî_evít
 (
id_
)

436 
	`zmq_as£π
 (
id_
 =
lögî_timî_id
);

437 
has_lögî_timî
 = 
Ál£
;

440 
	`zmq_as£π
 (
pùe
);

441 
pùe
->
	`ãrmö©e
 (
Ál£
);

442 
	}
}

444 
	gzmq
::
£ssi⁄_ba£_t
::
	$dëached
 ()

447 i‡(!
c⁄√˘
) {

448 
	`ãrmö©e
 ();

454 i‡(
pùe
 && 
›ti⁄s
.
immedüã
 == 1

455 && 
addr
->
¥Ÿocﬁ
 != "pgm" &&áddr->protocol != "epgm") {

456 
pùe
->
	`hiccup
 ();

457 
pùe
->
	`ãrmö©e
 (
Ál£
);

458 
ãrmö©ög_pùes
.
	`ö£π
 (
pùe
);

459 
pùe
 = 
NULL
;

462 
	`ª£t
 ();

465 i‡(
›ti⁄s
.
ªc⁄√˘_ivl
 != -1)

466 
	`°¨t_c⁄√˘ög
 (
åue
);

470 i‡(
pùe
 && (
›ti⁄s
.
ty≥
 =
ZMQ_SUB
 || o±i⁄s.ty≥ =
ZMQ_XSUB
))

471 
pùe
->
	`hiccup
 ();

472 
	}
}

474 
	gzmq
::
£ssi⁄_ba£_t
::
	$°¨t_c⁄√˘ög
 (
boﬁ
 
waô_
)

476 
	`zmq_as£π
 (
c⁄√˘
);

480 
io_thªad_t
 *
io_thªad
 = 
	`choo£_io_thªad
 (
›ti⁄s
.
afföôy
);

481 
	`zmq_as£π
 (
io_thªad
);

485 i‡(
addr
->
¥Ÿocﬁ
 == "tcp") {

486 
t˝_c⁄√˘î_t
 *
c⁄√˘î
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`t˝_c⁄√˘î_t
 (

487 
io_thªad
, 
this
, 
›ti⁄s
, 
addr
, 
waô_
);

488 
	`Æloc_as£π
 (
c⁄√˘î
);

489 
	`œunch_chûd
 (
c⁄√˘î
);

493 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


494 i‡(
addr
->
¥Ÿocﬁ
 == "ipc") {

495 
ùc_c⁄√˘î_t
 *
c⁄√˘î
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ùc_c⁄√˘î_t
 (

496 
io_thªad
, 
this
, 
›ti⁄s
, 
addr
, 
waô_
);

497 
	`Æloc_as£π
 (
c⁄√˘î
);

498 
	`œunch_chûd
 (
c⁄√˘î
);

503 #ifde‡
ZMQ_HAVE_OPENPGM


506 i‡(
addr
->
¥Ÿocﬁ
 == "pgm" ||áddr->protocol == "epgm") {

508 
	`zmq_as£π
 (
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 || o±i⁄s.ty≥ =
ZMQ_XPUB


509 || 
›ti⁄s
.
ty≥
 =
ZMQ_SUB
 || o±i⁄s.ty≥ =
ZMQ_XSUB
);

512 
boﬁ
 c⁄° 
udp_íˇpsuœti⁄
 = 
addr
->
¥Ÿocﬁ
 == "epgm";

517 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 || o±i⁄s.ty≥ =
ZMQ_XPUB
) {

520 
pgm_£ndî_t
 *
pgm_£ndî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`pgm_£ndî_t
 (

521 
io_thªad
, 
›ti⁄s
);

522 
	`Æloc_as£π
 (
pgm_£ndî
);

524 
rc
 = 
pgm_£ndî
->
	`öô
 (
udp_íˇpsuœti⁄
, 
addr
->
addªss
.
	`c_°r
 ());

525 
	`î∫o_as£π
 (
rc
 == 0);

527 
	`£nd_©èch
 (
this
, 
pgm_£ndî
);

532 
pgm_ª˚ivî_t
 *
pgm_ª˚ivî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`pgm_ª˚ivî_t
 (

533 
io_thªad
, 
›ti⁄s
);

534 
	`Æloc_as£π
 (
pgm_ª˚ivî
);

536 
rc
 = 
pgm_ª˚ivî
->
	`öô
 (
udp_íˇpsuœti⁄
, 
addr
->
addªss
.
	`c_°r
 ());

537 
	`î∫o_as£π
 (
rc
 == 0);

539 
	`£nd_©èch
 (
this
, 
pgm_ª˚ivî
);

546 
	`zmq_as£π
 (
Ál£
);

547 
	}
}

	@session_base.hpp

20 #i‚de‡
__ZMQ_SESSION_BASE_HPP_INCLUDED__


21 
	#__ZMQ_SESSION_BASE_HPP_INCLUDED__


	)

23 
	~<°rög
>

24 
	~<°d¨g.h
>

26 
	~"own.hµ
"

27 
	~"io_obje˘.hµ
"

28 
	~"pùe.hµ
"

29 
	~"sockë_ba£.hµ
"

31 
«me•a˚
 
	gzmq


34 
˛ass
 
	gpùe_t
;

35 
˛ass
 
	gio_thªad_t
;

36 
˛ass
 
	gsockë_ba£_t
;

37 
	gi_ígöe
;

38 
	gaddªss_t
;

40 
˛ass
 
	g£ssi⁄_ba£_t
 :

41 
public
 
own_t
,

42 
public
 
	gio_obje˘_t
,

43 
public
 
	gi_pùe_evíts


45 
	gpublic
:

48 
£ssi⁄_ba£_t
 *
¸óã
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

49 
boﬁ
 
c⁄√˘_
, 
zmq
::
sockë_ba£_t
 *
sockë_
,

50 c⁄° 
›ti⁄s_t
 &
›ti⁄s_
, c⁄° 
addªss_t
 *
addr_
);

53 
©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
);

56 
vútuÆ
 
ª£t
 ();

57 
Êush
 ();

58 
dëach
 ();

61 
ªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

62 
wrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

63 
hiccu≥d
 (
zmq
::
pùe_t
 *
pùe_
);

64 
pùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

68 
push_msg
 (
msg_t
 *
msg_
);

70 
z≠_c⁄√˘
 ();

75 
puŒ_msg
 (
msg_t
 *
msg_
);

80 
ªad_z≠_msg
 (
msg_t
 *
msg_
);

85 
wrôe_z≠_msg
 (
msg_t
 *
msg_
);

87 
sockë_ba£_t
 *
gë_sockë
 ();

89 
	g¥Ÿe˘ed
:

91 
£ssi⁄_ba£_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
, 
boﬁ
 
c⁄√˘_
,

92 
zmq
::
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

93 c⁄° 
addªss_t
 *
addr_
);

94 
	gvútuÆ
 ~
£ssi⁄_ba£_t
 ();

96 
	g¥iv©e
:

98 
°¨t_c⁄√˘ög
 (
boﬁ
 
waô_
);

100 
dëached
 ();

103 
¥o˚ss_∂ug
 ();

104 
¥o˚ss_©èch
 (
zmq
::
i_ígöe
 *
ígöe_
);

105 
¥o˚ss_ãrm
 (
lögî_
);

108 
timî_evít
 (
id_
);

112 
˛ón_pùes
 ();

115 
¥o˚ed_wôh_ãrm
 ();

119 
boﬁ
 
	gc⁄√˘
;

122 
	gzmq
::
pùe_t
 *
pùe
;

125 
	gzmq
::
pùe_t
 *
z≠_pùe
;

128 
	g°d
::
£t
 <
pùe_t
 *> 
ãrmö©ög_pùes
;

132 
boﬁ
 
	göcom∂ëe_ö
;

136 
boﬁ
 
	g≥ndög
;

139 
	gzmq
::
i_ígöe
 *
ígöe
;

142 
	gzmq
::
sockë_ba£_t
 *
sockë
;

146 
	gzmq
::
io_thªad_t
 *
io_thªad
;

149 íum {
	glögî_timî_id
 = 0x20};

152 
boﬁ
 
	ghas_lögî_timî
;

155 c⁄° 
addªss_t
 *
	gaddr
;

157 
£ssi⁄_ba£_t
 (const session_base_t&);

158 c⁄° 
	g£ssi⁄_ba£_t
 &
	g›î©‹
 = (c⁄° 
£ssi⁄_ba£_t
&);

	@signaler.cpp

20 
	~"∂©f‹m.hµ
"

22 #i‡
deföed
 
ZMQ_FORCE_SELECT


23 
	#ZMQ_SIGNALER_WAIT_BASED_ON_SELECT


	)

24 #ñi‡
deföed
 
ZMQ_FORCE_POLL


25 
	#ZMQ_SIGNALER_WAIT_BASED_ON_POLL


	)

26 #ñi‡
deföed
 
ZMQ_HAVE_LINUX
 || deföed 
ZMQ_HAVE_FREEBSD
 ||\

27 
deföed
 
	gZMQ_HAVE_OPENBSD
 || deföed 
	gZMQ_HAVE_SOLARIS
 ||\

28 
deföed
 
	gZMQ_HAVE_OSX
 || deföed 
	gZMQ_HAVE_QNXNTO
 ||\

29 
deföed
 
	gZMQ_HAVE_HPUX
 || deföed 
	gZMQ_HAVE_AIX
 ||\

30 
deföed
 
	gZMQ_HAVE_NETBSD


31 
	#ZMQ_SIGNALER_WAIT_BASED_ON_POLL


	)

32 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS
 || deföed 
ZMQ_HAVE_OPENVMS
 ||\

33 
deföed
 
	gZMQ_HAVE_CYGWIN


34 
	#ZMQ_SIGNALER_WAIT_BASED_ON_SELECT


	)

41 #i‡
deföed
 
ZMQ_SIGNALER_WAIT_BASED_ON_POLL


42 
	~<pﬁl.h
>

43 #ñi‡
deföed
 
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT


44 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


45 
	~"wödows.hµ
"

46 #ñi‡
deföed
 
ZMQ_HAVE_HPUX


47 
	~<sys/∑øm.h
>

48 
	~<sys/ty≥s.h
>

49 
	~<sys/time.h
>

50 #ñi‡
deföed
 
ZMQ_HAVE_OPENVMS


51 
	~<sys/ty≥s.h
>

52 
	~<sys/time.h
>

54 
	~<sys/£À˘.h
>

58 
	~"sig«Àr.hµ
"

59 
	~"likñy.hµ
"

60 
	~"°döt.hµ
"

61 
	~"c⁄fig.hµ
"

62 
	~"îr.hµ
"

63 
	~"fd.hµ
"

64 
	~"ù.hµ
"

66 #i‡
deföed
 
ZMQ_HAVE_EVENTFD


67 
	~<sys/evítfd.h
>

70 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


71 
	~"wödows.hµ
"

73 
	~<uni°d.h
>

74 
	~<√töë/t˝.h
>

75 
	~<uni°d.h
>

76 
	~<sys/ty≥s.h
>

77 
	~<sys/sockë.h
>

80 #i‡!
deföed
 (
ZMQ_HAVE_WINDOWS
)

83 
	$¶ìp_ms
 (
ms_
)

85 i‡(
ms_
 == 0)

87 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


88 
	`SÀï
 (
ms_
 > 0 ? ms_ : 
INFINITE
);

90 #ñi‡
deföed
 
ZMQ_HAVE_ANDROID


91 
	`u¶ìp
 (
ms_
 * 1000);

94  
	`u¶ìp
 (
ms_
 * 1000);

96 
	}
}

102 
	$˛o£_waô_ms
 (
fd_
, 
max_ms_
 = 2000)

104 
ms_so_Ár
 = 0;

105 
°ï_ms
 = 
max_ms_
 / 10;

106 i‡(
°ï_ms
 < 1)

107 
°ï_ms
 = 1;

109 i‡(
°ï_ms
 > 100)

110 
°ï_ms
 = 100;

112 
rc
 = 0;

116 i‡(
rc
 =-1 && 
î∫o
 =
EAGAIN
)

118 
	`¶ìp_ms
 (
°ï_ms
);

119 
ms_so_Ár
 +
°ï_ms
;

122 
rc
 = 
	`˛o£
 (
fd_
);

123 } 
ms_so_Ár
 < 
max_ms_
 && 
rc
 =-1 && 
î∫o
 =
EAGAIN
);

125  
rc
;

126 
	}
}

129 
	gzmq
::
sig«Àr_t
::
	$sig«Àr_t
 ()

132 i‡(
	`make_fd∑ú
 (&
r
, &
w
) == 0) {

133 
	`unblock_sockë
 (
w
);

134 
	`unblock_sockë
 (
r
);

136 #ifde‡
HAVE_FORK


137 
pid
 = 
	`gëpid
();

139 
	}
}

141 
	gzmq
::
sig«Àr_t
::~
	$sig«Àr_t
 ()

143 #i‡
deföed
 
ZMQ_HAVE_EVENTFD


144 
rc
 = 
	`˛o£_waô_ms
 (
r
);

145 
	`î∫o_as£π
 (
rc
 == 0);

146 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS


147 
lögî
 
so_lögî
 = { 1, 0 };

148 
rc
 = 
	`£tsock›t
 (
w
, 
SOL_SOCKET
, 
SO_LINGER
,

149 (*)&
so_lögî
,  (so_linger));

150 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

151 
rc
 = 
	`˛o£sockë
 (
w
);

152 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

153 
rc
 = 
	`˛o£sockë
 (
r
);

154 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

156 
rc
 = 
	`˛o£_waô_ms
 (
w
);

157 
	`î∫o_as£π
 (
rc
 == 0);

158 
rc
 = 
	`˛o£_waô_ms
 (
r
);

159 
	`î∫o_as£π
 (
rc
 == 0);

161 
	}
}

163 
	gzmq
::
fd_t
 
zmq
::
sig«Àr_t
::
	$gë_fd
 ()

165  
r
;

166 
	}
}

168 
	gzmq
::
sig«Àr_t
::
	$£nd
 ()

170 #i‡
HAVE_FORK


171 i‡(
	`u∆ikñy
(
pid
 !
	`gëpid
())) {

176 #i‡
deföed
 
ZMQ_HAVE_EVENTFD


177 c⁄° 
uöt64_t
 
öc
 = 1;

178 
ssize_t
 
sz
 = 
	`wrôe
 (
w
, &
öc
,  (inc));

179 
	`î∫o_as£π
 (
sz
 = (
öc
));

180 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS


181 
dummy
 = 0;

182 
nbyãs
 = ::
	`£nd
 (
w
, (*Ë&
dummy
,  (dummy), 0);

183 
	`wß_as£π
 (
nbyãs
 !
SOCKET_ERROR
);

184 
	`zmq_as£π
 (
nbyãs
 = (
dummy
));

186 
dummy
 = 0;

187 
åue
) {

188 
ssize_t
 
nbyãs
 = ::
	`£nd
 (
w
, &
dummy
,  (dummy), 0);

189 i‡(
	`u∆ikñy
 (
nbyãs
 =-1 && 
î∫o
 =
EINTR
))

191 #i‡
HAVE_FORK


192 i‡(
	`u∆ikñy
(
pid
 !
	`gëpid
())) {

194 
î∫o
 = 
EINTR
;

198 
	`zmq_as£π
 (
nbyãs
 = (
dummy
));

202 
	}
}

204 
	gzmq
::
sig«Àr_t
::
	$waô
 (
timeout_
)

206 #ifde‡
HAVE_FORK


207 i‡(
	`u∆ikñy
(
pid
 !
	`gëpid
()))

212 
î∫o
 = 
EINTR
;

217 #ifde‡
ZMQ_SIGNALER_WAIT_BASED_ON_POLL


219 
pﬁlfd
 
pfd
;

220 
pfd
.
fd
 = 
r
;

221 
pfd
.
evíts
 = 
POLLIN
;

222 
rc
 = 
	`pﬁl
 (&
pfd
, 1, 
timeout_
);

223 i‡(
	`u∆ikñy
 (
rc
 < 0)) {

224 
	`î∫o_as£π
 (
î∫o
 =
EINTR
);

228 i‡(
	`u∆ikñy
 (
rc
 == 0)) {

229 
î∫o
 = 
EAGAIN
;

232 #ifde‡
HAVE_FORK


233 i‡(
	`u∆ikñy
(
pid
 !
	`gëpid
())) {

237 
î∫o
 = 
EINTR
;

241 
	`zmq_as£π
 (
rc
 == 1);

242 
	`zmq_as£π
 (
pfd
.
ªvíts
 & 
POLLIN
);

245 #ñi‡
deföed
 
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT


247 
fd_£t
 
fds
;

248 
	`FD_ZERO
 (&
fds
);

249 
	`FD_SET
 (
r
, &
fds
);

250 
timevÆ
 
timeout
;

251 i‡(
timeout_
 >= 0) {

252 
timeout
.
tv_£c
 = 
timeout_
 / 1000;

253 
timeout
.
tv_u£c
 = 
timeout_
 % 1000 * 1000;

255 #ifde‡
ZMQ_HAVE_WINDOWS


256 
rc
 = 
	`£À˘
 (0, &
fds
, 
NULL
, NULL,

257 
timeout_
 >0 ? &
timeout
 : 
NULL
);

258 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

260 
rc
 = 
	`£À˘
 (
r
 + 1, &
fds
, 
NULL
, NULL,

261 
timeout_
 >0 ? &
timeout
 : 
NULL
);

262 i‡(
	`u∆ikñy
 (
rc
 < 0)) {

263 
	`î∫o_as£π
 (
î∫o
 =
EINTR
);

267 i‡(
	`u∆ikñy
 (
rc
 == 0)) {

268 
î∫o
 = 
EAGAIN
;

271 
	`zmq_as£π
 (
rc
 == 1);

277 
	}
}

279 
	gzmq
::
sig«Àr_t
::
	$ªcv
 ()

282 #i‡
deföed
 
ZMQ_HAVE_EVENTFD


283 
uöt64_t
 
dummy
;

284 
ssize_t
 
sz
 = 
	`ªad
 (
r
, &
dummy
,  (dummy));

285 
	`î∫o_as£π
 (
sz
 = (
dummy
));

289 i‡(
	`u∆ikñy
 (
dummy
 == 2)) {

290 c⁄° 
uöt64_t
 
öc
 = 1;

291 
ssize_t
 
sz2
 = 
	`wrôe
 (
w
, &
öc
,  (inc));

292 
	`î∫o_as£π
 (
sz2
 = (
öc
));

296 
	`zmq_as£π
 (
dummy
 == 1);

298 
dummy
;

299 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


300 
nbyãs
 = ::
	`ªcv
 (
r
, (*Ë&
dummy
,  (dummy), 0);

301 
	`wß_as£π
 (
nbyãs
 !
SOCKET_ERROR
);

303 
ssize_t
 
nbyãs
 = ::
	`ªcv
 (
r
, &
dummy
,  (dummy), 0);

304 
	`î∫o_as£π
 (
nbyãs
 >= 0);

306 
	`zmq_as£π
 (
nbyãs
 = (
dummy
));

307 
	`zmq_as£π
 (
dummy
 == 0);

309 
	}
}

311 #ifde‡
HAVE_FORK


312 
	gzmq
::
sig«Àr_t
::
	$f‹ked
()

315 
	`˛o£
 (
r
);

316 
	`˛o£
 (
w
);

317 
	`make_fd∑ú
 (&
r
, &
w
);

318 
	}
}

322 
	gzmq
::
sig«Àr_t
::
	$make_fd∑ú
 (
fd_t
 *
r_
, fd_à*
w_
)

324 #i‡
deföed
 
ZMQ_HAVE_EVENTFD


325 
fd_t
 
fd
 = 
	`evítfd
 (0, 0);

326 i‡(
fd
 == -1) {

327 
	`î∫o_as£π
 (
î∫o
 =
ENFILE
 ||Éºnÿ=
EMFILE
);

328 *
w_
 = *
r_
 = -1;

332 *
w_
 = *
r_
 = 
fd
;

336 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS


337 #i‡!
deföed
 
_WIN32_WCE


339 
SECURITY_DESCRIPTOR
 
sd
;

340 
SECURITY_ATTRIBUTES
 
ß
;

341 
	`mem£t
 (&
sd
, 0,  (sd));

342 
	`mem£t
 (&
ß
, 0,  (sa));

344 
	`InôülizeSecurôyDes¸ùt‹
(&
sd
, 
SECURITY_DESCRIPTOR_REVISION
);

345 
	`SëSecurôyDes¸ùt‹Da˛
(&
sd
, 
TRUE
, 0, 
FALSE
);

347 
ß
.
nLígth
 = (
SECURITY_ATTRIBUTES
);

348 
ß
.
ÕSecurôyDes¸ùt‹
 = &
sd
;

358 #i‡!
deföed
 
_WIN32_WCE


359 
HANDLE
 
sync
 = 
	`Cª©eEvít
 (&
ß
, 
FALSE
, 
TRUE
, 
	`TEXT
 ("Global\\zmq-signaler-port-sync"));

361 
HANDLE
 
sync
 = 
	`Cª©eEvít
 (
NULL
, 
FALSE
, 
TRUE
, 
	`TEXT
 ("Global\\zmq-signaler-port-sync"));

363 i‡(
sync
 =
NULL
 && 
	`GëLa°Eº‹
 (Ë=
ERROR_ACCESS_DENIED
)

364 
sync
 = 
	`O≥nEvít
 (
SYNCHRONIZE
 | 
EVENT_MODIFY_STATE
,

365 
FALSE
, 
	`TEXT
 ("Global\\zmq-signaler-port-sync"));

367 
	`wö_as£π
 (
sync
 !
NULL
);

371 *
w_
 = 
INVALID_SOCKET
;

372 *
r_
 = 
INVALID_SOCKET
;

375 
SOCKET
 
li°íî
;

376 
li°íî
 = 
	`›í_sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

377 
	`wß_as£π
 (
li°íî
 !
INVALID_SOCKET
);

380 
BOOL
 
so_ªu£addr
 = 1;

381 
rc
 = 
	`£tsock›t
 (
li°íî
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

382 (*)&
so_ªu£addr
,  (so_reuseaddr));

383 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

384 
BOOL
 
t˝_nodñay
 = 1;

385 
rc
 = 
	`£tsock›t
 (
li°íî
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

386 (*)&
t˝_nodñay
,  (tcp_nodelay));

387 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

390 
sockaddr_ö
 
addr
;

391 
	`mem£t
 (&
addr
, 0,  (addr));

392 
addr
.
sö_Ámûy
 = 
AF_INET
;

393 
addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_LOOPBACK
);

394 
addr
.
sö_p‹t
 = 
	`ht⁄s
 (
sig«Àr_p‹t
);

397 *
w_
 = 
	`›í_sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

398 
	`wß_as£π
 (*
w_
 !
INVALID_SOCKET
);

401 
rc
 = 
	`£tsock›t
 (*
w_
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

402 (*)&
t˝_nodñay
,  (tcp_nodelay));

403 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

406 
DWORD
 
dwrc
 = 
	`WaôF‹SögÀObje˘
 (
sync
, 
INFINITE
);

407 
	`zmq_as£π
 (
dwrc
 =
WAIT_OBJECT_0
);

410 
rc
 = 
	`böd
 (
li°íî
, (c⁄° 
sockaddr
*Ë&
addr
,  (addr));

413 i‡(
rc
 !
SOCKET_ERROR
)

414 
rc
 = 
	`li°í
 (
li°íî
, 1);

417 i‡(
rc
 !
SOCKET_ERROR
)

418 
rc
 = 
	`c⁄√˘
 (*
w_
, (
sockaddr
*Ë&
addr
,  (addr));

421 i‡(
rc
 !
SOCKET_ERROR
)

422 *
r_
 = 
	`ac˚±
 (
li°íî
, 
NULL
, NULL);

425 
ßved_î∫o
 = 0;

426 i‡(*
r_
 =
INVALID_SOCKET
)

427 
ßved_î∫o
 = 
	`WSAGëLa°Eº‹
 ();

430 
	`˛o£sockë
 (
li°íî
);

433 
BOOL
 
brc
 = 
	`SëEvít
 (
sync
);

434 
	`wö_as£π
 (
brc
 != 0);

437 
brc
 = 
	`Clo£H™dÀ
 (
sync
);

438 
	`wö_as£π
 (
brc
 != 0);

440 i‡(*
r_
 !
INVALID_SOCKET
) {

441 #i‡!
deföed
 
_WIN32_WCE


443 
brc
 = 
	`SëH™dÀInf‹m©i⁄
 ((
HANDLE
Ë*
r_
, 
HANDLE_FLAG_INHERIT
, 0);

444 
	`wö_as£π
 (
brc
);

450 i‡(*
w_
 !
INVALID_SOCKET
) {

451 
rc
 = 
	`˛o£sockë
 (*
w_
);

452 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

453 *
w_
 = 
INVALID_SOCKET
;

456 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
ßved_î∫o
);

460 #ñi‡
deföed
 
ZMQ_HAVE_OPENVMS


468 
sockaddr_ö
 
l˛addr
;

469 
	`mem£t
 (&
l˛addr
, 0,  (lcladdr));

470 
l˛addr
.
sö_Ámûy
 = 
AF_INET
;

471 
l˛addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_LOOPBACK
);

472 
l˛addr
.
sö_p‹t
 = 0;

474 
li°íî
 = 
	`›í_sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

475 
	`î∫o_as£π
 (
li°íî
 != -1);

477 
⁄
 = 1;

478 
rc
 = 
	`£tsock›t
 (
li°íî
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
⁄
,  (on));

479 
	`î∫o_as£π
 (
rc
 != -1);

481 
rc
 = 
	`£tsock›t
 (
li°íî
, 
IPPROTO_TCP
, 
TCP_NODELACK
, &
⁄
,  (on));

482 
	`î∫o_as£π
 (
rc
 != -1);

484 
rc
 = 
	`böd
 (
li°íî
, (
sockaddr
*Ë&
l˛addr
,  (lcladdr));

485 
	`î∫o_as£π
 (
rc
 != -1);

487 
sockÀn_t
 
l˛addr_Àn
 =  (
l˛addr
);

489 
rc
 = 
	`gësock«me
 (
li°íî
, (
sockaddr
*Ë&
l˛addr
, &
l˛addr_Àn
);

490 
	`î∫o_as£π
 (
rc
 != -1);

492 
rc
 = 
	`li°í
 (
li°íî
, 1);

493 
	`î∫o_as£π
 (
rc
 != -1);

495 *
w_
 = 
	`›í_sockë
 (
AF_INET
, 
SOCK_STREAM
, 0);

496 
	`î∫o_as£π
 (*
w_
 != -1);

498 
rc
 = 
	`£tsock›t
 (*
w_
, 
IPPROTO_TCP
, 
TCP_NODELAY
, &
⁄
,  (on));

499 
	`î∫o_as£π
 (
rc
 != -1);

501 
rc
 = 
	`£tsock›t
 (*
w_
, 
IPPROTO_TCP
, 
TCP_NODELACK
, &
⁄
,  (on));

502 
	`î∫o_as£π
 (
rc
 != -1);

504 
rc
 = 
	`c⁄√˘
 (*
w_
, (
sockaddr
*Ë&
l˛addr
,  (lcladdr));

505 
	`î∫o_as£π
 (
rc
 != -1);

507 *
r_
 = 
	`ac˚±
 (
li°íî
, 
NULL
, NULL);

508 
	`î∫o_as£π
 (*
r_
 != -1);

510 
	`˛o£
 (
li°íî
);

516 
sv
 [2];

517 
rc
 = 
	`sockë∑ú
 (
AF_UNIX
, 
SOCK_STREAM
, 0, 
sv
);

518 i‡(
rc
 == -1) {

519 
	`î∫o_as£π
 (
î∫o
 =
ENFILE
 ||Éºnÿ=
EMFILE
);

520 *
w_
 = *
r_
 = -1;

524 *
w_
 = 
sv
 [0];

525 *
r_
 = 
sv
 [1];

529 
	}
}

531 #i‡
deföed
 
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT


532 #unde‡
ZMQ_SIGNALER_WAIT_BASED_ON_SELECT


534 #i‡
deföed
 
ZMQ_SIGNALER_WAIT_BASED_ON_POLL


535 #unde‡
ZMQ_SIGNALER_WAIT_BASED_ON_POLL


	@signaler.hpp

20 #i‚de‡
__ZMQ_SIGNALER_HPP_INCLUDED__


21 
	#__ZMQ_SIGNALER_HPP_INCLUDED__


	)

23 #ifde‡
HAVE_FORK


24 
	~<uni°d.h
>

27 
	~"fd.hµ
"

29 
«me•a˚
 
	gzmq


37 ˛as†
	csig«Àr_t


39 
	gpublic
:

41 
sig«Àr_t
 ();

42 ~
sig«Àr_t
 ();

44 
fd_t
 
gë_fd
 ();

45 
£nd
 ();

46 
waô
 (
timeout_
);

47 
ªcv
 ();

49 #ifde‡
HAVE_FORK


52 
f‹ked
();

55 
	g¥iv©e
:

59 
make_fd∑ú
 (
fd_t
 *
r_
, fd_à*
w_
);

63 
fd_t
 
	gw
;

64 
fd_t
 
	gr
;

67 
sig«Àr_t
 (const signaler_t&);

68 c⁄° 
	gsig«Àr_t
 &
	g›î©‹
 = (c⁄° 
sig«Àr_t
&);

70 #ifde‡
HAVE_FORK


72 
pid_t
 
	gpid
;

75 
˛o£_öã∫Æ
();

	@socket_base.cpp

20 
	~<√w
>

21 
	~<°rög
>

22 
	~<Æg‹ôhm
>

24 
	~"∂©f‹m.hµ
"

26 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


27 
	~"wödows.hµ
"

28 #i‡
deföed
 
_MSC_VER


29 #i‡
deföed
 
_WIN32_WCE


30 
	~<cmnöåö.h
>

32 
	~<öåö.h
>

36 
	~<uni°d.h
>

39 
	~"sockë_ba£.hµ
"

40 
	~"t˝_li°íî.hµ
"

41 
	~"ùc_li°íî.hµ
"

42 
	~"t˝_c⁄√˘î.hµ
"

43 
	~"io_thªad.hµ
"

44 
	~"£ssi⁄_ba£.hµ
"

45 
	~"c⁄fig.hµ
"

46 
	~"pùe.hµ
"

47 
	~"îr.hµ
"

48 
	~"˘x.hµ
"

49 
	~"∂©f‹m.hµ
"

50 
	~"likñy.hµ
"

51 
	~"msg.hµ
"

52 
	~"addªss.hµ
"

53 
	~"ùc_addªss.hµ
"

54 
	~"t˝_addªss.hµ
"

55 #ifde‡
ZMQ_HAVE_OPENPGM


56 
	~"pgm_sockë.hµ
"

59 
	~"∑ú.hµ
"

60 
	~"pub.hµ
"

61 
	~"sub.hµ
"

62 
	~"ªq.hµ
"

63 
	~"ªp.hµ
"

64 
	~"puŒ.hµ
"

65 
	~"push.hµ
"

66 
	~"dóÀr.hµ
"

67 
	~"rouãr.hµ
"

68 
	~"xpub.hµ
"

69 
	~"xsub.hµ
"

70 
	~"°ªam.hµ
"

72 
boﬁ
 
	gzmq
::
sockë_ba£_t
::
	$check_èg
 ()

74  
èg
 == 0xbaddecaf;

75 
	}
}

77 
	gzmq
::
sockë_ba£_t
 *
zmq
::sockë_ba£_t::
	$¸óã
 (
ty≥_
, 
˛ass
 
˘x_t
 *
∑ª¡_
,

78 
uöt32_t
 
tid_
, 
sid_
)

80 
sockë_ba£_t
 *
s
 = 
NULL
;

81 
ty≥_
) {

82 
ZMQ_PAIR
:

83 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`∑ú_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

85 
ZMQ_PUB
:

86 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`pub_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

88 
ZMQ_SUB
:

89 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`sub_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

91 
ZMQ_REQ
:

92 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ªq_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

94 
ZMQ_REP
:

95 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ªp_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

97 
ZMQ_DEALER
:

98 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`dóÀr_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

100 
ZMQ_ROUTER
:

101 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`rouãr_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

103 
ZMQ_PULL
:

104 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`puŒ_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

106 
ZMQ_PUSH
:

107 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`push_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

109 
ZMQ_XPUB
:

110 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`xpub_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

112 
ZMQ_XSUB
:

113 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`xsub_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

115 
ZMQ_STREAM
:

116 
s
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`°ªam_t
 (
∑ª¡_
, 
tid_
, 
sid_
);

119 
î∫o
 = 
EINVAL
;

120  
NULL
;

122 i‡(
s
->
maûbox
.
	`gë_fd
 (Ë=
ªtúed_fd
)

123  
NULL
;

125 
	`Æloc_as£π
 (
s
);

126  
s
;

127 
	}
}

129 
	gzmq
::
sockë_ba£_t
::
	$sockë_ba£_t
 (
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

130 
	`own_t
 (
∑ª¡_
, 
tid_
),

131 
	`èg
 (0xbaddecaf),

132 
	`˘x_ãrmö©ed
 (
Ál£
),

133 
	`de°royed
 (
Ál£
),

134 
	`œ°_tsc
 (0),

135 
	`ticks
 (0),

136 
	`rcvm‹e
 (
Ál£
),

137 
	`m⁄ô‹_sockë
 (
NULL
),

138 
	$m⁄ô‹_evíts
 (0)

140 
›ti⁄s
.
sockë_id
 = 
sid_
;

141 
›ti⁄s
.
ùv6
 = (
∑ª¡_
->
	`gë
 (
ZMQ_IPV6
) != 0);

142 
	}
}

144 
	gzmq
::
sockë_ba£_t
::~
	$sockë_ba£_t
 ()

146 
	`°›_m⁄ô‹
 ();

147 
	`zmq_as£π
 (
de°royed
);

148 
	}
}

150 
	gzmq
::
maûbox_t
 *
zmq
::
sockë_ba£_t
::
	$gë_maûbox
 ()

152  &
maûbox
;

153 
	}
}

155 
	gzmq
::
sockë_ba£_t
::
	$°›
 ()

161 
	`£nd_°›
 ();

162 
	}
}

164 
	gzmq
::
sockë_ba£_t
::
	$∑r£_uri
 (c⁄° *
uri_
,

165 
°d
::
°rög
 &
¥Ÿocﬁ_
, std::°rög &
addªss_
)

167 
	`zmq_as£π
 (
uri_
 !
NULL
);

169 
°d
::
°rög
 
	`uri
 (
uri_
);

170 
°d
::
°rög
::
size_ty≥
 
pos
 = 
uri
.
	`föd
 ("://");

171 i‡(
pos
 =
°d
::
°rög
::
≈os
) {

172 
î∫o
 = 
EINVAL
;

175 
¥Ÿocﬁ_
 = 
uri
.
	`sub°r
 (0, 
pos
);

176 
addªss_
 = 
uri
.
	`sub°r
 (
pos
 + 3);

178 i‡(
¥Ÿocﬁ_
.
	`em±y
 (Ë|| 
addªss_
.empty ()) {

179 
î∫o
 = 
EINVAL
;

183 
	}
}

185 
	gzmq
::
sockë_ba£_t
::
	$check_¥Ÿocﬁ
 (c⁄° 
°d
::
°rög
 &
¥Ÿocﬁ_
)

188 i‡(
¥Ÿocﬁ_
 != "inproc" &&Örotocol_ != "ipc" &&Örotocol_ != "tcp" &&

189 
¥Ÿocﬁ_
 != "pgm" &&Örotocol_ != "epgm") {

190 
î∫o
 = 
EPROTONOSUPPORT
;

196 #i‡!
deföed
 
ZMQ_HAVE_OPENPGM


197 i‡(
¥Ÿocﬁ_
 == "pgm" ||Örotocol_ == "epgm") {

198 
î∫o
 = 
EPROTONOSUPPORT
;

204 #i‡
deföed
 
ZMQ_HAVE_WINDOWS
 || deföed 
ZMQ_HAVE_OPENVMS


205 i‡(
¥Ÿocﬁ_
 == "ipc") {

207 
î∫o
 = 
EPROTONOSUPPORT
;

215 i‡((
¥Ÿocﬁ_
 == "pgm" ||Örotocol_ == "epgm") &&

216 
›ti⁄s
.
ty≥
 !
ZMQ_PUB
 && o±i⁄s.ty≥ !
ZMQ_SUB
 &&

217 
›ti⁄s
.
ty≥
 !
ZMQ_XPUB
 && o±i⁄s.ty≥ !
ZMQ_XSUB
) {

218 
î∫o
 = 
ENOCOMPATPROTO
;

224 
	}
}

226 
	gzmq
::
sockë_ba£_t
::
	$©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

229 
pùe_
->
	`£t_evít_sök
 (
this
);

230 
pùes
.
	`push_back
 (
pùe_
);

233 
	`x©èch_pùe
 (
pùe_
, 
subs¸ibe_to_Æl_
);

237 i‡(
	`is_ãrmö©ög
 ()) {

238 
	`ªgi°î_ãrm_acks
 (1);

239 
pùe_
->
	`ãrmö©e
 (
Ál£
);

241 
	}
}

243 
	gzmq
::
sockë_ba£_t
::
	$£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

244 
size_t
 
›tvÆÀn_
)

246 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

247 
î∫o
 = 
ETERM
;

252 
rc
 = 
	`x£tsock›t
 (
›ti⁄_
, 
›tvÆ_
, 
›tvÆÀn_
);

253 i‡(
rc
 =0 || 
î∫o
 !
EINVAL
)

254  
rc
;

258  
›ti⁄s
.
	`£tsock›t
 (
›ti⁄_
, 
›tvÆ_
, 
›tvÆÀn_
);

259 
	}
}

261 
	gzmq
::
sockë_ba£_t
::
	$gësock›t
 (
›ti⁄_
, *
›tvÆ_
,

262 
size_t
 *
›tvÆÀn_
)

264 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

265 
î∫o
 = 
ETERM
;

269 i‡(
›ti⁄_
 =
ZMQ_RCVMORE
) {

270 i‡(*
›tvÆÀn_
 <  ()) {

271 
î∫o
 = 
EINVAL
;

274 *((*Ë
›tvÆ_
Ë
rcvm‹e
 ? 1 : 0;

275 *
›tvÆÀn_
 =  ();

279 i‡(
›ti⁄_
 =
ZMQ_FD
) {

280 i‡(*
›tvÆÀn_
 <  (
fd_t
)) {

281 
î∫o
 = 
EINVAL
;

284 *((
fd_t
*Ë
›tvÆ_
Ë
maûbox
.
	`gë_fd
 ();

285 *
›tvÆÀn_
 =  (
fd_t
);

289 i‡(
›ti⁄_
 =
ZMQ_EVENTS
) {

290 i‡(*
›tvÆÀn_
 <  ()) {

291 
î∫o
 = 
EINVAL
;

294 
rc
 = 
	`¥o˚ss_comm™ds
 (0, 
Ál£
);

295 i‡(
rc
 !0 && (
î∫o
 =
EINTR
 ||Éºnÿ=
ETERM
))

297 
	`î∫o_as£π
 (
rc
 == 0);

298 *((*Ë
›tvÆ_
) = 0;

299 i‡(
	`has_out
 ())

300 *((*Ë
›tvÆ_
Ë|
ZMQ_POLLOUT
;

301 i‡(
	`has_ö
 ())

302 *((*Ë
›tvÆ_
Ë|
ZMQ_POLLIN
;

303 *
›tvÆÀn_
 =  ();

307 i‡(
›ti⁄_
 =
ZMQ_LAST_ENDPOINT
) {

308 i‡(*
›tvÆÀn_
 < 
œ°_ídpoöt
.
	`size
 () + 1) {

309 
î∫o
 = 
EINVAL
;

312 
	`°r˝y
 (
°©ic_ˇ°
 <*> (
›tvÆ_
), 
œ°_ídpoöt
.
	`c_°r
 ());

313 *
›tvÆÀn_
 = 
œ°_ídpoöt
.
	`size
 () + 1;

317  
›ti⁄s
.
	`gësock›t
 (
›ti⁄_
, 
›tvÆ_
, 
›tvÆÀn_
);

318 
	}
}

320 
	gzmq
::
sockë_ba£_t
::
	$böd
 (c⁄° *
addr_
)

322 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

323 
î∫o
 = 
ETERM
;

328 
rc
 = 
	`¥o˚ss_comm™ds
 (0, 
Ál£
);

329 i‡(
	`u∆ikñy
 (
rc
 != 0))

333 
°d
::
°rög
 
¥Ÿocﬁ
;

334 
°d
::
°rög
 
addªss
;

335 
rc
 = 
	`∑r£_uri
 (
addr_
, 
¥Ÿocﬁ
, 
addªss
);

336 i‡(
rc
 != 0)

339 
rc
 = 
	`check_¥Ÿocﬁ
 (
¥Ÿocﬁ
);

340 i‡(
rc
 != 0)

343 i‡(
¥Ÿocﬁ
 == "inproc") {

344 
ídpoöt_t
 
ídpoöt
 = {
this
, 
›ti⁄s
};

345 
rc
 = 
	`ªgi°î_ídpoöt
 (
addr_
, 
ídpoöt
);

346 i‡(
rc
 == 0) {

347 
	`c⁄√˘_≥ndög
(
addr_
, 
this
);

348 
œ°_ídpoöt
.
	`assign
 (
addr_
);

350  
rc
;

353 i‡(
¥Ÿocﬁ
 == "pgm" ||Örotocol == "epgm") {

356  
	`c⁄√˘
 (
addr_
);

361 
io_thªad_t
 *
io_thªad
 = 
	`choo£_io_thªad
 (
›ti⁄s
.
afföôy
);

362 i‡(!
io_thªad
) {

363 
î∫o
 = 
EMTHREAD
;

367 i‡(
¥Ÿocﬁ
 == "tcp") {

368 
t˝_li°íî_t
 *
li°íî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`t˝_li°íî_t
 (

369 
io_thªad
, 
this
, 
›ti⁄s
);

370 
	`Æloc_as£π
 (
li°íî
);

371 
rc
 = 
li°íî
->
	`£t_addªss
 (
addªss
.
	`c_°r
 ());

372 i‡(
rc
 != 0) {

373 
dñëe
 
li°íî
;

374 
	`evít_böd_Áûed
 (
addªss
, 
	`zmq_î∫o
());

379 
li°íî
->
	`gë_addªss
 (
œ°_ídpoöt
);

381 
	`add_ídpoöt
 (
addr_
, (
own_t
 *Ë
li°íî
, 
NULL
);

385 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


386 i‡(
¥Ÿocﬁ
 == "ipc") {

387 
ùc_li°íî_t
 *
li°íî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ùc_li°íî_t
 (

388 
io_thªad
, 
this
, 
›ti⁄s
);

389 
	`Æloc_as£π
 (
li°íî
);

390 
rc
 = 
li°íî
->
	`£t_addªss
 (
addªss
.
	`c_°r
 ());

391 i‡(
rc
 != 0) {

392 
dñëe
 
li°íî
;

393 
	`evít_böd_Áûed
 (
addªss
, 
	`zmq_î∫o
());

398 
li°íî
->
	`gë_addªss
 (
œ°_ídpoöt
);

400 
	`add_ídpoöt
 (
addr_
, (
own_t
 *Ë
li°íî
, 
NULL
);

405 
	`zmq_as£π
 (
Ál£
);

407 
	}
}

409 
	gzmq
::
sockë_ba£_t
::
	$c⁄√˘
 (c⁄° *
addr_
)

411 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

412 
î∫o
 = 
ETERM
;

417 
rc
 = 
	`¥o˚ss_comm™ds
 (0, 
Ál£
);

418 i‡(
	`u∆ikñy
 (
rc
 != 0))

422 
°d
::
°rög
 
¥Ÿocﬁ
;

423 
°d
::
°rög
 
addªss
;

424 
rc
 = 
	`∑r£_uri
 (
addr_
, 
¥Ÿocﬁ
, 
addªss
);

425 i‡(
rc
 != 0)

428 
rc
 = 
	`check_¥Ÿocﬁ
 (
¥Ÿocﬁ
);

429 i‡(
rc
 != 0)

432 i‡(
¥Ÿocﬁ
 == "inproc") {

439 
ídpoöt_t
 
≥î
 = 
	`föd_ídpoöt
 (
addr_
);

443 
¢dhwm
 = 0;

444 i‡(
≥î
.
sockë
 =
NULL
)

445 
¢dhwm
 = 
›ti⁄s
.sndhwm;

446 i‡(
›ti⁄s
.
¢dhwm
 !0 && 
≥î
.›ti⁄s.
rcvhwm
 != 0)

447 
¢dhwm
 = 
›ti⁄s
.¢dhwm + 
≥î
.›ti⁄s.
rcvhwm
;

448 
rcvhwm
 = 0;

449 i‡(
≥î
.
sockë
 =
NULL
)

450 
rcvhwm
 = 
›ti⁄s
.rcvhwm;

451 i‡(
›ti⁄s
.
rcvhwm
 !0 && 
≥î
.›ti⁄s.
¢dhwm
 != 0)

452 
rcvhwm
 = 
›ti⁄s
.rcvhwm + 
≥î
.›ti⁄s.
¢dhwm
;

455 
obje˘_t
 *
∑ª¡s
 [2] = {
this
, 
≥î
.
sockë
 =
NULL
 ?Åhis :Öeer.socket};

456 
pùe_t
 *
√w_pùes
 [2] = {
NULL
, NULL};

458 
boﬁ
 
c⁄Ê©e
 = 
›ti⁄s
.conflate &&

459 (
›ti⁄s
.
ty≥
 =
ZMQ_DEALER
 ||

460 
›ti⁄s
.
ty≥
 =
ZMQ_PULL
 ||

461 
›ti⁄s
.
ty≥
 =
ZMQ_PUSH
 ||

462 
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 ||

463 
›ti⁄s
.
ty≥
 =
ZMQ_SUB
);

465 
hwms
 [2] = {
c⁄Ê©e
? -1 : 
¢dhwm
, c⁄Ê©e? -1 : 
rcvhwm
};

466 
boﬁ
 
c⁄Ê©es
 [2] = {
c⁄Ê©e
, conflate};

467 
rc
 = 
	`pùïaú
 (
∑ª¡s
, 
√w_pùes
, 
hwms
, 
c⁄Ê©es
);

468 
	`î∫o_as£π
 (
rc
 == 0);

471 
	`©èch_pùe
 (
√w_pùes
 [0]);

473 i‡(!
≥î
.
sockë
) {

478 
msg_t
 
id
;

479 
rc
 = 
id
.
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

480 
	`î∫o_as£π
 (
rc
 == 0);

481 
	`mem˝y
 (
id
.
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

482 
id
.
	`£t_Êags
 (
msg_t
::
idítôy
);

483 
boﬁ
 
wrôãn
 = 
√w_pùes
 [0]->
	`wrôe
 (&
id
);

484 
	`zmq_as£π
 (
wrôãn
);

485 
√w_pùes
 [0]->
	`Êush
 ();

487 
ídpoöt_t
 
ídpoöt
 = {
this
, 
›ti⁄s
};

488 
≥ndög_c⁄√˘i⁄_t
 
≥ndög_c⁄√˘i⁄
 = {
ídpoöt
, 
√w_pùes
 [0],Çew_pipes [1]};

489 
	`≥nd_c⁄√˘i⁄
 (
addr_
, 
≥ndög_c⁄√˘i⁄
);

494 i‡(
≥î
.
›ti⁄s
.
ªcv_idítôy
) {

496 
msg_t
 
id
;

497 
rc
 = 
id
.
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

498 
	`î∫o_as£π
 (
rc
 == 0);

499 
	`mem˝y
 (
id
.
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

500 
id
.
	`£t_Êags
 (
msg_t
::
idítôy
);

501 
boﬁ
 
wrôãn
 = 
√w_pùes
 [0]->
	`wrôe
 (&
id
);

502 
	`zmq_as£π
 (
wrôãn
);

503 
√w_pùes
 [0]->
	`Êush
 ();

507 i‡(
›ti⁄s
.
ªcv_idítôy
) {

508 
msg_t
 
id
;

509 
rc
 = 
id
.
	`öô_size
 (
≥î
.
›ti⁄s
.
idítôy_size
);

510 
	`î∫o_as£π
 (
rc
 == 0);

511 
	`mem˝y
 (
id
.
	`d©a
 (), 
≥î
.
›ti⁄s
.
idítôy
,Öìr.›ti⁄s.
idítôy_size
);

512 
id
.
	`£t_Êags
 (
msg_t
::
idítôy
);

513 
boﬁ
 
wrôãn
 = 
√w_pùes
 [1]->
	`wrôe
 (&
id
);

514 
	`zmq_as£π
 (
wrôãn
);

515 
√w_pùes
 [1]->
	`Êush
 ();

521 
	`£nd_böd
 (
≥î
.
sockë
, 
√w_pùes
 [1], 
Ál£
);

525 
œ°_ídpoöt
.
	`assign
 (
addr_
);

528 
ö¥ocs
.
	`ö£π
 (
ö¥ocs_t
::
	`vÆue_ty≥
 (
°d
::
	`°rög
 (
addr_
), 
√w_pùes
[0]));

534 
io_thªad_t
 *
io_thªad
 = 
	`choo£_io_thªad
 (
›ti⁄s
.
afföôy
);

535 i‡(!
io_thªad
) {

536 
î∫o
 = 
EMTHREAD
;

540 
addªss_t
 *
∑ddr
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`addªss_t
 (
¥Ÿocﬁ
, 
addªss
);

541 
	`Æloc_as£π
 (
∑ddr
);

544 i‡(
¥Ÿocﬁ
 == "tcp") {

545 
∑ddr
->
ªsﬁved
.
t˝_addr
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`t˝_addªss_t
 ();

546 
	`Æloc_as£π
 (
∑ddr
->
ªsﬁved
.
t˝_addr
);

547 
rc
 = 
∑ddr
->
ªsﬁved
.
t˝_addr
->
	`ªsﬁve
 (

548 
addªss
.
	`c_°r
 (), 
Ál£
, 
›ti⁄s
.
ùv6
);

549 i‡(
rc
 != 0) {

550 
dñëe
 
∑ddr
;

554 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS
 && !deföed 
ZMQ_HAVE_OPENVMS


556 i‡(
¥Ÿocﬁ
 == "ipc") {

557 
∑ddr
->
ªsﬁved
.
ùc_addr
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`ùc_addªss_t
 ();

558 
	`Æloc_as£π
 (
∑ddr
->
ªsﬁved
.
ùc_addr
);

559 
rc
 = 
∑ddr
->
ªsﬁved
.
ùc_addr
->
	`ªsﬁve
 (
addªss
.
	`c_°r
 ());

560 i‡(
rc
 != 0) {

561 
dñëe
 
∑ddr
;

566 #ifde‡
ZMQ_HAVE_OPENPGM


567 i‡(
¥Ÿocﬁ
 == "pgm" ||Örotocol == "epgm") {

568 
pgm_addröfo_t
 *
ªs
 = 
NULL
;

569 
uöt16_t
 
p‹t_numbî
 = 0;

570 
rc
 = 
pgm_sockë_t
::
	`öô_addªss
(
addªss
.
	`c_°r
(), &
ªs
, &
p‹t_numbî
);

571 i‡(
ªs
 !
NULL
)

572 
	`pgm_‰ìaddröfo
 (
ªs
);

573 i‡(
rc
 !0 || 
p‹t_numbî
 == 0)

578 
£ssi⁄_ba£_t
 *
£ssi⁄
 = sessi⁄_ba£_t::
	`¸óã
 (
io_thªad
, 
åue
, 
this
,

579 
›ti⁄s
, 
∑ddr
);

580 
	`î∫o_as£π
 (
£ssi⁄
);

584 
boﬁ
 
subs¸ibe_to_Æl
 = 
¥Ÿocﬁ
 == "pgm" ||Örotocol == "epgm";

585 
pùe_t
 *
√wpùe
 = 
NULL
;

587 i‡(
›ti⁄s
.
immedüã
 !1 || 
subs¸ibe_to_Æl
) {

589 
obje˘_t
 *
∑ª¡s
 [2] = {
this
, 
£ssi⁄
};

590 
pùe_t
 *
√w_pùes
 [2] = {
NULL
, NULL};

592 
boﬁ
 
c⁄Ê©e
 = 
›ti⁄s
.conflate &&

593 (
›ti⁄s
.
ty≥
 =
ZMQ_DEALER
 ||

594 
›ti⁄s
.
ty≥
 =
ZMQ_PULL
 ||

595 
›ti⁄s
.
ty≥
 =
ZMQ_PUSH
 ||

596 
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 ||

597 
›ti⁄s
.
ty≥
 =
ZMQ_SUB
);

599 
hwms
 [2] = {
c⁄Ê©e
? -1 : 
›ti⁄s
.
¢dhwm
,

600 
c⁄Ê©e
? -1 : 
›ti⁄s
.
rcvhwm
};

601 
boﬁ
 
c⁄Ê©es
 [2] = {
c⁄Ê©e
, conflate};

602 
rc
 = 
	`pùïaú
 (
∑ª¡s
, 
√w_pùes
, 
hwms
, 
c⁄Ê©es
);

603 
	`î∫o_as£π
 (
rc
 == 0);

606 
	`©èch_pùe
 (
√w_pùes
 [0], 
subs¸ibe_to_Æl
);

607 
√wpùe
 = 
√w_pùes
 [0];

610 
£ssi⁄
->
	`©èch_pùe
 (
√w_pùes
 [1]);

614 
∑ddr
->
	`to_°rög
 (
œ°_ídpoöt
);

616 
	`add_ídpoöt
 (
addr_
, (
own_t
 *Ë
£ssi⁄
, 
√wpùe
);

618 
	}
}

620 
	gzmq
::
sockë_ba£_t
::
	$add_ídpoöt
 (c⁄° *
addr_
, 
own_t
 *
ídpoöt_
, 
pùe_t
 *
pùe
)

623 
	`œunch_chûd
 (
ídpoöt_
);

624 
ídpoöts
.
	`ö£π
 (
ídpoöts_t
::
	`vÆue_ty≥
 (
°d
::
	`°rög
 (
addr_
), 
	`ídpoöt_pùe_t
(
ídpoöt_
, 
pùe
)));

625 
	}
}

627 
	gzmq
::
sockë_ba£_t
::
	$ãrm_ídpoöt
 (c⁄° *
addr_
)

630 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

631 
î∫o
 = 
ETERM
;

636 i‡(
	`u∆ikñy
 (!
addr_
)) {

637 
î∫o
 = 
EINVAL
;

643 
rc
 = 
	`¥o˚ss_comm™ds
 (0, 
Ál£
);

644 i‡(
	`u∆ikñy
 (
rc
 != 0))

648 
°d
::
°rög
 
¥Ÿocﬁ
;

649 
°d
::
°rög
 
addªss
;

650 
rc
 = 
	`∑r£_uri
 (
addr_
, 
¥Ÿocﬁ
, 
addªss
);

651 i‡(
rc
 != 0)

654 
rc
 = 
	`check_¥Ÿocﬁ
 (
¥Ÿocﬁ
);

655 i‡(
rc
 != 0)

659 i‡(
¥Ÿocﬁ
 == "inproc") {

660 
°d
::
∑ú
 <
ö¥ocs_t
::
ôî©‹
, i≈rocs_t::ôî©‹> 
ønge
 = 
ö¥ocs
.
	`equÆ_ønge
 (°d::
	`°rög
 (
addr_
));

661 i‡(
ønge
.
fú°
 =ønge.
£c⁄d
) {

662 
î∫o
 = 
ENOENT
;

666 
ö¥ocs_t
::
ôî©‹
 
ô
 = 
ønge
.
fú°
; ià!ønge.
£c⁄d
; ++it)

667 
ô
->
£c⁄d
->
	`ãrmö©e
(
åue
);

668 
ö¥ocs
.
	`îa£
 (
ønge
.
fú°
,Ñ™ge.
£c⁄d
);

673 
°d
::
∑ú
 <
ídpoöts_t
::
ôî©‹
,Éndpoöts_t::ôî©‹> 
ønge
 = 
ídpoöts
.
	`equÆ_ønge
 (°d::
	`°rög
 (
addr_
));

674 i‡(
ønge
.
fú°
 =ønge.
£c⁄d
) {

675 
î∫o
 = 
ENOENT
;

679 
ídpoöts_t
::
ôî©‹
 
ô
 = 
ønge
.
fú°
; ià!ønge.
£c⁄d
; ++it) {

681 i‡(
ô
->
£c⁄d
.£c⁄d !
NULL
)

682 
ô
->
£c⁄d
.£c⁄d->
	`ãrmö©e
(
Ál£
);

683 
	`ãrm_chûd
 (
ô
->
£c⁄d
.
fú°
);

685 
ídpoöts
.
	`îa£
 (
ønge
.
fú°
,Ñ™ge.
£c⁄d
);

687 
	}
}

689 
	gzmq
::
sockë_ba£_t
::
	$£nd
 (
msg_t
 *
msg_
, 
Êags_
)

692 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

693 
î∫o
 = 
ETERM
;

698 i‡(
	`u∆ikñy
 (!
msg_
 || !msg_->
	`check
 ())) {

699 
î∫o
 = 
EFAULT
;

704 
rc
 = 
	`¥o˚ss_comm™ds
 (0, 
åue
);

705 i‡(
	`u∆ikñy
 (
rc
 != 0))

709 
msg_
->
	`ª£t_Êags
 (
msg_t
::
m‹e
);

712 i‡(
Êags_
 & 
ZMQ_SNDMORE
)

713 
msg_
->
	`£t_Êags
 (
msg_t
::
m‹e
);

716 
rc
 = 
	`x£nd
 (
msg_
);

717 i‡(
rc
 == 0)

719 i‡(
	`u∆ikñy
 (
î∫o
 !
EAGAIN
))

724 i‡(
Êags_
 & 
ZMQ_DONTWAIT
 || 
›ti⁄s
.
¢dtimeo
 == 0)

729 
timeout
 = 
›ti⁄s
.
¢dtimeo
;

730 
uöt64_t
 
íd
 = 
timeout
 < 0 ? 0 : (
˛ock
.
	`now_ms
 () +Åimeout);

735 
åue
) {

736 i‡(
	`u∆ikñy
 (
	`¥o˚ss_comm™ds
 (
timeout
, 
Ál£
) != 0))

738 
rc
 = 
	`x£nd
 (
msg_
);

739 i‡(
rc
 == 0)

741 i‡(
	`u∆ikñy
 (
î∫o
 !
EAGAIN
))

743 i‡(
timeout
 > 0) {

744 
timeout
 = (Ë(
íd
 - 
˛ock
.
	`now_ms
 ());

745 i‡(
timeout
 <= 0) {

746 
î∫o
 = 
EAGAIN
;

752 
	}
}

754 
	gzmq
::
sockë_ba£_t
::
	$ªcv
 (
msg_t
 *
msg_
, 
Êags_
)

757 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

758 
î∫o
 = 
ETERM
;

763 i‡(
	`u∆ikñy
 (!
msg_
 || !msg_->
	`check
 ())) {

764 
î∫o
 = 
EFAULT
;

776 i‡(++
ticks
 =
öbound_pﬁl_øã
) {

777 i‡(
	`u∆ikñy
 (
	`¥o˚ss_comm™ds
 (0, 
Ál£
) != 0))

779 
ticks
 = 0;

783 
rc
 = 
	`xªcv
 (
msg_
);

784 i‡(
	`u∆ikñy
 (
rc
 !0 && 
î∫o
 !
EAGAIN
))

788 i‡(
rc
 == 0) {

789 
	`exåa˘_Êags
 (
msg_
);

797 i‡(
Êags_
 & 
ZMQ_DONTWAIT
 || 
›ti⁄s
.
rcvtimeo
 == 0) {

798 i‡(
	`u∆ikñy
 (
	`¥o˚ss_comm™ds
 (0, 
Ál£
) != 0))

800 
ticks
 = 0;

802 
rc
 = 
	`xªcv
 (
msg_
);

803 i‡(
rc
 < 0)

804  
rc
;

805 
	`exåa˘_Êags
 (
msg_
);

811 
timeout
 = 
›ti⁄s
.
rcvtimeo
;

812 
uöt64_t
 
íd
 = 
timeout
 < 0 ? 0 : (
˛ock
.
	`now_ms
 () +Åimeout);

816 
boﬁ
 
block
 = (
ticks
 != 0);

817 
åue
) {

818 i‡(
	`u∆ikñy
 (
	`¥o˚ss_comm™ds
 (
block
 ? 
timeout
 : 0, 
Ál£
) != 0))

820 
rc
 = 
	`xªcv
 (
msg_
);

821 i‡(
rc
 == 0) {

822 
ticks
 = 0;

825 i‡(
	`u∆ikñy
 (
î∫o
 !
EAGAIN
))

827 
block
 = 
åue
;

828 i‡(
timeout
 > 0) {

829 
timeout
 = (Ë(
íd
 - 
˛ock
.
	`now_ms
 ());

830 i‡(
timeout
 <= 0) {

831 
î∫o
 = 
EAGAIN
;

837 
	`exåa˘_Êags
 (
msg_
);

839 
	}
}

841 
	gzmq
::
sockë_ba£_t
::
	$˛o£
 ()

844 
èg
 = 0xdeadbeef;

849 
	`£nd_ª≠
 (
this
);

852 
	}
}

854 
boﬁ
 
	gzmq
::
sockë_ba£_t
::
	$has_ö
 ()

856  
	`xhas_ö
 ();

857 
	}
}

859 
boﬁ
 
	gzmq
::
sockë_ba£_t
::
	$has_out
 ()

861  
	`xhas_out
 ();

862 
	}
}

864 
	gzmq
::
sockë_ba£_t
::
	$°¨t_ª≠ög
 (
pﬁÀr_t
 *
pﬁÀr_
)

867 
pﬁÀr
 = 
pﬁÀr_
;

868 
h™dÀ
 = 
pﬁÀr
->
	`add_fd
 (
maûbox
.
	`gë_fd
 (), 
this
);

869 
pﬁÀr
->
	`£t_pﬁlö
 (
h™dÀ
);

873 
	`ãrmö©e
 ();

874 
	`check_de°roy
 ();

875 
	}
}

877 
	gzmq
::
sockë_ba£_t
::
	$¥o˚ss_comm™ds
 (
timeout_
, 
boﬁ
 
thrŸée_
)

879 
rc
;

880 
comm™d_t
 
cmd
;

881 i‡(
timeout_
 != 0) {

884 
rc
 = 
maûbox
.
	`ªcv
 (&
cmd
, 
timeout_
);

892 
uöt64_t
 
tsc
 = 
zmq
::
˛ock_t
::
	`rdtsc
 ();

900 i‡(
tsc
 && 
thrŸée_
) {

905 i‡(
tsc
 >
œ°_tsc
 &&Ås¯-Üa°_ts¯<
max_comm™d_dñay
)

907 
œ°_tsc
 = 
tsc
;

911 
rc
 = 
maûbox
.
	`ªcv
 (&
cmd
, 0);

915 
rc
 == 0) {

916 
cmd
.
de°ö©i⁄
->
	`¥o˚ss_comm™d
 (cmd);

917 
rc
 = 
maûbox
.
	`ªcv
 (&
cmd
, 0);

920 i‡(
î∫o
 =
EINTR
)

923 
	`zmq_as£π
 (
î∫o
 =
EAGAIN
);

925 i‡(
˘x_ãrmö©ed
) {

926 
î∫o
 = 
ETERM
;

931 
	}
}

933 
	gzmq
::
sockë_ba£_t
::
	$¥o˚ss_°›
 ()

939 
	`°›_m⁄ô‹
 ();

940 
˘x_ãrmö©ed
 = 
åue
;

941 
	}
}

943 
	gzmq
::
sockë_ba£_t
::
	$¥o˚ss_böd
 (
pùe_t
 *
pùe_
)

945 
	`©èch_pùe
 (
pùe_
);

946 
	}
}

948 
	gzmq
::
sockë_ba£_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

953 
	`uƒegi°î_ídpoöts
 (
this
);

956 
pùes_t
::
size_ty≥
 
i
 = 0; i !
pùes
.
	`size
 (); ++i)

957 
pùes
 [
i
]->
	`ãrmö©e
 (
Ál£
);

958 
	`ªgi°î_ãrm_acks
 ((Ë
pùes
.
	`size
 ());

961 
own_t
::
	`¥o˚ss_ãrm
 (
lögî_
);

962 
	}
}

964 
	gzmq
::
sockë_ba£_t
::
	$¥o˚ss_de°roy
 ()

966 
de°royed
 = 
åue
;

967 
	}
}

969 
	gzmq
::
sockë_ba£_t
::
	$x£tsock›t
 (, c⁄° *, 
size_t
)

971 
î∫o
 = 
EINVAL
;

973 
	}
}

975 
boﬁ
 
	gzmq
::
sockë_ba£_t
::
	$xhas_out
 ()

977  
Ál£
;

978 
	}
}

980 
	gzmq
::
sockë_ba£_t
::
	$x£nd
 (
msg_t
 *)

982 
î∫o
 = 
ENOTSUP
;

984 
	}
}

986 
boﬁ
 
	gzmq
::
sockë_ba£_t
::
	$xhas_ö
 ()

988  
Ál£
;

989 
	}
}

991 
	gzmq
::
sockë_ba£_t
::
	$xªcv
 (
msg_t
 *)

993 
î∫o
 = 
ENOTSUP
;

995 
	}
}

997 
	gzmq
::
sockë_ba£_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *)

999 
	`zmq_as£π
 (
Ál£
);

1000 
	}
}

1001 
	gzmq
::
sockë_ba£_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *)

1003 
	`zmq_as£π
 (
Ál£
);

1004 
	}
}

1006 
	gzmq
::
sockë_ba£_t
::
	$xhiccu≥d
 (
pùe_t
 *)

1008 
	`zmq_as£π
 (
Ál£
);

1009 
	}
}

1011 
	gzmq
::
sockë_ba£_t
::
	$ö_evít
 ()

1017 
	`¥o˚ss_comm™ds
 (0, 
Ál£
);

1018 
	`check_de°roy
 ();

1019 
	}
}

1021 
	gzmq
::
sockë_ba£_t
::
	$out_evít
 ()

1023 
	`zmq_as£π
 (
Ál£
);

1024 
	}
}

1026 
	gzmq
::
sockë_ba£_t
::
	$timî_evít
 ()

1028 
	`zmq_as£π
 (
Ál£
);

1029 
	}
}

1031 
	gzmq
::
sockë_ba£_t
::
	$check_de°roy
 ()

1034 i‡(
de°royed
) {

1037 
pﬁÀr
->
	`rm_fd
 (
h™dÀ
);

1040 
	`de°roy_sockë
 (
this
);

1043 
	`£nd_ª≠ed
 ();

1046 
own_t
::
	`¥o˚ss_de°roy
 ();

1048 
	}
}

1050 
	gzmq
::
sockë_ba£_t
::
	$ªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

1052 
	`xªad_a˘iv©ed
 (
pùe_
);

1053 
	}
}

1055 
	gzmq
::
sockë_ba£_t
::
	$wrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

1057 
	`xwrôe_a˘iv©ed
 (
pùe_
);

1058 
	}
}

1060 
	gzmq
::
sockë_ba£_t
::
	$hiccu≥d
 (
pùe_t
 *
pùe_
)

1062 i‡(
›ti⁄s
.
immedüã
 == 1)

1063 
pùe_
->
	`ãrmö©e
 (
Ál£
);

1066 
	`xhiccu≥d
 (
pùe_
);

1067 
	}
}

1069 
	gzmq
::
sockë_ba£_t
::
	$pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

1072 
	`xpùe_ãrmö©ed
 (
pùe_
);

1075 
ö¥ocs_t
::
ôî©‹
 
ô
 = 
ö¥ocs
.
	`begö
(); ià!ö¥ocs.
	`íd
(); ++it) {

1076 i‡(
ô
->
£c⁄d
 =
pùe_
) {

1077 
ö¥ocs
.
	`îa£
(
ô
);

1084 
pùes
.
	`îa£
 (
pùe_
);

1085 i‡(
	`is_ãrmö©ög
 ())

1086 
	`uƒegi°î_ãrm_ack
 ();

1087 
	}
}

1089 
	gzmq
::
sockë_ba£_t
::
	$exåa˘_Êags
 (
msg_t
 *
msg_
)

1092 i‡(
	`u∆ikñy
 (
msg_
->
	`Êags
 (Ë& 
msg_t
::
idítôy
))

1093 
	`zmq_as£π
 (
›ti⁄s
.
ªcv_idítôy
);

1096 
rcvm‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

1097 
	}
}

1099 
	gzmq
::
sockë_ba£_t
::
	$m⁄ô‹
 (c⁄° *
addr_
, 
evíts_
)

1101 
rc
;

1102 i‡(
	`u∆ikñy
 (
˘x_ãrmö©ed
)) {

1103 
î∫o
 = 
ETERM
;

1108 i‡(
addr_
 =
NULL
) {

1109 
	`°›_m⁄ô‹
 ();

1114 
°d
::
°rög
 
¥Ÿocﬁ
;

1115 
°d
::
°rög
 
addªss
;

1116 
rc
 = 
	`∑r£_uri
 (
addr_
, 
¥Ÿocﬁ
, 
addªss
);

1117 i‡(
rc
 != 0)

1120 
rc
 = 
	`check_¥Ÿocﬁ
 (
¥Ÿocﬁ
);

1121 i‡(
rc
 != 0)

1125 i‡(
¥Ÿocﬁ
 != "inproc") {

1126 
î∫o
 = 
EPROTONOSUPPORT
;

1131 
m⁄ô‹_evíts
 = 
evíts_
;

1132 
m⁄ô‹_sockë
 = 
	`zmq_sockë
 (
	`gë_˘x
 (), 
ZMQ_PAIR
);

1133 i‡(
m⁄ô‹_sockë
 =
NULL
)

1137 
lögî
 = 0;

1138 
rc
 = 
	`zmq_£tsock›t
 (
m⁄ô‹_sockë
, 
ZMQ_LINGER
, &
lögî
,  (linger));

1139 i‡(
rc
 == -1)

1140 
	`°›_m⁄ô‹
 ();

1143 
rc
 = 
	`zmq_böd
 (
m⁄ô‹_sockë
, 
addr_
);

1144 i‡(
rc
 == -1)

1145 
	`°›_m⁄ô‹
 ();

1146  
rc
;

1147 
	}
}

1149 
	gzmq
::
sockë_ba£_t
::
	$evít_c⁄√˘ed
 (
°d
::
°rög
 &
addr_
, 
fd_
)

1151 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_CONNECTED
) {

1152 
zmq_evít_t
 
evít
;

1153 
evít
.evíà
ZMQ_EVENT_CONNECTED
;

1154 
evít
.
vÆue
 = 
fd_
;

1155 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1157 
	}
}

1159 
	gzmq
::
sockë_ba£_t
::
	$evít_c⁄√˘_dñayed
 (
°d
::
°rög
 &
addr_
, 
îr_
)

1161 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_CONNECT_DELAYED
) {

1162 
zmq_evít_t
 
evít
;

1163 
evít
.evíà
ZMQ_EVENT_CONNECT_DELAYED
;

1164 
evít
.
vÆue
 = 
îr_
;

1165 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1167 
	}
}

1169 
	gzmq
::
sockë_ba£_t
::
	$evít_c⁄√˘_ªåõd
 (
°d
::
°rög
 &
addr_
, 
öãrvÆ_
)

1171 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_CONNECT_RETRIED
) {

1172 
zmq_evít_t
 
evít
;

1173 
evít
.evíà
ZMQ_EVENT_CONNECT_RETRIED
;

1174 
evít
.
vÆue
 = 
öãrvÆ_
;

1175 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1177 
	}
}

1179 
	gzmq
::
sockë_ba£_t
::
	$evít_li°íög
 (
°d
::
°rög
 &
addr_
, 
fd_
)

1181 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_LISTENING
) {

1182 
zmq_evít_t
 
evít
;

1183 
evít
.evíà
ZMQ_EVENT_LISTENING
;

1184 
evít
.
vÆue
 = 
fd_
;

1185 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1187 
	}
}

1189 
	gzmq
::
sockë_ba£_t
::
	$evít_böd_Áûed
 (
°d
::
°rög
 &
addr_
, 
îr_
)

1191 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_BIND_FAILED
) {

1192 
zmq_evít_t
 
evít
;

1193 
evít
.evíà
ZMQ_EVENT_BIND_FAILED
;

1194 
evít
.
vÆue
 = 
îr_
;

1195 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1197 
	}
}

1199 
	gzmq
::
sockë_ba£_t
::
	$evít_ac˚±ed
 (
°d
::
°rög
 &
addr_
, 
fd_
)

1201 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_ACCEPTED
) {

1202 
zmq_evít_t
 
evít
;

1203 
evít
.evíà
ZMQ_EVENT_ACCEPTED
;

1204 
evít
.
vÆue
 = 
fd_
;

1205 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1207 
	}
}

1209 
	gzmq
::
sockë_ba£_t
::
	$evít_ac˚±_Áûed
 (
°d
::
°rög
 &
addr_
, 
îr_
)

1211 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_ACCEPT_FAILED
) {

1212 
zmq_evít_t
 
evít
;

1213 
evít
.evíà
ZMQ_EVENT_ACCEPT_FAILED
;

1214 
evít
.
vÆue

îr_
;

1215 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1217 
	}
}

1219 
	gzmq
::
sockë_ba£_t
::
	$evít_˛o£d
 (
°d
::
°rög
 &
addr_
, 
fd_
)

1221 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_CLOSED
) {

1222 
zmq_evít_t
 
evít
;

1223 
evít
.evíà
ZMQ_EVENT_CLOSED
;

1224 
evít
.
vÆue
 = 
fd_
;

1225 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1227 
	}
}

1229 
	gzmq
::
sockë_ba£_t
::
	$evít_˛o£_Áûed
 (
°d
::
°rög
 &
addr_
, 
îr_
)

1231 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_CLOSE_FAILED
) {

1232 
zmq_evít_t
 
evít
;

1233 
evít
.evíà
ZMQ_EVENT_CLOSE_FAILED
;

1234 
evít
.
vÆue
 = 
îr_
;

1235 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1237 
	}
}

1239 
	gzmq
::
sockë_ba£_t
::
	$evít_disc⁄√˘ed
 (
°d
::
°rög
 &
addr_
, 
fd_
)

1241 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_DISCONNECTED
) {

1242 
zmq_evít_t
 
evít
;

1243 
evít
.evíà
ZMQ_EVENT_DISCONNECTED
;

1244 
evít
.
vÆue
 = 
fd_
;

1245 
	`m⁄ô‹_evít
 (
evít
, 
addr_
);

1247 
	}
}

1249 
	gzmq
::
sockë_ba£_t
::
	$m⁄ô‹_evít
 (
zmq_evít_t
 
evít_
, c⁄° 
°d
::
°rög
& 
addr_
)

1251 i‡(
m⁄ô‹_sockë
) {

1252 c⁄° 
uöt16_t
 
eid
 = (uöt16_t)
evít_
.
evít
;

1253 c⁄° 
uöt32_t
 
vÆue
 = (uöt32_t)
evít_
.value;

1256 
zmq_msg_t
 
msg
;

1257 
	`zmq_msg_öô_size
 (&
msg
, (
eid
Ë+ (
vÆue
));

1258 * 
d©a1
 = (*)
	`zmq_msg_d©a
(&
msg
);

1259 
	`mem˝y
 (
d©a1
, &
eid
, (eid));

1260 
	`mem˝y
 (
d©a1
+(
eid
), &
vÆue
, (value));

1261 
	`zmq_£ndmsg
 (
m⁄ô‹_sockë
, &
msg
, 
ZMQ_SNDMORE
);

1264 
	`zmq_msg_öô_size
 (&
msg
, 
addr_
.
	`size
());

1265 
	`mem˝y
(
	`zmq_msg_d©a
(&
msg
), 
addr_
.
	`c_°r
(),áddr_.
	`size
());

1266 
	`zmq_£ndmsg
 (
m⁄ô‹_sockë
, &
msg
, 0);

1268 
	}
}

1270 
	gzmq
::
sockë_ba£_t
::
	$°›_m⁄ô‹
()

1272 i‡(
m⁄ô‹_sockë
) {

1273 i‡(
m⁄ô‹_evíts
 & 
ZMQ_EVENT_MONITOR_STOPPED
) {

1274 
zmq_evít_t
 
evít
;

1275 
evít
.evíà
ZMQ_EVENT_MONITOR_STOPPED
;

1276 
evít
.
vÆue
 = 0;

1277 
	`m⁄ô‹_evít
 (
evít
, "");

1279 
	`zmq_˛o£
 (
m⁄ô‹_sockë
);

1280 
m⁄ô‹_sockë
 = 
NULL
;

1281 
m⁄ô‹_evíts
 = 0;

1283 
	}
}

	@socket_base.hpp

20 #i‚de‡
__ZMQ_SOCKET_BASE_HPP_INCLUDED__


21 
	#__ZMQ_SOCKET_BASE_HPP_INCLUDED__


	)

23 
	~<°rög
>

24 
	~<m≠
>

25 
	~<°d¨g.h
>

27 
	~"own.hµ
"

28 
	~"¨øy.hµ
"

29 
	~"°döt.hµ
"

30 
	~"pﬁÀr.hµ
"

31 
	~"©omic_cou¡î.hµ
"

32 
	~"i_pﬁl_evíts.hµ
"

33 
	~"maûbox.hµ
"

34 
	~"°döt.hµ
"

35 
	~"˛ock.hµ
"

36 
	~"pùe.hµ
"

40 
zmq_‰ì_evít
 (*
d©a
, *
höt
);

43 
«me•a˚
 
zmq


46 
˛ass
 
˘x_t
;

47 
˛ass
 
msg_t
;

48 
˛ass
 
pùe_t
;

50 
˛ass
 
sockë_ba£_t
 :

51 
public
 
own_t
,

52 
public
 
¨øy_ôem_t
 <>,

53 
public
 
i_pﬁl_evíts
,

54 
public
 
i_pùe_evíts


56 
‰õnd
 
˛ass
 
ª≠î_t
;

58 
public
:

61 
boﬁ
 
check_èg
 ();

64 
sockë_ba£_t
 *
¸óã
 (
ty≥_
, 
zmq
::
˘x_t
 *
∑ª¡_
,

65 
uöt32_t
 
tid_
, 
sid_
);

68 
maûbox_t
 *
gë_maûbox
 ();

72 
°›
 ();

75 
£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

76 
gësock›t
 (
›ti⁄_
, *
›tvÆ_
, 
size_t
 *
›tvÆÀn_
);

77 
böd
 (c⁄° *
addr_
);

78 
c⁄√˘
 (c⁄° *
addr_
);

79 
ãrm_ídpoöt
 (c⁄° *
addr_
);

80 
£nd
 (
zmq
::
msg_t
 *
msg_
, 
Êags_
);

81 
ªcv
 (
zmq
::
msg_t
 *
msg_
, 
Êags_
);

82 
˛o£
 ();

86 
boﬁ
 
has_ö
 ();

87 
boﬁ
 
has_out
 ();

91 
°¨t_ª≠ög
 (
pﬁÀr_t
 *
pﬁÀr_
);

95 
ö_evít
 ();

96 
out_evít
 ();

97 
timî_evít
 (
id_
);

100 
ªad_a˘iv©ed
 (
pùe_t
 *
pùe_
);

101 
wrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
);

102 
hiccu≥d
 (
pùe_t
 *
pùe_
);

103 
pùe_ãrmö©ed
 (
pùe_t
 *
pùe_
);

104 
lock
();

105 
u∆ock
();

107 
m⁄ô‹
 (c⁄° *
ídpoöt_
, 
evíts_
);

109 
evít_c⁄√˘ed
 (
°d
::
°rög
 &
addr_
, 
fd_
);

110 
evít_c⁄√˘_dñayed
 (
°d
::
°rög
 &
addr_
, 
îr_
);

111 
evít_c⁄√˘_ªåõd
 (
°d
::
°rög
 &
addr_
, 
öãrvÆ_
);

112 
evít_li°íög
 (
°d
::
°rög
 &
addr_
, 
fd_
);

113 
evít_böd_Áûed
 (
°d
::
°rög
 &
addr_
, 
îr_
);

114 
evít_ac˚±ed
 (
°d
::
°rög
 &
addr_
, 
fd_
);

115 
evít_ac˚±_Áûed
 (
°d
::
°rög
 &
addr_
, 
îr_
);

116 
evít_˛o£d
 (
°d
::
°rög
 &
addr_
, 
fd_
);

117 
evít_˛o£_Áûed
 (
°d
::
°rög
 &
addr_
, 
fd_
);

118 
evít_disc⁄√˘ed
 (
°d
::
°rög
 &
addr_
, 
fd_
);

120 
¥Ÿe˘ed
:

122 
sockë_ba£_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

123 
vútuÆ
 ~
sockë_ba£_t
 ();

127 
vútuÆ
 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
,

128 
boﬁ
 
subs¸ibe_to_Æl_
 = 
Ál£
) = 0;

133 
vútuÆ
 
x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

134 
size_t
 
›tvÆÀn_
);

137 
vútuÆ
 
boﬁ
 
xhas_out
 ();

138 
vútuÆ
 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

141 
vútuÆ
 
boﬁ
 
xhas_ö
 ();

142 
vútuÆ
 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

145 
vútuÆ
 
xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
);

146 
vútuÆ
 
xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
);

147 
vútuÆ
 
xhiccu≥d
 (
pùe_t
 *
pùe_
);

148 
vútuÆ
 
xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
) = 0;

151 
¥o˚ss_de°roy
 ();

154 
m⁄ô‹_evít
 (
zmq_evít_t
 
d©a_
, c⁄° 
°d
::
°rög
& 
addr_
);

157 
°›_m⁄ô‹
 ();

159 
¥iv©e
:

161 
add_ídpoöt
 (c⁄° *
addr_
, 
own_t
 *
ídpoöt_
, 
pùe_t
 *
pùe
);

164 
°d
::
	t∑ú
 <
	town_t
 *, 
	tpùe_t
*> 
	tídpoöt_pùe_t
;

165 
°d
::
	tmu…im≠
 <
	t°d
::
	t°rög
, 
	tídpoöt_pùe_t
> 
	tídpoöts_t
;

166 
ídpoöts_t
 
ídpoöts
;

169 
°d
::
	tmu…im≠
 <
	t°d
::
	t°rög
, 
	tpùe_t
 *> 
	tö¥ocs_t
;

170 
ö¥ocs_t
 
ö¥ocs
;

174 
check_de°roy
 ();

178 
exåa˘_Êags
 (
msg_t
 *
msg_
);

181 
uöt32_t
 
èg
;

184 
boﬁ
 
˘x_ãrmö©ed
;

189 
boﬁ
 
de°royed
;

192 
∑r£_uri
 (c⁄° *
uri_
, 
°d
::
°rög
 &
¥Ÿocﬁ_
,

193 
°d
::
°rög
 &
addªss_
);

197 
check_¥Ÿocﬁ
 (c⁄° 
°d
::
°rög
 &
¥Ÿocﬁ_
);

200 
©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
 = 
Ál£
);

206 
¥o˚ss_comm™ds
 (
timeout_
, 
boﬁ
 
thrŸée_
);

209 
¥o˚ss_°›
 ();

210 
¥o˚ss_böd
 (
zmq
::
pùe_t
 *
pùe_
);

211 
¥o˚ss_ãrm
 (
lögî_
);

214 
maûbox_t
 
maûbox
;

217 
¨øy_t
 <
	tpùe_t
, 3> 
	tpùes_t
;

218 
pùes_t
 
pùes
;

221 
pﬁÀr_t
 *
pﬁÀr
;

222 
pﬁÀr_t
::
h™dÀ_t
 
h™dÀ
;

225 
uöt64_t
 
œ°_tsc
;

228 
ticks
;

231 
boﬁ
 
rcvm‹e
;

234 
˛ock_t
 
˛ock
;

237 *
m⁄ô‹_sockë
;

240 
m⁄ô‹_evíts
;

243 
°d
::
°rög
 
œ°_ídpoöt
;

245 
sockë_ba£_t
 (const socket_base_t&);

246 c⁄° 
sockë_ba£_t
 &
›î©‹
 = (const socket_base_t&);

247 
muãx_t
 
sync
;

	@stdint.hpp

20 #i‚de‡
__ZMQ_STDINT_HPP_INCLUDED__


21 
	#__ZMQ_STDINT_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_SOLARIS
 || deföed 
ZMQ_HAVE_OPENVMS


27 
	~<öây≥s.h
>

29 #ñi‡
deföed
 
_MSC_VER
 && _MSC_VER < 1600

31 #i‚de‡
öt8_t


32 
__öt8
 
	töt8_t
;

34 #i‚de‡
öt16_t


35 
__öt16
 
	töt16_t
;

37 #i‚de‡
öt32_t


38 
__öt32
 
	töt32_t
;

40 #i‚de‡
öt64_t


41 
__öt64
 
	töt64_t
;

43 #i‚de‡
uöt8_t


44 
	t__öt8
 
	tuöt8_t
;

46 #i‚de‡
uöt16_t


47 
	t__öt16
 
	tuöt16_t
;

49 #i‚de‡
uöt32_t


50 
	t__öt32
 
	tuöt32_t
;

52 #i‚de‡
uöt64_t


53 
	t__öt64
 
	tuöt64_t
;

58 
	~<°döt.h
>

	@stream.cpp

20 
	~"°ªam.hµ
"

21 
	~"pùe.hµ
"

22 
	~"wúe.hµ
"

23 
	~"øndom.hµ
"

24 
	~"likñy.hµ
"

25 
	~"îr.hµ
"

27 
	gzmq
::
°ªam_t
::
	$°ªam_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

28 
	`sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

29 
	`¥e„tched
 (
Ál£
),

30 
	`idítôy_£¡
 (
Ál£
),

31 
	`cuºít_out
 (
NULL
),

32 
	`m‹e_out
 (
Ál£
),

33 
	`√xt_≥î_id
 (
	$gíî©e_øndom
 ())

35 
›ti⁄s
.
ty≥
 = 
ZMQ_STREAM
;

36 
›ti⁄s
.
øw_sock
 = 
åue
;

38 
¥e„tched_id
.
	`öô
 ();

39 
¥e„tched_msg
.
	`öô
 ();

40 
	}
}

42 
	gzmq
::
°ªam_t
::~
	$°ªam_t
 ()

44 
	`zmq_as£π
 (
ouçùes
.
	`em±y
 ());

45 
¥e„tched_id
.
	`˛o£
 ();

46 
¥e„tched_msg
.
	`˛o£
 ();

47 
	}
}

49 
	gzmq
::
°ªam_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

52 ()
subs¸ibe_to_Æl_
;

54 
	`zmq_as£π
 (
pùe_
);

56 
	`idítify_≥î
 (
pùe_
);

57 
fq
.
	`©èch
 (
pùe_
);

58 
	}
}

60 
	gzmq
::
°ªam_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

62 
ouçùes_t
::
ôî©‹
 
ô
 = 
ouçùes
.
	`föd
 (
pùe_
->
	`gë_idítôy
 ());

63 
	`zmq_as£π
 (
ô
 !
ouçùes
.
	`íd
 ());

64 
ouçùes
.
	`îa£
 (
ô
);

65 
fq
.
	`pùe_ãrmö©ed
 (
pùe_
);

66 i‡(
pùe_
 =
cuºít_out
)

67 
cuºít_out
 = 
NULL
;

68 
	}
}

70 
	gzmq
::
°ªam_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

72 
fq
.
	`a˘iv©ed
 (
pùe_
);

73 
	}
}

75 
	gzmq
::
°ªam_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

77 
ouçùes_t
::
ôî©‹
 
ô
;

78 
ô
 = 
ouçùes
.
	`begö
 (); ià!ouçùes.
	`íd
 (); ++it)

79 i‡(
ô
->
£c⁄d
.
pùe
 =
pùe_
)

82 
	`zmq_as£π
 (
ô
 !
ouçùes
.
	`íd
 ());

83 
	`zmq_as£π
 (!
ô
->
£c⁄d
.
a˘ive
);

84 
ô
->
£c⁄d
.
a˘ive
 = 
åue
;

85 
	}
}

87 
	gzmq
::
°ªam_t
::
	$x£nd
 (
msg_t
 *
msg_
)

91 i‡(!
m‹e_out
) {

92 
	`zmq_as£π
 (!
cuºít_out
);

97 i‡(
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) {

101 
blob_t
 
	`idítôy
 ((*Ë
msg_
->
	`d©a
 (), msg_->
	`size
 ());

102 
ouçùes_t
::
ôî©‹
 
ô
 = 
ouçùes
.
	`föd
 (
idítôy
);

104 i‡(
ô
 !
ouçùes
.
	`íd
 ()) {

105 
cuºít_out
 = 
ô
->
£c⁄d
.
pùe
;

106 i‡(!
cuºít_out
->
	`check_wrôe
 ()) {

107 
ô
->
£c⁄d
.
a˘ive
 = 
Ál£
;

108 
cuºít_out
 = 
NULL
;

109 
î∫o
 = 
EAGAIN
;

114 
î∫o
 = 
EHOSTUNREACH
;

120 
m‹e_out
 = 
åue
;

122 
rc
 = 
msg_
->
	`˛o£
 ();

123 
	`î∫o_as£π
 (
rc
 == 0);

124 
rc
 = 
msg_
->
	`öô
 ();

125 
	`î∫o_as£π
 (
rc
 == 0);

130 
msg_
->
	`ª£t_Êags
 (
msg_t
::
m‹e
);

133 
m‹e_out
 = 
Ál£
;

136 i‡(
cuºít_out
) {

141 i‡(
msg_
->
	`size
 () == 0) {

142 
cuºít_out
->
	`ãrmö©e
 (
Ál£
);

143 
rc
 = 
msg_
->
	`˛o£
 ();

144 
	`î∫o_as£π
 (
rc
 == 0);

145 
cuºít_out
 = 
NULL
;

148 
boﬁ
 
ok
 = 
cuºít_out
->
	`wrôe
 (
msg_
);

149 i‡(
	`likñy
 (
ok
))

150 
cuºít_out
->
	`Êush
 ();

151 
cuºít_out
 = 
NULL
;

154 
rc
 = 
msg_
->
	`˛o£
 ();

155 
	`î∫o_as£π
 (
rc
 == 0);

159 
rc
 = 
msg_
->
	`öô
 ();

160 
	`î∫o_as£π
 (
rc
 == 0);

163 
	}
}

165 
	gzmq
::
°ªam_t
::
	$xªcv
 (
msg_t
 *
msg_
)

167 i‡(
¥e„tched
) {

168 i‡(!
idítôy_£¡
) {

169 
rc
 = 
msg_
->
	`move
 (
¥e„tched_id
);

170 
	`î∫o_as£π
 (
rc
 == 0);

171 
idítôy_£¡
 = 
åue
;

174 
rc
 = 
msg_
->
	`move
 (
¥e„tched_msg
);

175 
	`î∫o_as£π
 (
rc
 == 0);

176 
¥e„tched
 = 
Ál£
;

181 
pùe_t
 *
pùe
 = 
NULL
;

182 
rc
 = 
fq
.
	`ªcvpùe
 (&
¥e„tched_msg
, &
pùe
);

183 i‡(
rc
 != 0)

186 
	`zmq_as£π
 (
pùe
 !
NULL
);

187 
	`zmq_as£π
 ((
¥e„tched_msg
.
	`Êags
 (Ë& 
msg_t
::
m‹e
) == 0);

192 
blob_t
 
idítôy
 = 
pùe
->
	`gë_idítôy
 ();

193 
rc
 = 
msg_
->
	`öô_size
 (
idítôy
.
	`size
 ());

194 
	`î∫o_as£π
 (
rc
 == 0);

195 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
idítôy
.d©®(), idítôy.
	`size
 ());

196 
msg_
->
	`£t_Êags
 (
msg_t
::
m‹e
);

198 
¥e„tched
 = 
åue
;

199 
idítôy_£¡
 = 
åue
;

202 
	}
}

204 
boﬁ
 
	gzmq
::
°ªam_t
::
	$xhas_ö
 ()

207 i‡(
¥e„tched
)

208  
åue
;

212 
pùe_t
 *
pùe
 = 
NULL
;

213 
rc
 = 
fq
.
	`ªcvpùe
 (&
¥e„tched_msg
, &
pùe
);

214 i‡(
rc
 != 0)

215  
Ál£
;

217 
	`zmq_as£π
 (
pùe
 !
NULL
);

218 
	`zmq_as£π
 ((
¥e„tched_msg
.
	`Êags
 (Ë& 
msg_t
::
m‹e
) == 0);

220 
blob_t
 
idítôy
 = 
pùe
->
	`gë_idítôy
 ();

221 
rc
 = 
¥e„tched_id
.
	`öô_size
 (
idítôy
.
	`size
 ());

222 
	`î∫o_as£π
 (
rc
 == 0);

223 
	`mem˝y
 (
¥e„tched_id
.
	`d©a
 (), 
idítôy
.d©®(), idítôy.
	`size
 ());

224 
¥e„tched_id
.
	`£t_Êags
 (
msg_t
::
m‹e
);

226 
¥e„tched
 = 
åue
;

227 
idítôy_£¡
 = 
Ál£
;

229  
åue
;

230 
	}
}

232 
boﬁ
 
	gzmq
::
°ªam_t
::
	$xhas_out
 ()

237  
åue
;

238 
	}
}

240 
	gzmq
::
°ªam_t
::
	$idítify_≥î
 (
pùe_t
 *
pùe_
)

243 
buf„r
 [5];

244 
buf„r
 [0] = 0;

245 
	`put_uöt32
 (
buf„r
 + 1, 
√xt_≥î_id
++);

246 
blob_t
 
idítôy
 = 
	`blob_t
 (
buf„r
,  buffer);

248 
	`mem˝y
 (
›ti⁄s
.
idítôy
, idítôy.
	`d©a
 (), idítôy.
	`size
 ());

249 
›ti⁄s
.
idítôy_size
 = 
idítôy
.
	`size
 ();

251 
pùe_
->
	`£t_idítôy
 (
idítôy
);

253 
ouçùe_t
 
ouçùe
 = {
pùe_
, 
åue
};

254 c⁄° 
boﬁ
 
ok
 = 
ouçùes
.
	`ö£π
 (

255 
ouçùes_t
::
	`vÆue_ty≥
 (
idítôy
, 
ouçùe
)).
£c⁄d
;

256 
	`zmq_as£π
 (
ok
);

257 
	}
}

	@stream.hpp

20 #i‚de‡
__ZMQ_STREAM_HPP_INCLUDED__


21 
	#__ZMQ_STREAM_HPP_INCLUDED__


	)

23 
	~<m≠
>

25 
	~"rouãr.hµ
"

27 
«me•a˚
 
	gzmq


30 
˛ass
 
	g˘x_t
;

31 
˛ass
 
	gpùe_t
;

33 ˛as†
	c°ªam_t
 :

34 
public
 
sockë_ba£_t


36 
public
:

38 
°ªam_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid
);

39 ~
°ªam_t
 ();

42 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

43 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

44 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

45 
boﬁ
 
xhas_ö
 ();

46 
boﬁ
 
xhas_out
 ();

47 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

48 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

49 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

51 
	g¥iv©e
:

53 
idítify_≥î
 (
pùe_t
 *
pùe_
);

56 
fq_t
 
	gfq
;

59 
boﬁ
 
	g¥e„tched
;

63 
boﬁ
 
	gidítôy_£¡
;

66 
msg_t
 
	g¥e„tched_id
;

69 
msg_t
 
	g¥e„tched_msg
;

71 
	souçùe_t


73 
	gzmq
::
pùe_t
 *
pùe
;

74 
boﬁ
 
	ga˘ive
;

78 
	g°d
::
	tm≠
 <
	tblob_t
, 
	touçùe_t
> 
	touçùes_t
;

79 
ouçùes_t
 
	gouçùes
;

82 
	gzmq
::
pùe_t
 *
cuºít_out
;

85 
boﬁ
 
	gm‹e_out
;

89 
uöt32_t
 
	g√xt_≥î_id
;

91 
°ªam_t
 (const stream_t&);

92 c⁄° 
	g°ªam_t
 &
	g›î©‹
 = (c⁄° 
°ªam_t
&);

	@stream_engine.cpp

20 
	~"∂©f‹m.hµ
"

21 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


22 
	~"wödows.hµ
"

24 
	~<uni°d.h
>

25 
	~<sys/sockë.h
>

26 
	~<¨∑/öë.h
>

27 
	~<√töë/t˝.h
>

28 
	~<√töë/ö.h
>

29 
	~<√tdb.h
>

30 
	~<f˙é.h
>

33 
	~<°rög.h
>

34 
	~<√w
>

36 
	~"°ªam_ígöe.hµ
"

37 
	~"io_thªad.hµ
"

38 
	~"£ssi⁄_ba£.hµ
"

39 
	~"v1_ícodî.hµ
"

40 
	~"v1_decodî.hµ
"

41 
	~"v2_ícodî.hµ
"

42 
	~"v2_decodî.hµ
"

43 
	~"nuŒ_mech™ism.hµ
"

44 
	~"∂aö_mech™ism.hµ
"

45 
	~"curve_˛õ¡.hµ
"

46 
	~"curve_£rvî.hµ
"

47 
	~"øw_decodî.hµ
"

48 
	~"øw_ícodî.hµ
"

49 
	~"c⁄fig.hµ
"

50 
	~"îr.hµ
"

51 
	~"ù.hµ
"

52 
	~"likñy.hµ
"

53 
	~"wúe.hµ
"

55 
	gzmq
::
°ªam_ígöe_t
::
	$°ªam_ígöe_t
 (
fd_t
 
fd_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

56 c⁄° 
°d
::
°rög
 &
ídpoöt_
) :

57 
	`s
 (
fd_
),

58 
	`öpos
 (
NULL
),

59 
	`ösize
 (0),

60 
	`decodî
 (
NULL
),

61 
	`ouços
 (
NULL
),

62 
	`outsize
 (0),

63 
	`ícodî
 (
NULL
),

64 
	`h™dshakög
 (
åue
),

65 
	`gªëög_size
 (
v2_gªëög_size
),

66 
	`gªëög_byãs_ªad
 (0),

67 
	`£ssi⁄
 (
NULL
),

68 
	`›ti⁄s
 (
›ti⁄s_
),

69 
	`ídpoöt
 (
ídpoöt_
),

70 
	`∂ugged
 (
Ál£
),

71 
	`ªad_msg
 (&
°ªam_ígöe_t
::
ªad_idítôy
),

72 
	`wrôe_msg
 (&
°ªam_ígöe_t
::
wrôe_idítôy
),

73 
	`io_îr‹
 (
Ál£
),

74 
	`subs¸ùti⁄_ªquúed
 (
Ál£
),

75 
	`mech™ism
 (
NULL
),

76 
	`öput_°›≥d
 (
Ál£
),

77 
	`ouçut_°›≥d
 (
Ál£
),

78 
	$sockë
 (
NULL
)

80 
rc
 = 
tx_msg
.
	`öô
 ();

81 
	`î∫o_as£π
 (
rc
 == 0);

84 
	`unblock_sockë
 (
s
);

86 i‡(!
	`gë_≥î_ù_addªss
 (
s
, 
≥î_addªss
))

87 
≥î_addªss
 = "";

89 #ifde‡
SO_NOSIGPIPE


92 
£t
 = 1;

93 
rc
 = 
	`£tsock›t
 (
s
, 
SOL_SOCKET
, 
SO_NOSIGPIPE
, &
£t
,  ());

94 
	`î∫o_as£π
 (
rc
 == 0);

96 
	}
}

98 
	gzmq
::
°ªam_ígöe_t
::~
	$°ªam_ígöe_t
 ()

100 
	`zmq_as£π
 (!
∂ugged
);

102 i‡(
s
 !
ªtúed_fd
) {

103 #ifde‡
ZMQ_HAVE_WINDOWS


104 
rc
 = 
	`˛o£sockë
 (
s
);

105 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

107 
rc
 = 
	`˛o£
 (
s
);

108 
	`î∫o_as£π
 (
rc
 == 0);

110 
s
 = 
ªtúed_fd
;

113 
rc
 = 
tx_msg
.
	`˛o£
 ();

114 
	`î∫o_as£π
 (
rc
 == 0);

116 
dñëe
 
ícodî
;

117 
dñëe
 
decodî
;

118 
dñëe
 
mech™ism
;

119 
	}
}

121 
	gzmq
::
°ªam_ígöe_t
::
	$∂ug
 (
io_thªad_t
 *
io_thªad_
,

122 
£ssi⁄_ba£_t
 *
£ssi⁄_
)

124 
	`zmq_as£π
 (!
∂ugged
);

125 
∂ugged
 = 
åue
;

128 
	`zmq_as£π
 (!
£ssi⁄
);

129 
	`zmq_as£π
 (
£ssi⁄_
);

130 
£ssi⁄
 = 
£ssi⁄_
;

131 
sockë
 = 
£ssi⁄
-> 
	`gë_sockë
 ();

134 
io_obje˘_t
::
	`∂ug
 (
io_thªad_
);

135 
h™dÀ
 = 
	`add_fd
 (
s
);

136 
io_îr‹
 = 
Ál£
;

138 i‡(
›ti⁄s
.
øw_sock
) {

140 
ícodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`øw_ícodî_t
 (
out_b©ch_size
);

141 
	`Æloc_as£π
 (
ícodî
);

143 
decodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`øw_decodî_t
 (
ö_b©ch_size
);

144 
	`Æloc_as£π
 (
decodî
);

147 
h™dshakög
 = 
Ál£
;

149 
ªad_msg
 = &
°ªam_ígöe_t
::
puŒ_msg_‰om_£ssi⁄
;

150 
wrôe_msg
 = &
°ªam_ígöe_t
::
push_msg_to_£ssi⁄
;

155 
ouços
 = 
gªëög_£nd
;

156 
ouços
 [
outsize
++] = 0xff;

157 
	`put_uöt64
 (&
ouços
 [
outsize
], 
›ti⁄s
.
idítôy_size
 + 1);

158 
outsize
 += 8;

159 
ouços
 [
outsize
++] = 0x7f;

162 
	`£t_pﬁlö
 (
h™dÀ
);

163 
	`£t_pﬁlout
 (
h™dÀ
);

165 
	`ö_evít
 ();

166 
	}
}

168 
	gzmq
::
°ªam_ígöe_t
::
	$u≈lug
 ()

170 
	`zmq_as£π
 (
∂ugged
);

171 
∂ugged
 = 
Ál£
;

174 i‡(!
io_îr‹
)

175 
	`rm_fd
 (
h™dÀ
);

178 
io_obje˘_t
::
	`u≈lug
 ();

180 
£ssi⁄
 = 
NULL
;

181 
	}
}

183 
	gzmq
::
°ªam_ígöe_t
::
	$ãrmö©e
 ()

185 
	`u≈lug
 ();

186 
dñëe
 
this
;

187 
	}
}

189 
	gzmq
::
°ªam_ígöe_t
::
	$ö_evít
 ()

191 
	`as£π
 (!
io_îr‹
);

194 i‡(
	`u∆ikñy
 (
h™dshakög
))

195 i‡(!
	`h™dshake
 ())

198 
	`zmq_as£π
 (
decodî
);

201 i‡(
öput_°›≥d
) {

202 
	`rm_fd
 (
h™dÀ
);

203 
io_îr‹
 = 
åue
;

208 i‡(!
ösize
) {

214 
size_t
 
bufsize
 = 0;

215 
decodî
->
	`gë_buf„r
 (&
öpos
, &
bufsize
);

217 c⁄° 
rc
 = 
	`ªad
 (
öpos
, 
bufsize
);

218 i‡(
rc
 == 0) {

219 
	`îr‹
 ();

222 i‡(
rc
 == -1) {

223 i‡(
î∫o
 !
EAGAIN
)

224 
	`îr‹
 ();

229 
ösize
 = 
°©ic_ˇ°
 <
size_t
> (
rc
);

232 
rc
 = 0;

233 
size_t
 
¥o˚s£d
 = 0;

235 
ösize
 > 0) {

236 
rc
 = 
decodî
->
	`decode
 (
öpos
, 
ösize
, 
¥o˚s£d
);

237 
	`zmq_as£π
 (
¥o˚s£d
 <
ösize
);

238 
öpos
 +
¥o˚s£d
;

239 
ösize
 -
¥o˚s£d
;

240 i‡(
rc
 == 0 ||Ñc == -1)

242 
rc
 = (
this
->*
wrôe_msg
Ë(
decodî
->
	`msg
 ());

243 i‡(
rc
 == -1)

249 i‡(
rc
 == -1) {

250 i‡(
î∫o
 !
EAGAIN
) {

251 
	`îr‹
 ();

254 
öput_°›≥d
 = 
åue
;

255 
	`ª£t_pﬁlö
 (
h™dÀ
);

258 
£ssi⁄
->
	`Êush
 ();

259 
	}
}

261 
	gzmq
::
°ªam_ígöe_t
::
	$out_evít
 ()

263 
	`zmq_as£π
 (!
io_îr‹
);

266 i‡(!
outsize
) {

271 i‡(
	`u∆ikñy
 (
ícodî
 =
NULL
)) {

272 
	`zmq_as£π
 (
h™dshakög
);

276 
ouços
 = 
NULL
;

277 
outsize
 = 
ícodî
->
	`ícode
 (&
ouços
, 0);

279 
outsize
 < 
out_b©ch_size
) {

280 i‡((
this
->*
ªad_msg
Ë(&
tx_msg
) == -1)

282 
ícodî
->
	`lﬂd_msg
 (&
tx_msg
);

283 *
buÂå
 = 
ouços
 + 
outsize
;

284 
size_t
 
n
 = 
ícodî
->
	`ícode
 (&
buÂå
, 
out_b©ch_size
 - 
outsize
);

285 
	`zmq_as£π
 (
n
 > 0);

286 i‡(
ouços
 =
NULL
)

287 
ouços
 = 
buÂå
;

288 
outsize
 +
n
;

292 i‡(
outsize
 == 0) {

293 
ouçut_°›≥d
 = 
åue
;

294 
	`ª£t_pﬁlout
 (
h™dÀ
);

304 
nbyãs
 = 
	`wrôe
 (
ouços
, 
outsize
);

309 i‡(
nbyãs
 == -1) {

310 
	`ª£t_pﬁlout
 (
h™dÀ
);

314 
ouços
 +
nbyãs
;

315 
outsize
 -
nbyãs
;

319 i‡(
	`u∆ikñy
 (
h™dshakög
))

320 i‡(
outsize
 == 0)

321 
	`ª£t_pﬁlout
 (
h™dÀ
);

322 
	}
}

324 
	gzmq
::
°ªam_ígöe_t
::
	$ª°¨t_ouçut
 ()

326 i‡(
	`u∆ikñy
 (
io_îr‹
))

329 i‡(
	`likñy
 (
ouçut_°›≥d
)) {

330 
	`£t_pﬁlout
 (
h™dÀ
);

331 
ouçut_°›≥d
 = 
Ál£
;

338 
	`out_evít
 ();

339 
	}
}

341 
	gzmq
::
°ªam_ígöe_t
::
	$ª°¨t_öput
 ()

343 
	`zmq_as£π
 (
öput_°›≥d
);

344 
	`zmq_as£π
 (
£ssi⁄
 !
NULL
);

345 
	`zmq_as£π
 (
decodî
 !
NULL
);

347 
rc
 = (
this
->*
wrôe_msg
Ë(
decodî
->
	`msg
 ());

348 i‡(
rc
 == -1) {

349 i‡(
î∫o
 =
EAGAIN
)

350 
£ssi⁄
->
	`Êush
 ();

352 
	`îr‹
 ();

356 
ösize
 > 0) {

357 
size_t
 
¥o˚s£d
 = 0;

358 
rc
 = 
decodî
->
	`decode
 (
öpos
, 
ösize
, 
¥o˚s£d
);

359 
	`zmq_as£π
 (
¥o˚s£d
 <
ösize
);

360 
öpos
 +
¥o˚s£d
;

361 
ösize
 -
¥o˚s£d
;

362 i‡(
rc
 == 0 ||Ñc == -1)

364 
rc
 = (
this
->*
wrôe_msg
Ë(
decodî
->
	`msg
 ());

365 i‡(
rc
 == -1)

369 i‡(
rc
 =-1 && 
î∫o
 =
EAGAIN
)

370 
£ssi⁄
->
	`Êush
 ();

372 i‡(
rc
 =-1 || 
io_îr‹
)

373 
	`îr‹
 ();

375 
öput_°›≥d
 = 
Ál£
;

376 
	`£t_pﬁlö
 (
h™dÀ
);

377 
£ssi⁄
->
	`Êush
 ();

380 
	`ö_evít
 ();

382 
	}
}

384 
boﬁ
 
	gzmq
::
°ªam_ígöe_t
::
	$h™dshake
 ()

386 
	`zmq_as£π
 (
h™dshakög
);

387 
	`zmq_as£π
 (
gªëög_byãs_ªad
 < 
gªëög_size
);

389 
gªëög_byãs_ªad
 < 
gªëög_size
) {

390 c⁄° 
n
 = 
	`ªad
 (
gªëög_ªcv
 + 
gªëög_byãs_ªad
,

391 
gªëög_size
 - 
gªëög_byãs_ªad
);

392 i‡(
n
 == 0) {

393 
	`îr‹
 ();

394  
Ál£
;

396 i‡(
n
 == -1) {

397 i‡(
î∫o
 !
EAGAIN
)

398 
	`îr‹
 ();

399  
Ál£
;

402 
gªëög_byãs_ªad
 +
n
;

407 i‡(
gªëög_ªcv
 [0] != 0xff)

410 i‡(
gªëög_byãs_ªad
 < 
sig«tuª_size
)

417 i‡(!(
gªëög_ªcv
 [9] & 0x01))

422 i‡(
ouços
 + 
outsize
 =
gªëög_£nd
 + 
sig«tuª_size
) {

423 i‡(
outsize
 == 0)

424 
	`£t_pﬁlout
 (
h™dÀ
);

425 
ouços
 [
outsize
++] = 3;

428 i‡(
gªëög_byãs_ªad
 > 
sig«tuª_size
) {

429 i‡(
ouços
 + 
outsize
 =
gªëög_£nd
 + 
sig«tuª_size
 + 1) {

430 i‡(
outsize
 == 0)

431 
	`£t_pﬁlout
 (
h™dÀ
);

434 i‡(
gªëög_ªcv
 [10] =
ZMTP_1_0


435 || 
gªëög_ªcv
 [10] =
ZMTP_2_0
)

436 
ouços
 [
outsize
++] = 
›ti⁄s
.
ty≥
;

438 
ouços
 [
outsize
++] = 0;

439 
	`mem£t
 (
ouços
 + 
outsize
, 0, 20);

441 
	`zmq_as£π
 (
›ti⁄s
.
mech™ism
 =
ZMQ_NULL


442 || 
›ti⁄s
.
mech™ism
 =
ZMQ_PLAIN


443 || 
›ti⁄s
.
mech™ism
 =
ZMQ_CURVE
);

445 i‡(
›ti⁄s
.
mech™ism
 =
ZMQ_NULL
)

446 
	`mem˝y
 (
ouços
 + 
outsize
, "NULL", 4);

448 i‡(
›ti⁄s
.
mech™ism
 =
ZMQ_PLAIN
)

449 
	`mem˝y
 (
ouços
 + 
outsize
, "PLAIN", 5);

451 
	`mem˝y
 (
ouços
 + 
outsize
, "CURVE", 5);

452 
outsize
 += 20;

453 
	`mem£t
 (
ouços
 + 
outsize
, 0, 32);

454 
outsize
 += 32;

455 
gªëög_size
 = 
v3_gªëög_size
;

462 c⁄° 
size_t
 
ªvisi⁄_pos
 = 10;

466 i‡(
gªëög_ªcv
 [0] != 0xff || !(greeting_recv [9] & 0x01)) {

467 
ícodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v1_ícodî_t
 (
out_b©ch_size
);

468 
	`Æloc_as£π
 (
ícodî
);

470 
decodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v1_decodî_t
 (
ö_b©ch_size
, 
›ti⁄s
.
maxmsgsize
);

471 
	`Æloc_as£π
 (
decodî
);

477 c⁄° 
size_t
 
hódî_size
 = 
›ti⁄s
.
idítôy_size
 + 1 >= 255 ? 10 : 2;

478 
tmp
 [10], *
buf„Ω
 =Åmp;

482 c⁄° 
rc
 = 
tx_msg
.
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

483 
	`zmq_as£π
 (
rc
 == 0);

484 
	`mem˝y
 (
tx_msg
.
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

485 
ícodî
->
	`lﬂd_msg
 (&
tx_msg
);

486 
size_t
 
buf„r_size
 = 
ícodî
->
	`ícode
 (&
buf„Ω
, 
hódî_size
);

487 
	`zmq_as£π
 (
buf„r_size
 =
hódî_size
);

490 
öpos
 = 
gªëög_ªcv
;

491 
ösize
 = 
gªëög_byãs_ªad
;

496 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_PUB
 || o±i⁄s.ty≥ =
ZMQ_XPUB
)

497 
subs¸ùti⁄_ªquúed
 = 
åue
;

501 
ªad_msg
 = &
°ªam_ígöe_t
::
puŒ_msg_‰om_£ssi⁄
;

504 
wrôe_msg
 = &
°ªam_ígöe_t
::
wrôe_idítôy
;

507 i‡(
gªëög_ªcv
 [
ªvisi⁄_pos
] =
ZMTP_1_0
) {

508 
ícodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v1_ícodî_t
 (

509 
out_b©ch_size
);

510 
	`Æloc_as£π
 (
ícodî
);

512 
decodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v1_decodî_t
 (

513 
ö_b©ch_size
, 
›ti⁄s
.
maxmsgsize
);

514 
	`Æloc_as£π
 (
decodî
);

517 i‡(
gªëög_ªcv
 [
ªvisi⁄_pos
] =
ZMTP_2_0
) {

518 
ícodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v2_ícodî_t
 (
out_b©ch_size
);

519 
	`Æloc_as£π
 (
ícodî
);

521 
decodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v2_decodî_t
 (

522 
ö_b©ch_size
, 
›ti⁄s
.
maxmsgsize
);

523 
	`Æloc_as£π
 (
decodî
);

526 
ícodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v2_ícodî_t
 (
out_b©ch_size
);

527 
	`Æloc_as£π
 (
ícodî
);

529 
decodî
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`v2_decodî_t
 (

530 
ö_b©ch_size
, 
›ti⁄s
.
maxmsgsize
);

531 
	`Æloc_as£π
 (
decodî
);

533 i‡(
›ti⁄s
.
mech™ism
 =
ZMQ_NULL


534 && 
	`memcmp
 (
gªëög_ªcv
 + 12, "NULL\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 20) == 0) {

535 
mech™ism
 = 
	`√w
 (
°d
::
nŸhrow
)

536 
	`nuŒ_mech™ism_t
 (
£ssi⁄
, 
≥î_addªss
, 
›ti⁄s
);

537 
	`Æloc_as£π
 (
mech™ism
);

540 i‡(
›ti⁄s
.
mech™ism
 =
ZMQ_PLAIN


541 && 
	`memcmp
 (
gªëög_ªcv
 + 12, "PLAIN\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 20) == 0) {

542 
mech™ism
 = 
	`√w
 (
°d
::
nŸhrow
)

543 
	`∂aö_mech™ism_t
 (
£ssi⁄
, 
≥î_addªss
, 
›ti⁄s
);

544 
	`Æloc_as£π
 (
mech™ism
);

546 #ifde‡
HAVE_LIBSODIUM


548 i‡(
›ti⁄s
.
mech™ism
 =
ZMQ_CURVE


549 && 
	`memcmp
 (
gªëög_ªcv
 + 12, "CURVE\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0", 20) == 0) {

550 i‡(
›ti⁄s
.
as_£rvî
)

551 
mech™ism
 = 
	`√w
 (
°d
::
nŸhrow
)

552 
	`curve_£rvî_t
 (
£ssi⁄
, 
≥î_addªss
, 
›ti⁄s
);

554 
mech™ism
 = 
	`√w
 (
°d
::
nŸhrow
Ë
	`curve_˛õ¡_t
 (
›ti⁄s
);

555 
	`Æloc_as£π
 (
mech™ism
);

559 
	`îr‹
 ();

560  
Ál£
;

562 
ªad_msg
 = &
°ªam_ígöe_t
::
√xt_h™dshake_comm™d
;

563 
wrôe_msg
 = &
°ªam_ígöe_t
::
¥o˚ss_h™dshake_comm™d
;

567 i‡(
outsize
 == 0)

568 
	`£t_pﬁlout
 (
h™dÀ
);

572 
h™dshakög
 = 
Ál£
;

574  
åue
;

575 
	}
}

577 
	gzmq
::
°ªam_ígöe_t
::
	$ªad_idítôy
 (
msg_t
 *
msg_
)

579 
rc
 = 
msg_
->
	`öô_size
 (
›ti⁄s
.
idítôy_size
);

580 
	`î∫o_as£π
 (
rc
 == 0);

581 i‡(
›ti⁄s
.
idítôy_size
 > 0)

582 
	`mem˝y
 (
msg_
->
	`d©a
 (), 
›ti⁄s
.
idítôy
, o±i⁄s.
idítôy_size
);

583 
ªad_msg
 = &
°ªam_ígöe_t
::
puŒ_msg_‰om_£ssi⁄
;

585 
	}
}

587 
	gzmq
::
°ªam_ígöe_t
::
	$wrôe_idítôy
 (
msg_t
 *
msg_
)

589 i‡(
›ti⁄s
.
ªcv_idítôy
) {

590 
msg_
->
	`£t_Êags
 (
msg_t
::
idítôy
);

591 
rc
 = 
£ssi⁄
->
	`push_msg
 (
msg_
);

592 
	`î∫o_as£π
 (
rc
 == 0);

595 
rc
 = 
msg_
->
	`˛o£
 ();

596 
	`î∫o_as£π
 (
rc
 == 0);

597 
rc
 = 
msg_
->
	`öô
 ();

598 
	`î∫o_as£π
 (
rc
 == 0);

601 i‡(
subs¸ùti⁄_ªquúed
)

602 
wrôe_msg
 = &
°ªam_ígöe_t
::
wrôe_subs¸ùti⁄_msg
;

604 
wrôe_msg
 = &
°ªam_ígöe_t
::
push_msg_to_£ssi⁄
;

607 
	}
}

609 
	gzmq
::
°ªam_ígöe_t
::
	$√xt_h™dshake_comm™d
 (
msg_t
 *
msg_
)

611 
	`zmq_as£π
 (
mech™ism
 !
NULL
);

613 c⁄° 
rc
 = 
mech™ism
->
	`√xt_h™dshake_comm™d
 (
msg_
);

614 i‡(
rc
 == 0) {

615 
msg_
->
	`£t_Êags
 (
msg_t
::
comm™d
);

616 i‡(
mech™ism
->
	`is_h™dshake_com∂ëe
 ())

617 
	`mech™ism_ªady
 ();

620  
rc
;

621 
	}
}

623 
	gzmq
::
°ªam_ígöe_t
::
	$¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg_
)

625 
	`zmq_as£π
 (
mech™ism
 !
NULL
);

626 c⁄° 
rc
 = 
mech™ism
->
	`¥o˚ss_h™dshake_comm™d
 (
msg_
);

627 i‡(
rc
 == 0) {

628 i‡(
mech™ism
->
	`is_h™dshake_com∂ëe
 ())

629 
	`mech™ism_ªady
 ();

630 i‡(
ouçut_°›≥d
)

631 
	`ª°¨t_ouçut
 ();

634  
rc
;

635 
	}
}

637 
	gzmq
::
°ªam_ígöe_t
::
	$z≠_msg_avaûabÀ
 ()

639 
	`zmq_as£π
 (
mech™ism
 !
NULL
);

641 c⁄° 
rc
 = 
mech™ism
->
	`z≠_msg_avaûabÀ
 ();

642 i‡(
rc
 == -1) {

643 
	`îr‹
 ();

646 i‡(
öput_°›≥d
)

647 
	`ª°¨t_öput
 ();

648 i‡(
ouçut_°›≥d
)

649 
	`ª°¨t_ouçut
 ();

650 
	}
}

652 
	gzmq
::
°ªam_ígöe_t
::
	$mech™ism_ªady
 ()

654 i‡(
›ti⁄s
.
ªcv_idítôy
) {

655 
msg_t
 
idítôy
;

656 
mech™ism
->
	`≥î_idítôy
 (&
idítôy
);

657 c⁄° 
rc
 = 
£ssi⁄
->
	`push_msg
 (&
idítôy
);

658 i‡(
rc
 =-1 && 
î∫o
 =
EAGAIN
) {

664 
	`î∫o_as£π
 (
rc
 == 0);

665 
£ssi⁄
->
	`Êush
 ();

668 
ªad_msg
 = &
°ªam_ígöe_t
::
puŒ_™d_ícode
;

669 
wrôe_msg
 = &
°ªam_ígöe_t
::
decode_™d_push
;

670 
	}
}

672 
	gzmq
::
°ªam_ígöe_t
::
	$puŒ_msg_‰om_£ssi⁄
 (
msg_t
 *
msg_
)

674  
£ssi⁄
->
	`puŒ_msg
 (
msg_
);

675 
	}
}

677 
	gzmq
::
°ªam_ígöe_t
::
	$push_msg_to_£ssi⁄
 (
msg_t
 *
msg_
)

679  
£ssi⁄
->
	`push_msg
 (
msg_
);

680 
	}
}

682 
	gzmq
::
°ªam_ígöe_t
::
	$puŒ_™d_ícode
 (
msg_t
 *
msg_
)

684 
	`zmq_as£π
 (
mech™ism
 !
NULL
);

686 i‡(
£ssi⁄
->
	`puŒ_msg
 (
msg_
) == -1)

688 i‡(
mech™ism
->
	`ícode
 (
msg_
) == -1)

691 
	}
}

693 
	gzmq
::
°ªam_ígöe_t
::
	$decode_™d_push
 (
msg_t
 *
msg_
)

695 
	`zmq_as£π
 (
mech™ism
 !
NULL
);

697 i‡(
mech™ism
->
	`decode
 (
msg_
) == -1)

699 i‡(
£ssi⁄
->
	`push_msg
 (
msg_
) == -1) {

700 i‡(
î∫o
 =
EAGAIN
)

701 
wrôe_msg
 = &
°ªam_ígöe_t
::
push_⁄e_thí_decode_™d_push
;

705 
	}
}

707 
	gzmq
::
°ªam_ígöe_t
::
	$push_⁄e_thí_decode_™d_push
 (
msg_t
 *
msg_
)

709 c⁄° 
rc
 = 
£ssi⁄
->
	`push_msg
 (
msg_
);

710 i‡(
rc
 == 0)

711 
wrôe_msg
 = &
°ªam_ígöe_t
::
decode_™d_push
;

712  
rc
;

713 
	}
}

715 
	gzmq
::
°ªam_ígöe_t
::
	$wrôe_subs¸ùti⁄_msg
 (
msg_t
 *
msg_
)

717 
msg_t
 
subs¸ùti⁄
;

721 
rc
 = 
subs¸ùti⁄
.
	`öô_size
 (1);

722 
	`î∫o_as£π
 (
rc
 == 0);

723 *(*Ë
subs¸ùti⁄
.
	`d©a
 () = 1;

724 
rc
 = 
£ssi⁄
->
	`push_msg
 (&
subs¸ùti⁄
);

725 i‡(
rc
 == -1)

728 
wrôe_msg
 = &
°ªam_ígöe_t
::
push_msg_to_£ssi⁄
;

729  
	`push_msg_to_£ssi⁄
 (
msg_
);

730 
	}
}

732 
	gzmq
::
°ªam_ígöe_t
::
	$îr‹
 ()

734 
	`zmq_as£π
 (
£ssi⁄
);

735 
sockë
->
	`evít_disc⁄√˘ed
 (
ídpoöt
, 
s
);

736 
£ssi⁄
->
	`Êush
 ();

737 
£ssi⁄
->
	`dëach
 ();

738 
	`u≈lug
 ();

739 
dñëe
 
this
;

740 
	}
}

742 
	gzmq
::
°ªam_ígöe_t
::
	$wrôe
 (c⁄° *
d©a_
, 
size_t
 
size_
)

744 #ifde‡
ZMQ_HAVE_WINDOWS


746 
nbyãs
 = 
	`£nd
 (
s
, (*Ë
d©a_
, (Ë
size_
, 0);

750 i‡(
nbyãs
 =
SOCKET_ERROR
 && 
	`WSAGëLa°Eº‹
 (Ë=
WSAEWOULDBLOCK
)

754 i‡(
nbyãs
 =
SOCKET_ERROR
 && (

755 
	`WSAGëLa°Eº‹
 (Ë=
WSAENETDOWN
 ||

756 
	`WSAGëLa°Eº‹
 (Ë=
WSAENETRESET
 ||

757 
	`WSAGëLa°Eº‹
 (Ë=
WSAEHOSTUNREACH
 ||

758 
	`WSAGëLa°Eº‹
 (Ë=
WSAECONNABORTED
 ||

759 
	`WSAGëLa°Eº‹
 (Ë=
WSAETIMEDOUT
 ||

760 
	`WSAGëLa°Eº‹
 (Ë=
WSAECONNRESET
))

763 
	`wß_as£π
 (
nbyãs
 !
SOCKET_ERROR
);

764  
nbyãs
;

768 
ssize_t
 
nbyãs
 = 
	`£nd
 (
s
, 
d©a_
, 
size_
, 0);

773 i‡(
nbyãs
 =-1 && (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||

774 
î∫o
 =
EINTR
))

778 i‡(
nbyãs
 == -1) {

779 
	`î∫o_as£π
 (
î∫o
 !
EACCES


780 && 
î∫o
 !
EBADF


781 && 
î∫o
 !
EDESTADDRREQ


782 && 
î∫o
 !
EFAULT


783 && 
î∫o
 !
EINVAL


784 && 
î∫o
 !
EISCONN


785 && 
î∫o
 !
EMSGSIZE


786 && 
î∫o
 !
ENOMEM


787 && 
î∫o
 !
ENOTSOCK


788 && 
î∫o
 !
EOPNOTSUPP
);

792  
°©ic_ˇ°
 <> (
nbyãs
);

795 
	}
}

797 
	gzmq
::
°ªam_ígöe_t
::
	$ªad
 (*
d©a_
, 
size_t
 
size_
)

799 #ifde‡
ZMQ_HAVE_WINDOWS


801 c⁄° 
rc
 = 
	`ªcv
 (
s
, (*Ë
d©a_
, (Ë
size_
, 0);

805 i‡(
rc
 =
SOCKET_ERROR
) {

806 i‡(
	`WSAGëLa°Eº‹
 (Ë=
WSAEWOULDBLOCK
)

807 
î∫o
 = 
EAGAIN
;

809 
	`wß_as£π
 (
	`WSAGëLa°Eº‹
 (Ë=
WSAENETDOWN


810 || 
	`WSAGëLa°Eº‹
 (Ë=
WSAENETRESET


811 || 
	`WSAGëLa°Eº‹
 (Ë=
WSAECONNABORTED


812 || 
	`WSAGëLa°Eº‹
 (Ë=
WSAETIMEDOUT


813 || 
	`WSAGëLa°Eº‹
 (Ë=
WSAECONNRESET


814 || 
	`WSAGëLa°Eº‹
 (Ë=
WSAECONNREFUSED


815 || 
	`WSAGëLa°Eº‹
 (Ë=
WSAENOTCONN
);

816 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

820  
rc
 =
SOCKET_ERROR
? -1:Ñc;

824 c⁄° 
ssize_t
 
rc
 = 
	`ªcv
 (
s
, 
d©a_
, 
size_
, 0);

829 i‡(
rc
 == -1) {

830 
	`î∫o_as£π
 (
î∫o
 !
EBADF


831 && 
î∫o
 !
EFAULT


832 && 
î∫o
 !
EINVAL


833 && 
î∫o
 !
ENOMEM


834 && 
î∫o
 !
ENOTSOCK
);

835 i‡(
î∫o
 =
EWOULDBLOCK
 ||Éºnÿ=
EINTR
)

836 
î∫o
 = 
EAGAIN
;

839  
°©ic_ˇ°
 <> (
rc
);

842 
	}
}

	@stream_engine.hpp

20 #i‚de‡
__ZMQ_STREAM_ENGINE_HPP_INCLUDED__


21 
	#__ZMQ_STREAM_ENGINE_HPP_INCLUDED__


	)

23 
	~<°ddef.h
>

25 
	~"fd.hµ
"

26 
	~"i_ígöe.hµ
"

27 
	~"io_obje˘.hµ
"

28 
	~"i_ícodî.hµ
"

29 
	~"i_decodî.hµ
"

30 
	~"›ti⁄s.hµ
"

31 
	~"sockë_ba£.hµ
"

32 
	~"../ö˛ude/zmq.h
"

34 
«me•a˚
 
	gzmq


39 
	gZMTP_1_0
 = 0,

40 
	gZMTP_2_0
 = 1

43 
˛ass
 
	gio_thªad_t
;

44 
˛ass
 
	gmsg_t
;

45 
˛ass
 
	g£ssi⁄_ba£_t
;

46 
˛ass
 
	gmech™ism_t
;

51 
˛ass
 
	g°ªam_ígöe_t
 : 
public
 
io_obje˘_t
,Öubli¯
	gi_ígöe


53 
	gpublic
:

55 
°ªam_ígöe_t
 (
fd_t
 
fd_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

56 c⁄° 
°d
::
°rög
 &
ídpoöt
);

57 ~
°ªam_ígöe_t
 ();

60 
∂ug
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

61 
zmq
::
£ssi⁄_ba£_t
 *
£ssi⁄_
);

62 
ãrmö©e
 ();

63 
ª°¨t_öput
 ();

64 
ª°¨t_ouçut
 ();

65 
z≠_msg_avaûabÀ
 ();

68 
ö_evít
 ();

69 
out_evít
 ();

71 
	g¥iv©e
:

74 
u≈lug
 ();

77 
îr‹
 ();

80 
ª˚ive_gªëög
 ();

83 
boﬁ
 
h™dshake
 ();

88 
wrôe
 (c⁄° *
d©a_
, 
size_t
 
size_
);

93 
ªad
 (*
d©a_
, 
size_t
 
size_
);

95 
ªad_idítôy
 (
msg_t
 *
msg_
);

96 
wrôe_idítôy
 (
msg_t
 *
msg_
);

98 
√xt_h™dshake_comm™d
 (
msg_t
 *
msg
);

99 
¥o˚ss_h™dshake_comm™d
 (
msg_t
 *
msg
);

101 
puŒ_msg_‰om_£ssi⁄
 (
msg_t
 *
msg_
);

102 
push_msg_to_£ssi⁄
 (
msg_t
 *
msg
);

104 
puŒ_™d_ícode
 (
msg_t
 *
msg_
);

105 
decode_™d_push
 (
msg_t
 *
msg_
);

106 
push_⁄e_thí_decode_™d_push
 (
msg_t
 *
msg_
);

108 
mech™ism_ªady
 ();

110 
wrôe_subs¸ùti⁄_msg
 (
msg_t
 *
msg_
);

112 
size_t
 
add_¥›îty
 (*
±r
,

113 c⁄° *
«me
, c⁄° *
vÆue
, 
size_t
 
vÆue_Àn
);

116 
fd_t
 
	gs
;

119 
boﬁ
 
	gas_£rvî
;

121 
msg_t
 
	gtx_msg
;

123 
h™dÀ_t
 
	gh™dÀ
;

125 *
	göpos
;

126 
size_t
 
	gösize
;

127 
i_decodî
 *
	gdecodî
;

129 *
	gouços
;

130 
size_t
 
	goutsize
;

131 
i_ícodî
 *
	gícodî
;

136 
boﬁ
 
	gh™dshakög
;

138 c⁄° 
size_t
 
	gsig«tuª_size
 = 10;

141 c⁄° 
size_t
 
	gv2_gªëög_size
 = 12;

144 c⁄° 
size_t
 
	gv3_gªëög_size
 = 64;

147 
size_t
 
	ggªëög_size
;

150 
	ggªëög_ªcv
 [
v3_gªëög_size
];

151 
	ggªëög_£nd
 [
v3_gªëög_size
];

154 
	ggªëög_byãs_ªad
;

157 
	gzmq
::
£ssi⁄_ba£_t
 *
£ssi⁄
;

159 
›ti⁄s_t
 
	g›ti⁄s
;

162 
	g°d
::
°rög
 
ídpoöt
;

164 
boﬁ
 
	g∂ugged
;

166 (
	g°ªam_ígöe_t
::*
ªad_msg
Ë(
msg_t
 *
msg_
);

168 (
	g°ªam_ígöe_t
::*
wrôe_msg
Ë(
msg_t
 *
msg_
);

170 
boﬁ
 
	gio_îr‹
;

175 
boﬁ
 
	gsubs¸ùti⁄_ªquúed
;

177 
mech™ism_t
 *
	gmech™ism
;

180 
boﬁ
 
	göput_°›≥d
;

183 
boﬁ
 
	gouçut_°›≥d
;

186 
	gzmq
::
sockë_ba£_t
 *
sockë
;

188 
	g°d
::
°rög
 
≥î_addªss
;

190 
°ªam_ígöe_t
 (const stream_engine_t&);

191 c⁄° 
	g°ªam_ígöe_t
 &
	g›î©‹
 = (c⁄° 
°ªam_ígöe_t
&);

	@sub.cpp

20 
	~"sub.hµ
"

21 
	~"msg.hµ
"

23 
	gzmq
::
sub_t
::
	$sub_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

24 
	$xsub_t
 (
∑ª¡_
, 
tid_
, 
sid_
)

26 
›ti⁄s
.
ty≥
 = 
ZMQ_SUB
;

30 
›ti⁄s
.
fûãr
 = 
åue
;

31 
	}
}

33 
	gzmq
::
sub_t
::~
	$sub_t
 ()

35 
	}
}

37 
zmq
::
sub_t
::
	$x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

38 
size_t
 
›tvÆÀn_
)

40 i‡(
›ti⁄_
 !
ZMQ_SUBSCRIBE
 && o±i⁄_ !
ZMQ_UNSUBSCRIBE
) {

41 
î∫o
 = 
EINVAL
;

46 
msg_t
 
msg
;

47 
rc
 = 
msg
.
	`öô_size
 (
›tvÆÀn_
 + 1);

48 
	`î∫o_as£π
 (
rc
 == 0);

49 *
d©a
 = (*Ë
msg
.
	`d©a
 ();

50 i‡(
›ti⁄_
 =
ZMQ_SUBSCRIBE
)

51 *
d©a
 = 1;

53 i‡(
›ti⁄_
 =
ZMQ_UNSUBSCRIBE
)

54 *
d©a
 = 0;

55 
	`mem˝y
 (
d©a
 + 1, 
›tvÆ_
, 
›tvÆÀn_
);

58 
îr
 = 0;

59 
rc
 = 
xsub_t
::
	`x£nd
 (&
msg
);

60 i‡(
rc
 != 0)

61 
îr
 = 
î∫o
;

62 
rc2
 = 
msg
.
	`˛o£
 ();

63 
	`î∫o_as£π
 (
rc2
 == 0);

64 i‡(
rc
 != 0)

65 
î∫o
 = 
îr
;

66  
rc
;

67 
	}
}

69 
	gzmq
::
sub_t
::
	$x£nd
 (
msg_t
 *)

72 
î∫o
 = 
ENOTSUP
;

74 
	}
}

76 
boﬁ
 
	gzmq
::
sub_t
::
	$xhas_out
 ()

79  
Ál£
;

80 
	}
}

	@sub.hpp

20 #i‚de‡
__ZMQ_SUB_HPP_INCLUDED__


21 
	#__ZMQ_SUB_HPP_INCLUDED__


	)

23 
	~"xsub.hµ
"

25 
«me•a˚
 
	gzmq


28 
˛ass
 
	g˘x_t
;

29 
˛ass
 
	gmsg_t
;

30 
˛ass
 
	gio_thªad_t
;

31 
˛ass
 
	gsockë_ba£_t
;

33 ˛as†
	csub_t
 : 
public
 
xsub_t


35 
public
:

37 
sub_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

38 ~
sub_t
 ();

40 
	g¥Ÿe˘ed
:

42 
x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

43 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

44 
boﬁ
 
xhas_out
 ();

46 
	g¥iv©e
:

48 
sub_t
 (const sub_t&);

49 c⁄° 
	gsub_t
 &
	g›î©‹
 = (c⁄° 
sub_t
&);

	@tcp.cpp

20 
	~"ù.hµ
"

21 
	~"t˝.hµ
"

22 
	~"îr.hµ
"

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


26 
	~"wödows.hµ
"

28 
	~<f˙é.h
>

29 
	~<sys/ty≥s.h
>

30 
	~<sys/sockë.h
>

31 
	~<√töë/ö.h
>

32 
	~<√töë/t˝.h
>

35 #i‡
deföed
 
ZMQ_HAVE_OPENVMS


36 
	~<io˘l.h
>

39 
	gzmq
::
	$tu√_t˝_sockë
 (
fd_t
 
s_
)

44 
nodñay
 = 1;

45 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_TCP
, 
TCP_NODELAY
, (*Ë&
nodñay
,

47 #ifde‡
ZMQ_HAVE_WINDOWS


48 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

50 
	`î∫o_as£π
 (
rc
 == 0);

53 #ifde‡
ZMQ_HAVE_OPENVMS


55 
nodñack
 = 1;

56 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_TCP
, 
TCP_NODELACK
, (*Ë&
nodñack
,

58 
	`î∫o_as£π
 (
rc
 !
SOCKET_ERROR
);

60 
	}
}

62 
	gzmq
::
	$£t_t˝_£nd_buf„r
 (
fd_t
 
sockfd_
, 
bufsize_
)

64 c⁄° 
rc
 = 
	`£tsock›t
 (
sockfd_
, 
SOL_SOCKET
, 
SO_SNDBUF
,

65 (*Ë&
bufsize_
,  bufsize_);

66 #ifde‡
ZMQ_HAVE_WINDOWS


67 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

69 
	`î∫o_as£π
 (
rc
 == 0);

71 
	}
}

73 
	gzmq
::
	$£t_t˝_ª˚ive_buf„r
 (
fd_t
 
sockfd_
, 
bufsize_
)

75 c⁄° 
rc
 = 
	`£tsock›t
 (
sockfd_
, 
SOL_SOCKET
, 
SO_RCVBUF
,

76 (*Ë&
bufsize_
,  bufsize_);

77 #ifde‡
ZMQ_HAVE_WINDOWS


78 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

80 
	`î∫o_as£π
 (
rc
 == 0);

82 
	}
}

84 
	gzmq
::
	$tu√_t˝_kì∑lives
 (
fd_t
 
s_
, 
kì∑live_
, 
kì∑live_˙t_
, 
kì∑live_idÀ_
, 
kì∑live_ötvl_
)

87 ()
kì∑live_
;

88 ()
kì∑live_˙t_
;

89 ()
kì∑live_idÀ_
;

90 ()
kì∑live_ötvl_
;

93 ()
s_
;

97 #ifde‡
ZMQ_HAVE_WINDOWS


98 i‡(
kì∑live_
 != -1) {

99 
t˝_kì∑live
 
kì∑live_›ts
;

100 
kì∑live_›ts
.
⁄off
 = 
kì∑live_
;

101 
kì∑live_›ts
.
kì∑livëime
 = 
kì∑live_idÀ_
 != -1 ? keepalive_idle_ * 1000 : 7200000;

102 
kì∑live_›ts
.
kì∑liveöãrvÆ
 = 
kì∑live_ötvl_
 != -1 ? keepalive_intvl_ * 1000 : 1000;

103 
DWORD
 
num_byãs_ªtu∫ed
;

104 
rc
 = 
	`WSAIo˘l
(
s_
, 
SIO_KEEPALIVE_VALS
, &
kì∑live_›ts
, (kì∑live_›ts), 
NULL
, 0, &
num_byãs_ªtu∫ed
, NULL, NULL);

105 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

108 #ifde‡
ZMQ_HAVE_SO_KEEPALIVE


109 i‡(
kì∑live_
 != -1) {

110 
rc
 = 
	`£tsock›t
 (
s_
, 
SOL_SOCKET
, 
SO_KEEPALIVE
, (*Ë&
kì∑live_
,  ());

111 
	`î∫o_as£π
 (
rc
 == 0);

113 #ifde‡
ZMQ_HAVE_TCP_KEEPCNT


114 i‡(
kì∑live_˙t_
 != -1) {

115 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
, &
kì∑live_˙t_
,  ());

116 
	`î∫o_as£π
 (
rc
 == 0);

120 #ifde‡
ZMQ_HAVE_TCP_KEEPIDLE


121 i‡(
kì∑live_idÀ_
 != -1) {

122 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
, &
kì∑live_idÀ_
,  ());

123 
	`î∫o_as£π
 (
rc
 == 0);

126 #ifde‡
ZMQ_HAVE_TCP_KEEPALIVE


127 i‡(
kì∑live_idÀ_
 != -1) {

128 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_TCP
, 
TCP_KEEPALIVE
, &
kì∑live_idÀ_
,  ());

129 
	`î∫o_as£π
 (
rc
 == 0);

134 #ifde‡
ZMQ_HAVE_TCP_KEEPINTVL


135 i‡(
kì∑live_ötvl_
 != -1) {

136 
rc
 = 
	`£tsock›t
 (
s_
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
, &
kì∑live_ötvl_
,  ());

137 
	`î∫o_as£π
 (
rc
 == 0);

143 
	}
}

	@tcp.hpp

20 #i‚de‡
__ZMQ_TCP_HPP_INCLUDED__


21 
	#__ZMQ_TCP_HPP_INCLUDED__


	)

23 
	~"fd.hµ
"

25 
«me•a˚
 
	gzmq


29 
tu√_t˝_sockë
 (
fd_t
 
s_
);

32 
£t_t˝_£nd_buf„r
 (
fd_t
 
sockfd_
, 
bufsize_
);

35 
£t_t˝_ª˚ive_buf„r
 (
fd_t
 
sockfd_
, 
bufsize_
);

38 
tu√_t˝_kì∑lives
 (
fd_t
 
s_
, 
kì∑live_
, 
kì∑live_˙t_
, 
kì∑live_idÀ_
, 
kì∑live_ötvl_
);

	@tcp_address.cpp

20 
	~<°rög
>

21 
	~<s°ªam
>

23 
	~"t˝_addªss.hµ
"

24 
	~"∂©f‹m.hµ
"

25 
	~"°döt.hµ
"

26 
	~"îr.hµ
"

27 
	~"ù.hµ
"

29 #ifde‡
ZMQ_HAVE_WINDOWS


30 
	~"wödows.hµ
"

32 
	~<sys/ty≥s.h
>

33 
	~<¨∑/öë.h
>

34 
	~<√töë/t˝.h
>

35 
	~<√tdb.h
>

41 #i‚de‡
AI_ADDRCONFIG


42 
	#AI_ADDRCONFIG
 0

	)

45 #i‡
deföed
 
ZMQ_HAVE_SOLARIS


47 
	~<sys/sockio.h
>

48 
	~<√t/if.h
>

49 
	~<uni°d.h
>

50 
	~<°dlib.h
>

53 
	gzmq
::
t˝_addªss_t
::
	$ªsﬁve_nic_«me
 (c⁄° *
nic_
, 
boﬁ
 
ùv6_
)

56 (Ë
ùv6_
;

59 
fd
 = 
	`›í_sockë
 (
AF_INET
, 
SOCK_DGRAM
, 0);

60 
	`î∫o_as£π
 (
fd
 != -1);

63 
li‚um
 
i‚
;

64 
i‚
.
li‚_Ámûy
 = 
AF_INET
;

65 
i‚
.
li‚_Êags
 = 0;

66 
rc
 = 
	`io˘l
 (
fd
, 
SIOCGLIFNUM
, (*Ë&
i‚
);

67 
	`î∫o_as£π
 (
rc
 != -1);

70 
size_t
 
i‰_size
 =  (
li‰eq
Ë* 
i‚
.
li‚_cou¡
;

71 *
i‰
 = (*Ë
	`mÆloc
 (
i‰_size
);

72 
	`Æloc_as£π
 (
i‰
);

75 
lifc⁄f
 
ifc
;

76 
ifc
.
lifc_Ámûy
 = 
AF_INET
;

77 
ifc
.
lifc_Êags
 = 0;

78 
ifc
.
lifc_Àn
 = 
i‰_size
;

79 
ifc
.
lifc_buf
 = 
i‰
;

80 
rc
 = 
	`io˘l
 (
fd
, 
SIOCGLIFCONF
, (*Ë&
ifc
);

81 
	`î∫o_as£π
 (
rc
 != -1);

84 
boﬁ
 
found
 = 
Ál£
;

85 
li‰eq
 *
i‰p
 = 
ifc
.
lifc_ªq
;

86 
n
 = 0;Ç < (Ë(
ifc
.
lifc_Àn
 /  (
li‰eq
));

87 
n
 ++, 
i‰p
 ++) {

88 i‡(!
	`°rcmp
 (
nic_
, 
i‰p
->
li‰_«me
)) {

89 
rc
 = 
	`io˘l
 (
fd
, 
SIOCGLIFADDR
, (*Ë
i‰p
);

90 
	`î∫o_as£π
 (
rc
 != -1);

91 i‡(
i‰p
->
li‰_addr
.
ss_Ámûy
 =
AF_INET
) {

92 
addªss
.
ùv4
 = *(
sockaddr_ö
*Ë&
i‰p
->
li‰_addr
;

93 
found
 = 
åue
;

100 
	`‰ì
 (
i‰
);

101 
	`˛o£
 (
fd
);

103 i‡(!
found
) {

104 
î∫o
 = 
ENODEV
;

108 
	}
}

110 #ñi‡
deföed
 
ZMQ_HAVE_AIX
 || deföed 
ZMQ_HAVE_HPUX
 || deföed 
ZMQ_HAVE_ANDROID


112 
	~<sys/ty≥s.h
>

113 
	~<uni°d.h
>

114 
	~<sys/io˘l.h
>

115 
	~<√t/if.h
>

117 
	gzmq
::
t˝_addªss_t
::
	$ªsﬁve_nic_«me
 (c⁄° *
nic_
, 
boﬁ
 
ùv6_
)

120 (Ë
ùv6_
;

123 
sd
 = 
	`›í_sockë
 (
AF_INET
, 
SOCK_DGRAM
, 0);

124 
	`î∫o_as£π
 (
sd
 != -1);

126 
i‰eq
 
i‰
;

129 
	`°∫˝y
 (
i‰
.
i‰_«me
, 
nic_
,  (ifr.ifr_name));

132 
rc
 = 
	`io˘l
 (
sd
, 
SIOCGIFADDR
, (
ˇddr_t
Ë&
i‰
,  (
i‰eq
));

135 
	`˛o£
 (
sd
);

137 i‡(
rc
 == -1) {

138 
î∫o
 = 
ENODEV
;

141 
	`mem˝y
 (&
addªss
.
ùv4
.
sö_addr
, &((
sockaddr_ö
*Ë&
i‰
.
i‰_addr
)->sin_addr,

142  (
ö_addr
));

145 
	}
}

147 #ñi‡((
deföed
 
ZMQ_HAVE_LINUX
 || deföed 
ZMQ_HAVE_FREEBSD
 ||\

148 
deföed
 
	gZMQ_HAVE_OSX
 || deföed 
	gZMQ_HAVE_OPENBSD
 ||\

149 
deföed
 
	gZMQ_HAVE_QNXNTO
 || deföed 
	gZMQ_HAVE_NETBSD
)\

150 && 
deföed
 
	gZMQ_HAVE_IFADDRS
)

152 
	~<iÁddrs.h
>

156 
	gzmq
::
t˝_addªss_t
::
	$ªsﬁve_nic_«me
 (c⁄° *
nic_
, 
boﬁ
 
ùv6_
)

159 
iÁddrs
 *
iÁ
 = 
NULL
;

160 
rc
 = 
	`gëiÁddrs
 (&
iÁ
);

161 
	`î∫o_as£π
 (
rc
 == 0);

162 
	`zmq_as£π
 (
iÁ
 !
NULL
);

165 
boﬁ
 
found
 = 
Ál£
;

166 
iÁddrs
 *
iÂ
 = 
iÁ
; iÂ !
NULL
 ;iÂ = iÂ->
iÁ_√xt
)

168 i‡(
iÂ
->
iÁ_addr
 =
NULL
)

171 
Ámûy
 = 
iÂ
->
iÁ_addr
->
ß_Ámûy
;

172 i‡((
Ámûy
 =
AF_INET
 || (
ùv6_
 && famûy =
AF_INET6
))

173 && !
	`°rcmp
 (
nic_
, 
iÂ
->
iÁ_«me
)) {

174 
	`mem˝y
 (&
addªss
, 
iÂ
->
iÁ_addr
,

175 (
Ámûy
 =
AF_INET
Ë?  (
sockaddr_ö
)

176 :  (
sockaddr_ö6
));

177 
found
 = 
åue
;

183 
	`‰ìiÁddrs
 (
iÁ
);

185 i‡(!
found
) {

186 
î∫o
 = 
ENODEV
;

190 
	}
}

196 
	gzmq
::
t˝_addªss_t
::
	$ªsﬁve_nic_«me
 (c⁄° *
nic_
, 
boﬁ
 
ùv6_
)

199 (Ë
nic_
;

200 (Ë
ùv6_
;

202 
î∫o
 = 
ENODEV
;

204 
	}
}

208 
	gzmq
::
t˝_addªss_t
::
	$ªsﬁve_öãrÁ˚
 (c⁄° *
öãrÁ˚_
, 
boﬁ
 
ùv6_
)

211 
sockaddr_°‹age
 
ss
;

212 
sockaddr
 *
out_addr
 = (sockaddr*Ë&
ss
;

213 
size_t
 
out_addæí
;

217 i‡(
ùv6_
) {

218 
sockaddr_ö6
 
ù6_addr
;

219 
	`mem£t
 (&
ù6_addr
, 0,  (ip6_addr));

220 
ù6_addr
.
sö6_Ámûy
 = 
AF_INET6
;

221 
	`mem˝y
 (&
ù6_addr
.
sö6_addr
, &
ö6addr_™y
,  (in6addr_any));

222 
out_addæí
 =  
ù6_addr
;

223 
	`mem˝y
 (
out_addr
, &
ù6_addr
, 
out_addæí
);

226 
sockaddr_ö
 
ù4_addr
;

227 
	`mem£t
 (&
ù4_addr
, 0,  (ip4_addr));

228 
ù4_addr
.
sö_Ámûy
 = 
AF_INET
;

229 
ù4_addr
.
sö_addr
.
s_addr
 = 
	`ht⁄l
 (
INADDR_ANY
);

230 
out_addæí
 =  
ù4_addr
;

231 
	`mem˝y
 (
out_addr
, &
ù4_addr
, 
out_addæí
);

234 i‡(
	`°rcmp
 (
öãrÁ˚_
, "*") == 0) {

235 
	`zmq_as£π
 (
out_addæí
 < 
addªss
);

236 
	`mem˝y
 (&
addªss
, 
out_addr
, 
out_addæí
);

241 
rc
 = 
	`ªsﬁve_nic_«me
 (
öãrÁ˚_
, 
ùv6_
);

242 i‡(
rc
 !0 && 
î∫o
 !
ENODEV
)

243  
rc
;

244 i‡(
rc
 == 0)

248 #i‡
deföed
 
ZMQ_HAVE_OPENVMS
 && deföed 
__ü64


249 
__addröfo64
 *
ªs
 = 
NULL
;

250 
__addröfo64
 
ªq
;

252 
addröfo
 *
ªs
 = 
NULL
;

253 
addröfo
 
ªq
;

255 
	`mem£t
 (&
ªq
, 0,  (req));

259 
ªq
.
ai_Ámûy
 = 
ùv6_
? 
AF_INET6
: 
AF_INET
;

262 
ªq
.
ai_sockty≥
 = 
SOCK_STREAM
;

266 
ªq
.
ai_Êags
 = 
AI_PASSIVE
 | 
AI_NUMERICHOST
;

268 #i‡
deföed
 
AI_V4MAPPED
 && !deföed 
ZMQ_HAVE_FREEBSD


274 i‡(
ªq
.
ai_Ámûy
 =
AF_INET6
)

275 
ªq
.
ai_Êags
 |
AI_V4MAPPED
;

280 
rc
 = 
	`gëaddröfo
 (
öãrÁ˚_
, 
NULL
, &
ªq
, &
ªs
);

281 i‡(
rc
) {

282 
î∫o
 = 
ENODEV
;

287 
	`zmq_as£π
 (
ªs
 !
NULL
);

288 
	`zmq_as£π
 ((
size_t
Ë(
ªs
->
ai_addæí
Ë< (
addªss
));

289 
	`mem˝y
 (&
addªss
, 
ªs
->
ai_addr
,Ñes->
ai_addæí
);

292 
	`‰ìaddröfo
 (
ªs
);

295 
	}
}

297 
	gzmq
::
t˝_addªss_t
::
	$ªsﬁve_ho°«me
 (c⁄° *
ho°«me_
, 
boﬁ
 
ùv6_
)

300 #i‡
deföed
 
ZMQ_HAVE_OPENVMS
 && deföed 
__ü64
 && 
__INITIAL_POINTER_SIZE
 == 64

301 
__addröfo64
 
ªq
;

303 
addröfo
 
ªq
;

305 
	`mem£t
 (&
ªq
, 0,  (req));

309 
ªq
.
ai_Ámûy
 = 
ùv6_
? 
AF_INET6
: 
AF_INET
;

313 
ªq
.
ai_sockty≥
 = 
SOCK_STREAM
;

315 #i‡
deföed
 
AI_V4MAPPED
 && !deföed 
ZMQ_HAVE_FREEBSD


321 i‡(
ªq
.
ai_Ámûy
 =
AF_INET6
)

322 
ªq
.
ai_Êags
 |
AI_V4MAPPED
;

327 #i‡
deföed
 
ZMQ_HAVE_OPENVMS
 && deföed 
__ü64
 && 
__INITIAL_POINTER_SIZE
 == 64

328 
__addröfo64
 *
ªs
;

330 
addröfo
 *
ªs
;

332 
rc
 = 
	`gëaddröfo
 (
ho°«me_
, 
NULL
, &
ªq
, &
ªs
);

333 i‡(
rc
) {

334 
rc
) {

335 
EAI_MEMORY
:

336 
î∫o
 = 
ENOMEM
;

339 
î∫o
 = 
EINVAL
;

346 
	`zmq_as£π
 ((
size_t
Ë(
ªs
->
ai_addæí
Ë< (
addªss
));

347 
	`mem˝y
 (&
addªss
, 
ªs
->
ai_addr
,Ñes->
ai_addæí
);

349 
	`‰ìaddröfo
 (
ªs
);

352 
	}
}

354 
	gzmq
::
t˝_addªss_t
::
	$t˝_addªss_t
 ()

356 
	`mem£t
 (&
addªss
, 0,  (address));

357 
	}
}

359 
	gzmq
::
t˝_addªss_t
::
	$t˝_addªss_t
 (c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ß_Àn
)

361 
	`zmq_as£π
(
ß
 && 
ß_Àn
 > 0);

363 
	`mem£t
 (&
addªss
, 0,  (address));

364 i‡(
ß
->
ß_Ámûy
 =
AF_INET
 && 
ß_Àn
 >(
sockÀn_t
Ë (
addªss
.
ùv4
))

365 
	`mem˝y
(&
addªss
.
ùv4
, 
ß
,  (address.ipv4));

367 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
 && 
ß_Àn
 >(
sockÀn_t
Ë (
addªss
.
ùv6
))

368 
	`mem˝y
(&
addªss
.
ùv6
, 
ß
,  (address.ipv6));

369 
	}
}

371 
	gzmq
::
t˝_addªss_t
::~
	$t˝_addªss_t
 ()

373 
	}
}

375 
zmq
::
t˝_addªss_t
::
	$ªsﬁve
 (c⁄° *
«me_
, 
boﬁ
 
loˇl_
, boﬁ 
ùv6_
)

378 c⁄° *
dñimôî
 = 
	`°ºchr
 (
«me_
, ':');

379 i‡(!
dñimôî
) {

380 
î∫o
 = 
EINVAL
;

384 
°d
::
°rög
 
	`addr_°r
 (
«me_
, 
dñimôî
 -Çame_);

385 
°d
::
°rög
 
	`p‹t_°r
 (
dñimôî
 + 1);

388 i‡(
addr_°r
.
	`size
 () >= 2 &&áddr_str [0] == '[' &&

389 
addr_°r
 [addr_°r.
	`size
 () - 1] == ']')

390 
addr_°r
 =áddr_°r.
	`sub°r
 (1,áddr_°r.
	`size
 () - 2);

393 
uöt16_t
 
p‹t
;

394 i‡(
p‹t_°r
 == "*" ||Öort_str == "0")

396 
p‹t
 = 0;

399 
p‹t
 = (
uöt16_t
Ë
	`©oi
 (
p‹t_°r
.
	`c_°r
 ());

400 i‡(
p‹t
 == 0) {

401 
î∫o
 = 
EINVAL
;

407 
rc
;

408 i‡(
loˇl_
)

409 
rc
 = 
	`ªsﬁve_öãrÁ˚
 (
addr_°r
.
	`c_°r
 (), 
ùv6_
);

411 
rc
 = 
	`ªsﬁve_ho°«me
 (
addr_°r
.
	`c_°r
 (), 
ùv6_
);

412 i‡(
rc
 != 0)

416 i‡(
addªss
.
gíîic
.
ß_Ámûy
 =
AF_INET6
)

417 
addªss
.
ùv6
.
sö6_p‹t
 = 
	`ht⁄s
 (
p‹t
);

419 
addªss
.
ùv4
.
sö_p‹t
 = 
	`ht⁄s
 (
p‹t
);

422 
	}
}

424 
	gzmq
::
t˝_addªss_t
::
	$to_°rög
 (
°d
::
°rög
 &
addr_
)

426 i‡(
addªss
.
gíîic
.
ß_Ámûy
 !
AF_INET


427 && 
addªss
.
gíîic
.
ß_Ámûy
 !
AF_INET6
) {

428 
addr_
.
	`˛ór
 ();

433 
hbuf
[
NI_MAXHOST
];

434 
rc
 = 
	`gë«meöfo
 (
	`addr
 (), 
	`addæí
 (), 
hbuf
,  (hbuf), 
NULL
, 0, 
NI_NUMERICHOST
);

435 i‡(
rc
 != 0) {

436 
addr_
.
	`˛ór
 ();

437  
rc
;

440 i‡(
addªss
.
gíîic
.
ß_Ámûy
 =
AF_INET6
) {

441 
°d
::
°rög°ªam
 
s
;

442 
s
 << "t˝://[" << 
hbuf
 << "]:" << 
	`¡ohs
 (
addªss
.
ùv6
.
sö6_p‹t
);

443 
addr_
 = 
s
.
	`°r
 ();

446 
°d
::
°rög°ªam
 
s
;

447 
s
 << "t˝://" << 
hbuf
 << ":" << 
	`¡ohs
 (
addªss
.
ùv4
.
sö_p‹t
);

448 
addr_
 = 
s
.
	`°r
 ();

451 
	}
}

453 c⁄° 
sockaddr
 *
	gzmq
::
t˝_addªss_t
::
	$addr
 () const

455  &
addªss
.
gíîic
;

456 
	}
}

458 
sockÀn_t
 
	gzmq
::
t˝_addªss_t
::
	$addæí
 () const

460 i‡(
addªss
.
gíîic
.
ß_Ámûy
 =
AF_INET6
)

461  (
sockÀn_t
Ë (
addªss
.
ùv6
);

463  (
sockÀn_t
Ë (
addªss
.
ùv4
);

464 
	}
}

466 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


467 
	gzmq
::
t˝_addªss_t
::
	$Ámûy
 () const

469 
ß_Ámûy_t
 
zmq
::
t˝_addªss_t
::
	$Ámûy
 () const

472  
addªss
.
gíîic
.
ß_Ámûy
;

473 
	}
}

475 
	gzmq
::
t˝_addªss_mask_t
::
	$t˝_addªss_mask_t
 () :

476 
	$t˝_addªss_t
 ()

478 
addªss_mask
 = -1;

479 
	}
}

481 
	gzmq
::
t˝_addªss_mask_t
::
	$mask
 () const

483  
addªss_mask
;

484 
	}
}

486 
	gzmq
::
t˝_addªss_mask_t
::
	$ªsﬁve
 (c⁄° *
«me_
, 
boﬁ
 
ùv6_
)

490 
°d
::
°rög
 
addr_°r
, 
mask_°r
;

491 c⁄° *
dñimôî
 = 
	`°ºchr
 (
«me_
, '/');

492 i‡(
dñimôî
 !
NULL
) {

493 
addr_°r
.
	`assign
 (
«me_
, 
dñimôî
 -Çame_);

494 
mask_°r
.
	`assign
 (
dñimôî
 + 1);

495 i‡(
mask_°r
.
	`em±y
 ()) {

496 
î∫o
 = 
EINVAL
;

501 
addr_°r
.
	`assign
 (
«me_
);

504 
rc
 = 
t˝_addªss_t
::
	`ªsﬁve_ho°«me
 (
addr_°r
.
	`c_°r
 (), 
ùv6_
);

505 i‡(
rc
 != 0)

506  
rc
;

509 i‡(
mask_°r
.
	`em±y
 ()) {

510 i‡(
addªss
.
gíîic
.
ß_Ámûy
 =
AF_INET6
)

511 
addªss_mask
 = 128;

513 
addªss_mask
 = 32;

516 i‡(
mask_°r
 == "0") {

517 
addªss_mask
 = 0;

520 
mask
 = 
	`©oi
 (
mask_°r
.
	`c_°r
 ());

522 (
mask
 < 1) ||

523 (
addªss
.
gíîic
.
ß_Ámûy
 =
AF_INET6
 && 
mask
 > 128) ||

524 (
addªss
.
gíîic
.
ß_Ámûy
 !
AF_INET6
 && 
mask
 > 32)

526 
î∫o
 = 
EINVAL
;

529 
addªss_mask
 = 
mask
;

533 
	}
}

535 
	gzmq
::
t˝_addªss_mask_t
::
	$to_°rög
 (
°d
::
°rög
 &
addr_
)

537 i‡(
addªss
.
gíîic
.
ß_Ámûy
 !
AF_INET
 &&áddªss.gíîic.ß_Ámûy !
AF_INET6
) {

538 
addr_
.
	`˛ór
 ();

541 i‡(
addªss_mask
 == -1) {

542 
addr_
.
	`˛ór
 ();

546 
hbuf
[
NI_MAXHOST
];

547 
rc
 = 
	`gë«meöfo
 (
	`addr
 (), 
	`addæí
 (), 
hbuf
,  (hbuf), 
NULL
, 0, 
NI_NUMERICHOST
);

548 i‡(
rc
 != 0) {

549 
addr_
.
	`˛ór
 ();

550  
rc
;

553 i‡(
addªss
.
gíîic
.
ß_Ámûy
 =
AF_INET6
) {

554 
°d
::
°rög°ªam
 
s
;

555 
s
 << "[" << 
hbuf
 << "]/" << 
addªss_mask
;

556 
addr_
 = 
s
.
	`°r
 ();

559 
°d
::
°rög°ªam
 
s
;

560 
s
 << 
hbuf
 << "/" << 
addªss_mask
;

561 
addr_
 = 
s
.
	`°r
 ();

564 
	}
}

566 
boﬁ
 
	gzmq
::
t˝_addªss_mask_t
::
	$m©ch_addªss
 (c⁄° 
sockaddr
 *
ss
, c⁄° 
sockÀn_t
 
ss_Àn
) const

568 
	`zmq_as£π
 (
addªss_mask
 !-1 && 
ss
 !
NULL
 && 
ss_Àn
 >(
sockÀn_t
Ë (
sockaddr
));

570 i‡(
ss
->
ß_Ámûy
 !
addªss
.
gíîic
.sa_family)

571  
Ál£
;

573 i‡(
addªss_mask
 > 0) {

574 
mask
;

575 c⁄° 
uöt8_t
 *
our_byãs
, *
theú_byãs
;

576 i‡(
ss
->
ß_Ámûy
 =
AF_INET6
) {

577 
	`zmq_as£π
 (
ss_Àn
 = (
sockaddr_ö6
));

578 
theú_byãs
 = (c⁄° 
uöt8_t
 *Ë&(((c⁄° 
sockaddr_ö6
 *Ë
ss
)->
sö6_addr
);

579 
our_byãs
 = (c⁄° 
uöt8_t
 *Ë&
addªss
.
ùv6
.
sö6_addr
;

580 
mask
 =  (
ö6_addr
) * 8;

583 
	`zmq_as£π
 (
ss_Àn
 = (
sockaddr_ö
));

584 
theú_byãs
 = (c⁄° 
uöt8_t
 *Ë&(((c⁄° 
sockaddr_ö
 *Ë
ss
)->
sö_addr
);

585 
our_byãs
 = (c⁄° 
uöt8_t
 *Ë&
addªss
.
ùv4
.
sö_addr
;

586 
mask
 =  (
ö_addr
) * 8;

588 i‡(
addªss_mask
 < 
mask
) mask =áddress_mask;

590 
size_t
 
fuŒ_byãs
 = 
mask
 / 8;

591 i‡(
	`memcmp
(
our_byãs
, 
theú_byãs
, 
fuŒ_byãs
))

592  
Ál£
;

594 
uöt8_t
 
œ°_byã_bôs
 = (0xffU << (8 - (
mask
 % 8))) & 0xffU;

595 i‡(
œ°_byã_bôs
) {

596 i‡((
theú_byãs
[
fuŒ_byãs
] & 
œ°_byã_bôs
Ë!(
our_byãs
[full_bytes] &Üast_byte_bits))

597  
Ál£
;

601  
åue
;

602 
	}
}

	@tcp_address.hpp

20 #i‚de‡
__ZMQ_TCP_ADDRESS_HPP_INCLUDED__


21 
	#__ZMQ_TCP_ADDRESS_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


26 
	~"wödows.hµ
"

28 
	~<sys/sockë.h
>

29 
	~<√töë/ö.h
>

32 
«me•a˚
 
	gzmq


35 ˛as†
	ct˝_addªss_t


37 
	gpublic
:

39 
t˝_addªss_t
 ();

40 
t˝_addªss_t
 (c⁄° 
sockaddr
 *
ß
, 
sockÀn_t
 
ß_Àn
);

41 
	gvútuÆ
 ~
t˝_addªss_t
 ();

47 
ªsﬁve
 (c⁄° *
«me_
, 
boﬁ
 
loˇl_
, boﬁ 
ùv6_
);

50 
vútuÆ
 
to_°rög
 (
°d
::
°rög
 &
addr_
);

52 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


53 
Ámûy
 () const;

55 
ß_Ámûy_t
 
Ámûy
 () const;

57 c⁄° 
sockaddr
 *
addr
 () const;

58 
sockÀn_t
 
addæí
 () const;

60 
	g¥Ÿe˘ed
:

61 
ªsﬁve_nic_«me
 (c⁄° *
nic_
, 
boﬁ
 
ùv6_
);

62 
ªsﬁve_öãrÁ˚
 (c⁄° *
öãrÁ˚_
, 
boﬁ
 
ùv6_
);

63 
ªsﬁve_ho°«me
 (c⁄° *
ho°«me_
, 
boﬁ
 
ùv6_
);

66 
sockaddr
 
	ggíîic
;

67 
sockaddr_ö
 
	gùv4
;

68 
sockaddr_ö6
 
	gùv6
;

69 } 
	gaddªss
;

72 ˛as†
	ct˝_addªss_mask_t
 : 
public
 
t˝_addªss_t


74 
public
:

75 
t˝_addªss_mask_t
 ();

80 
ªsﬁve
 (c⁄° *
«me_
, 
boﬁ
 
ùv6_
);

83 
to_°rög
 (
°d
::
°rög
 &
addr_
);

85 
mask
 () const;

87 
boﬁ
 
m©ch_addªss
 (c⁄° 
sockaddr
 *
ss
, c⁄° 
sockÀn_t
 
ss_Àn
) const;

89 
	g¥iv©e
:

90 
addªss_mask
;

	@tcp_connecter.cpp

20 
	~<√w
>

21 
	~<°rög
>

23 
	~"t˝_c⁄√˘î.hµ
"

24 
	~"°ªam_ígöe.hµ
"

25 
	~"io_thªad.hµ
"

26 
	~"∂©f‹m.hµ
"

27 
	~"øndom.hµ
"

28 
	~"îr.hµ
"

29 
	~"ù.hµ
"

30 
	~"t˝.hµ
"

31 
	~"addªss.hµ
"

32 
	~"t˝_addªss.hµ
"

33 
	~"£ssi⁄_ba£.hµ
"

35 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


36 
	~"wödows.hµ
"

38 
	~<uni°d.h
>

39 
	~<sys/ty≥s.h
>

40 
	~<sys/sockë.h
>

41 
	~<¨∑/öë.h
>

42 
	~<√töë/t˝.h
>

43 
	~<√töë/ö.h
>

44 
	~<√tdb.h
>

45 
	~<f˙é.h
>

46 #ifde‡
ZMQ_HAVE_OPENVMS


47 
	~<io˘l.h
>

51 
	gzmq
::
t˝_c⁄√˘î_t
::
	$t˝_c⁄√˘î_t
 (
˛ass
 
io_thªad_t
 *
io_thªad_
,

52 
˛ass
 
£ssi⁄_ba£_t
 *
£ssi⁄_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

53 c⁄° 
addªss_t
 *
addr_
, 
boﬁ
 
dñayed_°¨t_
) :

54 
	`own_t
 (
io_thªad_
, 
›ti⁄s_
),

55 
	`io_obje˘_t
 (
io_thªad_
),

56 
	`addr
 (
addr_
),

57 
	`s
 (
ªtúed_fd
),

58 
	`h™dÀ_vÆid
 (
Ál£
),

59 
	`dñayed_°¨t
 (
dñayed_°¨t_
),

60 
	`timî_°¨ãd
 (
Ál£
),

61 
	`£ssi⁄
 (
£ssi⁄_
),

62 
	$cuºít_ªc⁄√˘_ivl
(
›ti⁄s
.
ªc⁄√˘_ivl
)

64 
	`zmq_as£π
 (
addr
);

65 
	`zmq_as£π
 (
addr
->
¥Ÿocﬁ
 == "tcp");

66 
addr
->
	`to_°rög
 (
ídpoöt
);

67 
sockë
 = 
£ssi⁄
-> 
	`gë_sockë
();

68 
	}
}

70 
	gzmq
::
t˝_c⁄√˘î_t
::~
	$t˝_c⁄√˘î_t
 ()

72 
	`zmq_as£π
 (!
timî_°¨ãd
);

73 
	`zmq_as£π
 (!
h™dÀ_vÆid
);

74 
	`zmq_as£π
 (
s
 =
ªtúed_fd
);

75 
	}
}

77 
	gzmq
::
t˝_c⁄√˘î_t
::
	$¥o˚ss_∂ug
 ()

79 i‡(
dñayed_°¨t
)

80 
	`add_ªc⁄√˘_timî
 ();

82 
	`°¨t_c⁄√˘ög
 ();

83 
	}
}

85 
	gzmq
::
t˝_c⁄√˘î_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

87 i‡(
timî_°¨ãd
) {

88 
	`ˇn˚l_timî
 (
ªc⁄√˘_timî_id
);

89 
timî_°¨ãd
 = 
Ál£
;

92 i‡(
h™dÀ_vÆid
) {

93 
	`rm_fd
 (
h™dÀ
);

94 
h™dÀ_vÆid
 = 
Ál£
;

97 i‡(
s
 !
ªtúed_fd
)

98 
	`˛o£
 ();

100 
own_t
::
	`¥o˚ss_ãrm
 (
lögî_
);

101 
	}
}

103 
	gzmq
::
t˝_c⁄√˘î_t
::
	$ö_evít
 ()

108 
	`out_evít
 ();

109 
	}
}

111 
	gzmq
::
t˝_c⁄√˘î_t
::
	$out_evít
 ()

113 
fd_t
 
fd
 = 
	`c⁄√˘
 ();

114 
	`rm_fd
 (
h™dÀ
);

115 
h™dÀ_vÆid
 = 
Ál£
;

118 i‡(
fd
 =
ªtúed_fd
) {

119 
	`˛o£
 ();

120 
	`add_ªc⁄√˘_timî
();

124 
	`tu√_t˝_sockë
 (
fd
);

125 
	`tu√_t˝_kì∑lives
 (
fd
, 
›ti⁄s
.
t˝_kì∑live
, o±i⁄s.
t˝_kì∑live_˙t
, o±i⁄s.
t˝_kì∑live_idÀ
, o±i⁄s.
t˝_kì∑live_ötvl
);

128 
°ªam_ígöe_t
 *
ígöe
 = 
	`√w
 (
°d
::
nŸhrow
)

129 
	`°ªam_ígöe_t
 (
fd
, 
›ti⁄s
, 
ídpoöt
);

130 
	`Æloc_as£π
 (
ígöe
);

133 
	`£nd_©èch
 (
£ssi⁄
, 
ígöe
);

136 
	`ãrmö©e
 ();

138 
sockë
->
	`evít_c⁄√˘ed
 (
ídpoöt
, 
fd
);

139 
	}
}

141 
	gzmq
::
t˝_c⁄√˘î_t
::
	$timî_evít
 (
id_
)

143 
	`zmq_as£π
 (
id_
 =
ªc⁄√˘_timî_id
);

144 
timî_°¨ãd
 = 
Ál£
;

145 
	`°¨t_c⁄√˘ög
 ();

146 
	}
}

148 
	gzmq
::
t˝_c⁄√˘î_t
::
	$°¨t_c⁄√˘ög
 ()

151 
rc
 = 
	`›í
 ();

154 i‡(
rc
 == 0) {

155 
h™dÀ
 = 
	`add_fd
 (
s
);

156 
h™dÀ_vÆid
 = 
åue
;

157 
	`out_evít
 ();

162 i‡(
rc
 =-1 && 
î∫o
 =
EINPROGRESS
) {

163 
h™dÀ
 = 
	`add_fd
 (
s
);

164 
h™dÀ_vÆid
 = 
åue
;

165 
	`£t_pﬁlout
 (
h™dÀ
);

166 
sockë
->
	`evít_c⁄√˘_dñayed
 (
ídpoöt
, 
	`zmq_î∫o
());

171 i‡(
s
 !
ªtúed_fd
)

172 
	`˛o£
 ();

173 
	`add_ªc⁄√˘_timî
 ();

175 
	}
}

177 
	gzmq
::
t˝_c⁄√˘î_t
::
	$add_ªc⁄√˘_timî
()

179 
rc_ivl
 = 
	`gë_√w_ªc⁄√˘_ivl
();

180 
	`add_timî
 (
rc_ivl
, 
ªc⁄√˘_timî_id
);

181 
sockë
->
	`evít_c⁄√˘_ªåõd
 (
ídpoöt
, 
rc_ivl
);

182 
timî_°¨ãd
 = 
åue
;

183 
	}
}

185 
	gzmq
::
t˝_c⁄√˘î_t
::
	$gë_√w_ªc⁄√˘_ivl
 ()

188 
this_öãrvÆ
 = 
cuºít_ªc⁄√˘_ivl
 +

189 (
	`gíî©e_øndom
 (Ë% 
›ti⁄s
.
ªc⁄√˘_ivl
);

193 i‡(
›ti⁄s
.
ªc⁄√˘_ivl_max
 > 0 &&

194 
›ti⁄s
.
ªc⁄√˘_ivl_max
 > o±i⁄s.
ªc⁄√˘_ivl
) {

197 
cuºít_ªc⁄√˘_ivl
 = current_reconnect_ivl * 2;

198 if(
cuºít_ªc⁄√˘_ivl
 >
›ti⁄s
.
ªc⁄√˘_ivl_max
) {

199 
cuºít_ªc⁄√˘_ivl
 = 
›ti⁄s
.
ªc⁄√˘_ivl_max
;

202  
this_öãrvÆ
;

203 
	}
}

205 
	gzmq
::
t˝_c⁄√˘î_t
::
	$›í
 ()

207 
	`zmq_as£π
 (
s
 =
ªtúed_fd
);

210 
s
 = 
	`›í_sockë
 (
addr
->
ªsﬁved
.
t˝_addr
->
	`Ámûy
 (), 
SOCK_STREAM
, 
IPPROTO_TCP
);

211 #ifde‡
ZMQ_HAVE_WINDOWS


212 i‡(
s
 =
INVALID_SOCKET
) {

213 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

217 i‡(
s
 == -1)

223 i‡(
addr
->
ªsﬁved
.
t˝_addr
->
	`Ámûy
 (Ë=
AF_INET6
)

224 
	`íabÀ_ùv4_m≠pög
 (
s
);

227 
	`unblock_sockë
 (
s
);

230 i‡(
›ti⁄s
.
¢dbuf
 != 0)

231 
	`£t_t˝_£nd_buf„r
 (
s
, 
›ti⁄s
.
¢dbuf
);

232 i‡(
›ti⁄s
.
rcvbuf
 != 0)

233 
	`£t_t˝_ª˚ive_buf„r
 (
s
, 
›ti⁄s
.
rcvbuf
);

236 
rc
 = ::
	`c⁄√˘
 (

237 
s
, 
addr
->
ªsﬁved
.
t˝_addr
->
	`addr
 (),

238 
addr
->
ªsﬁved
.
t˝_addr
->
	`addæí
 ());

241 i‡(
rc
 == 0)

246 #ifde‡
ZMQ_HAVE_WINDOWS


247 c⁄° 
îr‹_code
 = 
	`WSAGëLa°Eº‹
 ();

248 i‡(
îr‹_code
 =
WSAEINPROGRESS
 ||Éº‹_codê=
WSAEWOULDBLOCK
)

249 
î∫o
 = 
EINPROGRESS
;

251 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
îr‹_code
);

253 i‡(
î∫o
 =
EINTR
)

254 
î∫o
 = 
EINPROGRESS
;

257 
	}
}

259 
	gzmq
::
fd_t
 
zmq
::
t˝_c⁄√˘î_t
::
	$c⁄√˘
 ()

262 
îr
 = 0;

263 #i‡
deföed
 
ZMQ_HAVE_HPUX


264 
Àn
 =  (
îr
);

266 
sockÀn_t
 
Àn
 =  (
îr
);

269 
rc
 = 
	`gësock›t
 (
s
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
);

273 #ifde‡
ZMQ_HAVE_WINDOWS


274 
	`zmq_as£π
 (
rc
 == 0);

275 i‡(
îr
 != 0) {

276 i‡(
îr
 =
WSAECONNREFUSED
 ||

277 
îr
 =
WSAETIMEDOUT
 ||

278 
îr
 =
WSAECONNABORTED
 ||

279 
îr
 =
WSAEHOSTUNREACH
 ||

280 
îr
 =
WSAENETUNREACH
 ||

281 
îr
 =
WSAENETDOWN
 ||

282 
îr
 =
WSAEINVAL
)

283  
ªtúed_fd
;

284 
	`wß_as£π_no
 (
îr
);

290 i‡(
rc
 == -1)

291 
îr
 = 
î∫o
;

292 i‡(
îr
 != 0) {

293 
î∫o
 = 
îr
;

294 
	`î∫o_as£π
 (

295 
î∫o
 =
ECONNREFUSED
 ||

296 
î∫o
 =
ECONNRESET
 ||

297 
î∫o
 =
ETIMEDOUT
 ||

298 
î∫o
 =
EHOSTUNREACH
 ||

299 
î∫o
 =
ENETUNREACH
 ||

300 
î∫o
 =
ENETDOWN
 ||

301 
î∫o
 =
EINVAL
);

302  
ªtúed_fd
;

307 
fd_t
 
ªsu…
 = 
s
;

308 
s
 = 
ªtúed_fd
;

309  
ªsu…
;

310 
	}
}

312 
	gzmq
::
t˝_c⁄√˘î_t
::
	$˛o£
 ()

314 
	`zmq_as£π
 (
s
 !
ªtúed_fd
);

315 #ifde‡
ZMQ_HAVE_WINDOWS


316 
rc
 = 
	`˛o£sockë
 (
s
);

317 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

319 
rc
 = ::
	`˛o£
 (
s
);

320 
	`î∫o_as£π
 (
rc
 == 0);

322 
sockë
->
	`evít_˛o£d
 (
ídpoöt
, 
s
);

323 
s
 = 
ªtúed_fd
;

324 
	}
}

	@tcp_connecter.hpp

20 #i‚de‡
__TCP_CONNECTER_HPP_INCLUDED__


21 
	#__TCP_CONNECTER_HPP_INCLUDED__


	)

23 
	~"fd.hµ
"

24 
	~"own.hµ
"

25 
	~"°döt.hµ
"

26 
	~"io_obje˘.hµ
"

27 
	~"../ö˛ude/zmq.h
"

29 
«me•a˚
 
	gzmq


32 
˛ass
 
	gio_thªad_t
;

33 
˛ass
 
	g£ssi⁄_ba£_t
;

34 
	gaddªss_t
;

36 
˛ass
 
	gt˝_c⁄√˘î_t
 : 
public
 
own_t
,Öubli¯
	gio_obje˘_t


38 
	gpublic
:

42 
t˝_c⁄√˘î_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

43 
zmq
::
£ssi⁄_ba£_t
 *
£ssi⁄_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
,

44 c⁄° 
addªss_t
 *
addr_
, 
boﬁ
 
dñayed_°¨t_
);

45 ~
t˝_c⁄√˘î_t
 ();

47 
	g¥iv©e
:

50 íum {
ªc⁄√˘_timî_id
 = 1};

53 
¥o˚ss_∂ug
 ();

54 
¥o˚ss_ãrm
 (
lögî_
);

57 
ö_evít
 ();

58 
out_evít
 ();

59 
timî_evít
 (
id_
);

62 
°¨t_c⁄√˘ög
 ();

65 
add_ªc⁄√˘_timî
();

70 
gë_√w_ªc⁄√˘_ivl
 ();

75 
›í
 ();

78 
˛o£
 ();

82 
fd_t
 
c⁄√˘
 ();

85 c⁄° 
addªss_t
 *
	gaddr
;

88 
fd_t
 
	gs
;

91 
h™dÀ_t
 
	gh™dÀ
;

95 
boﬁ
 
	gh™dÀ_vÆid
;

98 c⁄° 
boﬁ
 
	gdñayed_°¨t
;

101 
boﬁ
 
	gtimî_°¨ãd
;

104 
	gzmq
::
£ssi⁄_ba£_t
 *
£ssi⁄
;

107 
	gcuºít_ªc⁄√˘_ivl
;

110 
	g°d
::
°rög
 
ídpoöt
;

113 
	gzmq
::
sockë_ba£_t
 *
sockë
;

115 
t˝_c⁄√˘î_t
 (constÅcp_connecter_t&);

116 c⁄° 
	gt˝_c⁄√˘î_t
 &
	g›î©‹
 = (c⁄° 
t˝_c⁄√˘î_t
&);

	@tcp_listener.cpp

20 
	~<√w
>

22 
	~<°rög
>

24 
	~"∂©f‹m.hµ
"

25 
	~"t˝_li°íî.hµ
"

26 
	~"°ªam_ígöe.hµ
"

27 
	~"io_thªad.hµ
"

28 
	~"£ssi⁄_ba£.hµ
"

29 
	~"c⁄fig.hµ
"

30 
	~"îr.hµ
"

31 
	~"ù.hµ
"

32 
	~"t˝.hµ
"

33 
	~"sockë_ba£.hµ
"

35 #ifde‡
ZMQ_HAVE_WINDOWS


36 
	~"wödows.hµ
"

38 
	~<uni°d.h
>

39 
	~<sys/sockë.h
>

40 
	~<¨∑/öë.h
>

41 
	~<√töë/t˝.h
>

42 
	~<√töë/ö.h
>

43 
	~<√tdb.h
>

44 
	~<f˙é.h
>

47 #ifde‡
ZMQ_HAVE_OPENVMS


48 
	~<io˘l.h
>

51 
	gzmq
::
t˝_li°íî_t
::
	$t˝_li°íî_t
 (
io_thªad_t
 *
io_thªad_
,

52 
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
) :

53 
	`own_t
 (
io_thªad_
, 
›ti⁄s_
),

54 
	`io_obje˘_t
 (
io_thªad_
),

55 
	`s
 (
ªtúed_fd
),

56 
	$sockë
 (
sockë_
)

58 
	}
}

60 
	gzmq
::
t˝_li°íî_t
::~
	$t˝_li°íî_t
 ()

62 
	`zmq_as£π
 (
s
 =
ªtúed_fd
);

63 
	}
}

65 
	gzmq
::
t˝_li°íî_t
::
	$¥o˚ss_∂ug
 ()

68 
h™dÀ
 = 
	`add_fd
 (
s
);

69 
	`£t_pﬁlö
 (
h™dÀ
);

70 
	}
}

72 
	gzmq
::
t˝_li°íî_t
::
	$¥o˚ss_ãrm
 (
lögî_
)

74 
	`rm_fd
 (
h™dÀ
);

75 
	`˛o£
 ();

76 
own_t
::
	`¥o˚ss_ãrm
 (
lögî_
);

77 
	}
}

79 
	gzmq
::
t˝_li°íî_t
::
	$ö_evít
 ()

81 
fd_t
 
fd
 = 
	`ac˚±
 ();

85 i‡(
fd
 =
ªtúed_fd
) {

86 
sockë
->
	`evít_ac˚±_Áûed
 (
ídpoöt
, 
	`zmq_î∫o
());

90 
	`tu√_t˝_sockë
 (
fd
);

91 
	`tu√_t˝_kì∑lives
 (
fd
, 
›ti⁄s
.
t˝_kì∑live
, o±i⁄s.
t˝_kì∑live_˙t
, o±i⁄s.
t˝_kì∑live_idÀ
, o±i⁄s.
t˝_kì∑live_ötvl
);

94 
°ªam_ígöe_t
 *
ígöe
 = 
	`√w
 (
°d
::
nŸhrow
)

95 
	`°ªam_ígöe_t
 (
fd
, 
›ti⁄s
, 
ídpoöt
);

96 
	`Æloc_as£π
 (
ígöe
);

100 
io_thªad_t
 *
io_thªad
 = 
	`choo£_io_thªad
 (
›ti⁄s
.
afföôy
);

101 
	`zmq_as£π
 (
io_thªad
);

104 
£ssi⁄_ba£_t
 *
£ssi⁄
 = sessi⁄_ba£_t::
	`¸óã
 (
io_thªad
, 
Ál£
, 
sockë
,

105 
›ti⁄s
, 
NULL
);

106 
	`î∫o_as£π
 (
£ssi⁄
);

107 
£ssi⁄
->
	`öc_£qnum
 ();

108 
	`œunch_chûd
 (
£ssi⁄
);

109 
	`£nd_©èch
 (
£ssi⁄
, 
ígöe
, 
Ál£
);

110 
sockë
->
	`evít_ac˚±ed
 (
ídpoöt
, 
fd
);

111 
	}
}

113 
	gzmq
::
t˝_li°íî_t
::
	$˛o£
 ()

115 
	`zmq_as£π
 (
s
 !
ªtúed_fd
);

116 #ifde‡
ZMQ_HAVE_WINDOWS


117 
rc
 = 
	`˛o£sockë
 (
s
);

118 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

120 
rc
 = ::
	`˛o£
 (
s
);

121 
	`î∫o_as£π
 (
rc
 == 0);

123 
sockë
->
	`evít_˛o£d
 (
ídpoöt
, 
s
);

124 
s
 = 
ªtúed_fd
;

125 
	}
}

127 
	gzmq
::
t˝_li°íî_t
::
	$gë_addªss
 (
°d
::
°rög
 &
addr_
)

130 
sockaddr_°‹age
 
ss
;

131 #ifde‡
ZMQ_HAVE_HPUX


132 
¶
 =  (
ss
);

134 
sockÀn_t
 
¶
 =  (
ss
);

136 
rc
 = 
	`gësock«me
 (
s
, (
sockaddr
 *Ë&
ss
, &
¶
);

138 i‡(
rc
 != 0) {

139 
addr_
.
	`˛ór
 ();

140  
rc
;

143 
t˝_addªss_t
 
	`addr
 ((
sockaddr
 *Ë&
ss
, 
¶
);

144  
addr
.
	`to_°rög
 (
addr_
);

145 
	}
}

147 
	gzmq
::
t˝_li°íî_t
::
	$£t_addªss
 (c⁄° *
addr_
)

150 
rc
 = 
addªss
.
	`ªsﬁve
 (
addr_
, 
åue
, 
›ti⁄s
.
ùv6
);

151 i‡(
rc
 != 0)

155 
s
 = 
	`›í_sockë
 (
addªss
.
	`Ámûy
 (), 
SOCK_STREAM
, 
IPPROTO_TCP
);

156 #ifde‡
ZMQ_HAVE_WINDOWS


157 i‡(
s
 =
INVALID_SOCKET
)

158 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

162 i‡(
addªss
.
	`Ámûy
 (Ë=
AF_INET6


163 && 
î∫o
 =
EAFNOSUPPORT


164 && 
›ti⁄s
.
ùv6
) {

165 
rc
 = 
addªss
.
	`ªsﬁve
 (
addr_
, 
åue
,Årue);

166 i‡(
rc
 != 0)

167  
rc
;

168 
s
 = ::
	`sockë
 (
addªss
.
	`Ámûy
 (), 
SOCK_STREAM
, 
IPPROTO_TCP
);

171 #ifde‡
ZMQ_HAVE_WINDOWS


172 i‡(
s
 =
INVALID_SOCKET
) {

173 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

176 #i‡!
deföed
 
_WIN32_WCE


178 
BOOL
 
brc
 = 
	`SëH™dÀInf‹m©i⁄
 ((
HANDLE
Ë
s
, 
HANDLE_FLAG_INHERIT
, 0);

179 
	`wö_as£π
 (
brc
);

182 i‡(
s
 == -1)

188 i‡(
addªss
.
	`Ámûy
 (Ë=
AF_INET6
)

189 
	`íabÀ_ùv4_m≠pög
 (
s
);

192 i‡(
›ti⁄s
.
¢dbuf
 != 0)

193 
	`£t_t˝_£nd_buf„r
 (
s
, 
›ti⁄s
.
¢dbuf
);

194 i‡(
›ti⁄s
.
rcvbuf
 != 0)

195 
	`£t_t˝_ª˚ive_buf„r
 (
s
, 
›ti⁄s
.
rcvbuf
);

198 
Êag
 = 1;

199 #ifde‡
ZMQ_HAVE_WINDOWS


200 
rc
 = 
	`£tsock›t
 (
s
, 
SOL_SOCKET
, 
SO_EXCLUSIVEADDRUSE
,

201 (c⁄° *Ë&
Êag
,  ());

202 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

204 
rc
 = 
	`£tsock›t
 (
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
Êag
,  ());

205 
	`î∫o_as£π
 (
rc
 == 0);

208 
addªss
.
	`to_°rög
 (
ídpoöt
);

211 
rc
 = 
	`böd
 (
s
, 
addªss
.
	`addr
 (),áddªss.
	`addæí
 ());

212 #ifde‡
ZMQ_HAVE_WINDOWS


213 i‡(
rc
 =
SOCKET_ERROR
) {

214 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

215 
îr‹
;

218 i‡(
rc
 != 0)

219 
îr‹
;

223 
rc
 = 
	`li°í
 (
s
, 
›ti⁄s
.
backlog
);

224 #ifde‡
ZMQ_HAVE_WINDOWS


225 i‡(
rc
 =
SOCKET_ERROR
) {

226 
î∫o
 = 
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

227 
îr‹
;

230 i‡(
rc
 != 0)

231 
îr‹
;

234 
sockë
->
	`evít_li°íög
 (
ídpoöt
, 
s
);

237 
îr‹
:

238 
îr
 = 
î∫o
;

239 
	`˛o£
 ();

240 
î∫o
 = 
îr
;

242 
	}
}

244 
	gzmq
::
fd_t
 
zmq
::
t˝_li°íî_t
::
	$ac˚±
 ()

249 
	`zmq_as£π
 (
s
 !
ªtúed_fd
);

251 
sockaddr_°‹age
 
ss
;

252 
	`mem£t
 (&
ss
, 0,  (ss));

253 #ifde‡
ZMQ_HAVE_HPUX


254 
ss_Àn
 =  (
ss
);

256 
sockÀn_t
 
ss_Àn
 =  (
ss
);

258 
fd_t
 
sock
 = ::
	`ac˚±
 (
s
, (
sockaddr
 *Ë&
ss
, &
ss_Àn
);

260 #ifde‡
ZMQ_HAVE_WINDOWS


261 i‡(
sock
 =
INVALID_SOCKET
) {

262 
	`wß_as£π
 (
	`WSAGëLa°Eº‹
 (Ë=
WSAEWOULDBLOCK
 ||

263 
	`WSAGëLa°Eº‹
 (Ë=
WSAECONNRESET
 ||

264 
	`WSAGëLa°Eº‹
 (Ë=
WSAEMFILE
 ||

265 
	`WSAGëLa°Eº‹
 (Ë=
WSAENOBUFS
);

266  
ªtúed_fd
;

268 #i‡!
deföed
 
_WIN32_WCE


270 
BOOL
 
brc
 = 
	`SëH™dÀInf‹m©i⁄
 ((
HANDLE
Ë
sock
, 
HANDLE_FLAG_INHERIT
, 0);

271 
	`wö_as£π
 (
brc
);

274 i‡(
sock
 == -1) {

275 
	`î∫o_as£π
 (
î∫o
 =
EAGAIN
 ||Éºnÿ=
EWOULDBLOCK
 ||

276 
î∫o
 =
EINTR
 ||Éºnÿ=
ECONNABORTED
 ||Éºnÿ=
EPROTO
 ||

277 
î∫o
 =
ENOBUFS
 ||Éºnÿ=
ENOMEM
 ||Éºnÿ=
EMFILE
 ||

278 
î∫o
 =
ENFILE
);

279  
ªtúed_fd
;

283 i‡(!
›ti⁄s
.
t˝_ac˚±_fûãrs
.
	`em±y
 ()) {

284 
boﬁ
 
m©ched
 = 
Ál£
;

285 
›ti⁄s_t
::
t˝_ac˚±_fûãrs_t
::
size_ty≥
 
i
 = 0; i !
›ti⁄s
.
t˝_ac˚±_fûãrs
.
	`size
 (); ++i) {

286 i‡(
›ti⁄s
.
t˝_ac˚±_fûãrs
[
i
].
	`m©ch_addªss
 ((
sockaddr
 *Ë&
ss
, 
ss_Àn
)) {

287 
m©ched
 = 
åue
;

291 i‡(!
m©ched
) {

292 #ifde‡
ZMQ_HAVE_WINDOWS


293 
rc
 = 
	`˛o£sockë
 (
sock
);

294 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

296 
rc
 = ::
	`˛o£
 (
sock
);

297 
	`î∫o_as£π
 (
rc
 == 0);

299  
ªtúed_fd
;

303  
sock
;

304 
	}
}

	@tcp_listener.hpp

20 #i‚de‡
__ZMQ_TCP_LISTENER_HPP_INCLUDED__


21 
	#__ZMQ_TCP_LISTENER_HPP_INCLUDED__


	)

23 
	~"fd.hµ
"

24 
	~"own.hµ
"

25 
	~"°döt.hµ
"

26 
	~"io_obje˘.hµ
"

27 
	~"t˝_addªss.hµ
"

28 
	~"../ö˛ude/zmq.h
"

30 
«me•a˚
 
	gzmq


33 
˛ass
 
	gio_thªad_t
;

34 
˛ass
 
	gsockë_ba£_t
;

36 
˛ass
 
	gt˝_li°íî_t
 : 
public
 
own_t
,Öubli¯
	gio_obje˘_t


38 
	gpublic
:

40 
t˝_li°íî_t
 (
zmq
::
io_thªad_t
 *
io_thªad_
,

41 
zmq
::
sockë_ba£_t
 *
sockë_
, c⁄° 
›ti⁄s_t
 &
›ti⁄s_
);

42 ~
t˝_li°íî_t
 ();

45 
£t_addªss
 (c⁄° *
addr_
);

48 
gë_addªss
 (
°d
::
°rög
 &
addr_
);

50 
	g¥iv©e
:

53 
¥o˚ss_∂ug
 ();

54 
¥o˚ss_ãrm
 (
lögî_
);

57 
ö_evít
 ();

60 
˛o£
 ();

66 
fd_t
 
ac˚±
 ();

69 
t˝_addªss_t
 
	gaddªss
;

72 
fd_t
 
	gs
;

75 
h™dÀ_t
 
	gh™dÀ
;

78 
	gzmq
::
sockë_ba£_t
 *
sockë
;

81 
	g°d
::
°rög
 
ídpoöt
;

83 
t˝_li°íî_t
 (constÅcp_listener_t&);

84 c⁄° 
	gt˝_li°íî_t
 &
	g›î©‹
 = (c⁄° 
t˝_li°íî_t
&);

	@thread.cpp

20 
	~"thªad.hµ
"

21 
	~"îr.hµ
"

22 
	~"∂©f‹m.hµ
"

24 #ifde‡
ZMQ_HAVE_WINDOWS


28 #i‡
deföed
 
_WIN32_WCE


29 
DWORD
 
thªad_routöe
 (
LPVOID
 
¨g_
)

31 
__°dˇŒ
 
thªad_routöe
 (*
¨g_
)

34 
zmq
::
thªad_t
 *
£lf
 = (zmq::thªad_t*Ë
¨g_
;

35 
£lf
->
t‚
 (£lf->
¨g
);

40 
zmq
::
thªad_t
::
	$°¨t
 (
thªad_‚
 *
t‚_
, *
¨g_
)

42 
t‚
 = 
t‚_
;

43 
¨g
 =
¨g_
;

44 #i‡
deföed
 
_WIN32_WCE


45 
des¸ùt‹
 = (
HANDLE
Ë
	`Cª©eThªad
 (
NULL
, 0,

46 &::
thªad_routöe
, 
this
, 0 , 
NULL
);

48 
des¸ùt‹
 = (
HANDLE
Ë
	`_begöthªadex
 (
NULL
, 0,

49 &::
thªad_routöe
, 
this
, 0 , 
NULL
);

51 
	`wö_as£π
 (
des¸ùt‹
 !
NULL
);

52 
	}
}

54 
zmq
::
thªad_t
::
	$°›
 ()

56 
DWORD
 
rc
 = 
	`WaôF‹SögÀObje˘
 (
des¸ùt‹
, 
INFINITE
);

57 
	`wö_as£π
 (
rc
 !
WAIT_FAILED
);

58 
BOOL
 
rc2
 = 
	`Clo£H™dÀ
 (
des¸ùt‹
);

59 
	`wö_as£π
 (
rc2
 != 0);

60 
	}
}

64 
	~<sig«l.h
>

68 *
thªad_routöe
 (*
¨g_
)

70 #i‡!
deföed
 
ZMQ_HAVE_OPENVMS
 && !deföed 
ZMQ_HAVE_ANDROID


73 
sig£t_t
 
sig«l_£t
;

74 
rc
 = 
sigfûl£t
 (&
sig«l_£t
);

75 
î∫o_as£π
 (
rc
 == 0);

76 
rc
 = 
±hªad_sigmask
 (
SIG_BLOCK
, &
sig«l_£t
, 
NULL
);

77 
posix_as£π
 (
rc
);

80 
zmq
::
thªad_t
 *
£lf
 = (zmq::thªad_t*Ë
¨g_
;

81 
£lf
->
t‚
 (£lf->
¨g
);

82  
NULL
;

86 
zmq
::
thªad_t
::
	$°¨t
 (
thªad_‚
 *
t‚_
, *
¨g_
)

88 
t‚
 = 
t‚_
;

89 
¨g
 =
¨g_
;

90 
rc
 = 
	`±hªad_¸óã
 (&
des¸ùt‹
, 
NULL
, 
thªad_routöe
, 
this
);

91 
	`posix_as£π
 (
rc
);

92 
	}
}

94 
zmq
::
thªad_t
::
	$°›
 ()

96 
rc
 = 
	`±hªad_joö
 (
des¸ùt‹
, 
NULL
);

97 
	`posix_as£π
 (
rc
);

98 
	}
}

	@thread.hpp

20 #i‚de‡
__ZMQ_THREAD_HPP_INCLUDED__


21 
	#__ZMQ_THREAD_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

25 #ifde‡
ZMQ_HAVE_WINDOWS


26 
	~"wödows.hµ
"

28 
	~<±hªad.h
>

31 
«me•a˚
 
	gzmq


34 (
	gthªad_‚
) (*);

43 ˛as†
	cthªad_t


45 
	gpublic
:

47 
ölöe
 
thªad_t
 ()

53 
°¨t
 (
thªad_‚
 *
t‚_
, *
¨g_
);

56 
°›
 ();

60 
thªad_‚
 *
	gt‚
;

61 *
	g¨g
;

63 
	g¥iv©e
:

65 #ifde‡
ZMQ_HAVE_WINDOWS


66 
HANDLE
 
des¸ùt‹
;

68 
±hªad_t
 
	gdes¸ùt‹
;

71 
thªad_t
 (constÅhread_t&);

72 c⁄° 
	gthªad_t
 &
	g›î©‹
 = (c⁄° 
thªad_t
&);

	@trie.cpp

20 
	~<°dlib.h
>

22 
	~<√w
>

23 
	~<Æg‹ôhm
>

25 
	~"∂©f‹m.hµ
"

26 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


27 
	~"wödows.hµ
"

30 
	~"îr.hµ
"

31 
	~"åõ.hµ
"

33 
	gzmq
::
åõ_t
::
	$åõ_t
 () :

34 
	`ªf˙t
 (0),

35 
	`mö
 (0),

36 
	`cou¡
 (0),

37 
	$live_nodes
 (0)

39 
	}
}

41 
	gzmq
::
åõ_t
::~
	$åõ_t
 ()

43 i‡(
cou¡
 == 1) {

44 
	`zmq_as£π
 (
√xt
.
node
);

45 
dñëe
 
√xt
.
node
;

46 
√xt
.
node
 = 0;

49 i‡(
cou¡
 > 1) {

50 
i
 = 0; i !
cou¡
; ++i)

51 
dñëe
 
√xt
.
èbÀ
 [
i
];

52 
	`‰ì
 (
√xt
.
èbÀ
);

54 
	}
}

56 
boﬁ
 
	gzmq
::
åõ_t
::
	$add
 (*
¥efix_
, 
size_t
 
size_
)

59 i‡(!
size_
) {

60 ++
ªf˙t
;

61  
ªf˙t
 == 1;

64 
c
 = *
¥efix_
;

65 i‡(
c
 < 
mö
 || c >mö + 
cou¡
) {

69 i‡(!
cou¡
) {

70 
mö
 = 
c
;

71 
cou¡
 = 1;

72 
√xt
.
node
 = 
NULL
;

75 i‡(
cou¡
 == 1) {

76 
ﬁdc
 = 
mö
;

77 
åõ_t
 *
ﬁdp
 = 
√xt
.
node
;

78 
cou¡
 = (
mö
 < 
c
 ? c - min : min - c) + 1;

79 
√xt
.
èbÀ
 = (
åõ_t
**)

80 
	`mÆloc
 ( (
åõ_t
*Ë* 
cou¡
);

81 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

82 
i
 = 0; i !
cou¡
; ++i)

83 
√xt
.
èbÀ
 [
i
] = 0;

84 
mö
 = 
°d
::
	`mö
 (mö, 
c
);

85 
√xt
.
èbÀ
 [
ﬁdc
 - 
mö
] = 
ﬁdp
;

88 i‡(
mö
 < 
c
) {

90 
ﬁd_cou¡
 = 
cou¡
;

91 
cou¡
 = 
c
 - 
mö
 + 1;

92 
√xt
.
èbÀ
 = (
åõ_t
**Ë
	`ªÆloc
 ((*)Çext.table,

93  (
åõ_t
*Ë* 
cou¡
);

94 
	`zmq_as£π
 (
√xt
.
èbÀ
);

95 
i
 = 
ﬁd_cou¡
; i !
cou¡
; i++)

96 
√xt
.
èbÀ
 [
i
] = 
NULL
;

101 
ﬁd_cou¡
 = 
cou¡
;

102 
cou¡
 = (
mö
 + 
ﬁd_cou¡
Ë- 
c
;

103 
√xt
.
èbÀ
 = (
åõ_t
**Ë
	`ªÆloc
 ((*)Çext.table,

104  (
åõ_t
*Ë* 
cou¡
);

105 
	`zmq_as£π
 (
√xt
.
èbÀ
);

106 
	`memmove
 (
√xt
.
èbÀ
 + 
mö
 - 
c
,Çext.table,

107 
ﬁd_cou¡
 *  (
åõ_t
*));

108 
i
 = 0; i !
mö
 - 
c
; i++)

109 
√xt
.
èbÀ
 [
i
] = 
NULL
;

110 
mö
 = 
c
;

115 i‡(
cou¡
 == 1) {

116 i‡(!
√xt
.
node
) {

117 
√xt
.
node
 = 
	`√w
 (
°d
::
nŸhrow
Ë
åõ_t
;

118 
	`Æloc_as£π
 (
√xt
.
node
);

119 ++
live_nodes
;

120 
	`zmq_as£π
 (
live_nodes
 == 1);

122  
√xt
.
node
->
	`add
 (
¥efix_
 + 1, 
size_
 - 1);

125 i‡(!
√xt
.
èbÀ
 [
c
 - 
mö
]) {

126 
√xt
.
èbÀ
 [
c
 - 
mö
] = 
	`√w
 (
°d
::
nŸhrow
Ë
åõ_t
;

127 
	`Æloc_as£π
 (
√xt
.
èbÀ
 [
c
 - 
mö
]);

128 ++
live_nodes
;

129 
	`zmq_as£π
 (
live_nodes
 > 1);

131  
√xt
.
èbÀ
 [
c
 - 
mö
]->
	`add
 (
¥efix_
 + 1, 
size_
 - 1);

133 
	}
}

135 
boﬁ
 
	gzmq
::
åõ_t
::
	$rm
 (*
¥efix_
, 
size_t
 
size_
)

138 i‡(!
size_
) {

139 i‡(!
ªf˙t
)

140  
Ál£
;

141 
ªf˙t
--;

142  
ªf˙t
 == 0;

144 
c
 = *
¥efix_
;

145 i‡(!
cou¡
 || 
c
 < 
mö
 || c >= min + count)

146  
Ál£
;

148 
åõ_t
 *
√xt_node
 =

149 
cou¡
 =1 ? 
√xt
.
node
 :Çext.
èbÀ
 [
c
 - 
mö
];

151 i‡(!
√xt_node
)

152  
Ál£
;

154 
boﬁ
 
ªt
 = 
√xt_node
->
	`rm
 (
¥efix_
 + 1, 
size_
 - 1);

157 i‡(
√xt_node
->
	`is_ªdund™t
 ()) {

158 
dñëe
 
√xt_node
;

159 
	`zmq_as£π
 (
cou¡
 > 0);

161 i‡(
cou¡
 == 1) {

163 
√xt
.
node
 = 0;

164 
cou¡
 = 0;

165 --
live_nodes
;

166 
	`zmq_as£π
 (
live_nodes
 == 0);

169 
√xt
.
èbÀ
 [
c
 - 
mö
] = 0;

170 
	`zmq_as£π
 (
live_nodes
 > 1);

171 --
live_nodes
;

174 i‡(
live_nodes
 == 1) {

177 
åõ_t
 *
node
 = 0;

181 i‡(
c
 =
mö
) {

184 
node
 = 
√xt
.
èbÀ
 [
cou¡
 - 1];

185 
mö
 +
cou¡
 - 1;

188 i‡(
c
 =
mö
 + 
cou¡
 - 1) {

191 
node
 = 
√xt
.
èbÀ
 [0];

193 
	`zmq_as£π
 (
node
);

194 
	`‰ì
 (
√xt
.
èbÀ
);

195 
√xt
.
node
 =Çode;

196 
cou¡
 = 1;

199 i‡(
c
 =
mö
) {

203 
√w_mö
 = 
mö
;

204 
i
 = 1; i < 
cou¡
; ++i) {

205 i‡(
√xt
.
èbÀ
 [
i
]) {

206 
√w_mö
 = 
i
 + 
mö
;

210 
	`zmq_as£π
 (
√w_mö
 !
mö
);

212 
åõ_t
 **
ﬁd_èbÀ
 = 
√xt
.
èbÀ
;

213 
	`zmq_as£π
 (
√w_mö
 > 
mö
);

214 
	`zmq_as£π
 (
cou¡
 > 
√w_mö
 - 
mö
);

216 
cou¡
 = cou¡ - (
√w_mö
 - 
mö
);

217 
√xt
.
èbÀ
 = (
åõ_t
**Ë
	`mÆloc
 ( (åõ_t*Ë* 
cou¡
);

218 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

220 
	`memmove
 (
√xt
.
èbÀ
, 
ﬁd_èbÀ
 + (
√w_mö
 - 
mö
),

221  (
åõ_t
*Ë* 
cou¡
);

222 
	`‰ì
 (
ﬁd_èbÀ
);

224 
mö
 = 
√w_mö
;

227 i‡(
c
 =
mö
 + 
cou¡
 - 1) {

231 
√w_cou¡
 = 
cou¡
;

232 
i
 = 1; i < 
cou¡
; ++i) {

233 i‡(
√xt
.
èbÀ
 [
cou¡
 - 1 - 
i
]) {

234 
√w_cou¡
 = 
cou¡
 - 
i
;

238 
	`zmq_as£π
 (
√w_cou¡
 !
cou¡
);

239 
cou¡
 = 
√w_cou¡
;

241 
åõ_t
 **
ﬁd_èbÀ
 = 
√xt
.
èbÀ
;

242 
√xt
.
èbÀ
 = (
åõ_t
**Ë
	`mÆloc
 ( (åõ_t*Ë* 
cou¡
);

243 
	`Æloc_as£π
 (
√xt
.
èbÀ
);

245 
	`memmove
 (
√xt
.
èbÀ
, 
ﬁd_èbÀ
,  (
åõ_t
*Ë* 
cou¡
);

246 
	`‰ì
 (
ﬁd_èbÀ
);

250  
ªt
;

251 
	}
}

253 
boﬁ
 
	gzmq
::
åõ_t
::
	$check
 (*
d©a_
, 
size_t
 
size_
)

257 
åõ_t
 *
cuºít
 = 
this
;

258 
åue
) {

261 i‡(
cuºít
->
ªf˙t
)

262  
åue
;

265 i‡(!
size_
)

266  
Ál£
;

270 
c
 = *
d©a_
;

271 i‡(
c
 < 
cuºít
->
mö
 || c >cuºít->mö + cuºít->
cou¡
)

272  
Ál£
;

275 i‡(
cuºít
->
cou¡
 == 1)

276 
cuºít
 = cuºít->
√xt
.
node
;

278 
cuºít
 = cuºít->
√xt
.
èbÀ
 [
c
 - cuºít->
mö
];

279 i‡(!
cuºít
)

280  
Ál£
;

282 
d©a_
++;

283 
size_
--;

285 
	}
}

287 
	gzmq
::
åõ_t
::
≠∂y
 ((*
func_
Ë(*
d©a_
, 
size_t
 
size_
,

288 *
¨g_
), *arg_)

290 *
buff
 = 
NULL
;

291 
	`≠∂y_hñ≥r
 (&
buff
, 0, 0, 
func_
, 
¨g_
);

292 
	`‰ì
 (
buff
);

293 
	}
}

295 
	gzmq
::
åõ_t
::
≠∂y_hñ≥r
 (

296 **
buff_
, 
size_t
 
buffsize_
, size_à
maxbuffsize_
,

297 (*
func_
Ë(*
d©a_
, 
size_t
 
size_
, *
¨g_
), *arg_)

300 i‡(
ªf˙t
)

301 
	`func_
 (*
buff_
, 
buffsize_
, 
¨g_
);

304 i‡(
buffsize_
 >
maxbuffsize_
) {

305 
maxbuffsize_
 = 
buffsize_
 + 256;

306 *
buff_
 = (*Ë
	`ªÆloc
 (*buff_, 
maxbuffsize_
);

307 
	`zmq_as£π
 (*
buff_
);

311 i‡(
cou¡
 == 0)

315 i‡(
cou¡
 == 1) {

316 (*
buff_
Ë[
buffsize_
] = 
mö
;

317 
buffsize_
++;

318 
√xt
.
node
->
	`≠∂y_hñ≥r
 (
buff_
, 
buffsize_
, 
maxbuffsize_
, 
func_
, 
¨g_
);

323 
c
 = 0; c !
cou¡
; c++) {

324 (*
buff_
Ë[
buffsize_
] = 
mö
 + 
c
;

325 i‡(
√xt
.
èbÀ
 [
c
])

326 
√xt
.
èbÀ
 [
c
]->
	`≠∂y_hñ≥r
 (
buff_
, 
buffsize_
 + 1, 
maxbuffsize_
,

327 
func_
, 
¨g_
);

329 
	}
}

331 
boﬁ
 
	gzmq
::
åõ_t
::
	$is_ªdund™t
 () const

333  
ªf˙t
 =0 && 
live_nodes
 == 0;

334 
	}
}

	@trie.hpp

20 #i‚de‡
__ZMQ_TRIE_HPP_INCLUDED__


21 
	#__ZMQ_TRIE_HPP_INCLUDED__


	)

23 
	~<°ddef.h
>

25 
	~"°döt.hµ
"

27 
«me•a˚
 
	gzmq


30 ˛as†
	cåõ_t


32 
	gpublic
:

34 
åõ_t
 ();

35 ~
åõ_t
 ();

39 
boﬁ
 
add
 (*
¥efix_
, 
size_t
 
size_
);

43 
boﬁ
 
rm
 (*
¥efix_
, 
size_t
 
size_
);

46 
boﬁ
 
check
 (*
d©a_
, 
size_t
 
size_
);

49 
≠∂y
 ((*
func_
Ë(*
d©a_
, 
size_t
 
size_
,

50 *
¨g_
), *arg_);

52 
	g¥iv©e
:

54 
≠∂y_hñ≥r
 (

55 **
buff_
, 
size_t
 
buffsize_
, size_à
maxbuffsize_
,

56 (*
func_
Ë(*
d©a_
, 
size_t
 
size_
, *
¨g_
),

57 *
¨g_
);

58 
boﬁ
 
is_ªdund™t
 () const;

60 
uöt32_t
 
	gªf˙t
;

61 
	gmö
;

62 
	gcou¡
;

63 
	glive_nodes
;

65 
˛ass
 
åõ_t
 *
	gnode
;

66 
˛ass
 
åõ_t
 **
	gèbÀ
;

67 } 
	g√xt
;

69 
åõ_t
 (constÅrie_t&);

70 c⁄° 
	gåõ_t
 &
	g›î©‹
 = (c⁄° 
åõ_t
&);

	@v1_decoder.cpp

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

22 
	~<limôs
>

24 
	~"∂©f‹m.hµ
"

25 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


26 
	~"wödows.hµ
"

29 
	~"decodî.hµ
"

30 
	~"v1_decodî.hµ
"

31 
	~"likñy.hµ
"

32 
	~"wúe.hµ
"

33 
	~"îr.hµ
"

35 
	gzmq
::
v1_decodî_t
::
	$v1_decodî_t
 (
size_t
 
bufsize_
, 
öt64_t
 
maxmsgsize_
) :

36 
decodî_ba£_t
 <
v1_decodî_t
> (
bufsize_
),

37 
	$maxmsgsize
 (
maxmsgsize_
)

39 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

40 
	`î∫o_as£π
 (
rc
 == 0);

43 
	`√xt_°ï
 (
tmpbuf
, 1, &
v1_decodî_t
::
⁄e_byã_size_ªady
);

44 
	}
}

46 
	gzmq
::
v1_decodî_t
::~
	$v1_decodî_t
 ()

48 
rc
 = 
ö_¥ogªss
.
	`˛o£
 ();

49 
	`î∫o_as£π
 (
rc
 == 0);

50 
	}
}

52 
	gzmq
::
v1_decodî_t
::
	$⁄e_byã_size_ªady
 ()

57 i‡(*
tmpbuf
 == 0xff)

58 
	`√xt_°ï
 (
tmpbuf
, 8, &
v1_decodî_t
::
eight_byã_size_ªady
);

62 i‡(!*
tmpbuf
) {

63 
î∫o
 = 
EPROTO
;

67 i‡(
maxmsgsize
 >0 && (
öt64_t
Ë(*
tmpbuf
 - 1) > maxmsgsize) {

68 
î∫o
 = 
EMSGSIZE
;

75 
rc
 = 
ö_¥ogªss
.
	`öô_size
 (*
tmpbuf
 - 1);

76 i‡(
rc
 != 0) {

77 
	`î∫o_as£π
 (
î∫o
 =
ENOMEM
);

78 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

79 
	`î∫o_as£π
 (
rc
 == 0);

80 
î∫o
 = 
ENOMEM
;

84 
	`√xt_°ï
 (
tmpbuf
, 1, &
v1_decodî_t
::
Êags_ªady
);

87 
	}
}

89 
	gzmq
::
v1_decodî_t
::
	$eight_byã_size_ªady
 ()

93 c⁄° 
uöt64_t
 
∑ylﬂd_Àngth
 = 
	`gë_uöt64
 (
tmpbuf
);

96 i‡(
∑ylﬂd_Àngth
 == 0) {

97 
î∫o
 = 
EPROTO
;

102 i‡(
maxmsgsize
 >0 && 
∑ylﬂd_Àngth
 - 1 > (
uöt64_t
) maxmsgsize) {

103 
î∫o
 = 
EMSGSIZE
;

108 i‡(
∑ylﬂd_Àngth
 - 1 > 
°d
::
numîic_limôs
 <
size_t
>::
	`max
 ()) {

109 
î∫o
 = 
EMSGSIZE
;

113 c⁄° 
size_t
 
msg_size
 = 
°©ic_ˇ°
 <size_t> (
∑ylﬂd_Àngth
 - 1);

118 
rc
 = 
ö_¥ogªss
.
	`öô_size
 (
msg_size
);

119 i‡(
rc
 != 0) {

120 
	`î∫o_as£π
 (
î∫o
 =
ENOMEM
);

121 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

122 
	`î∫o_as£π
 (
rc
 == 0);

123 
î∫o
 = 
ENOMEM
;

127 
	`√xt_°ï
 (
tmpbuf
, 1, &
v1_decodî_t
::
Êags_ªady
);

129 
	}
}

131 
	gzmq
::
v1_decodî_t
::
	$Êags_ªady
 ()

134 
ö_¥ogªss
.
	`£t_Êags
 (
tmpbuf
 [0] & 
msg_t
::
m‹e
);

136 
	`√xt_°ï
 (
ö_¥ogªss
.
	`d©a
 (), in_¥ogªss.
	`size
 (),

137 &
v1_decodî_t
::
mesßge_ªady
);

140 
	}
}

142 
	gzmq
::
v1_decodî_t
::
	$mesßge_ªady
 ()

146 
	`√xt_°ï
 (
tmpbuf
, 1, &
v1_decodî_t
::
⁄e_byã_size_ªady
);

148 
	}
}

	@v1_decoder.hpp

20 #i‚de‡
__ZMQ_V1_DECODER_HPP_INCLUDED__


21 
	#__ZMQ_V1_DECODER_HPP_INCLUDED__


	)

23 
	~"decodî.hµ
"

25 
«me•a˚
 
	gzmq


29 
˛ass
 
	gv1_decodî_t
 : 
public
 
decodî_ba£_t
 <
v1_decodî_t
>

31 
public
:

33 
v1_decodî_t
 (
size_t
 
bufsize_
, 
öt64_t
 
maxmsgsize_
);

34 ~
v1_decodî_t
 ();

36 
vútuÆ
 
msg_t
 *
msg
 (Ë{  &
	gö_¥ogªss
; }

38 
	g¥iv©e
:

40 
⁄e_byã_size_ªady
 ();

41 
eight_byã_size_ªady
 ();

42 
Êags_ªady
 ();

43 
mesßge_ªady
 ();

45 
	gtmpbuf
 [8];

46 
msg_t
 
	gö_¥ogªss
;

48 
öt64_t
 
	gmaxmsgsize
;

50 
v1_decodî_t
 (const v1_decoder_t&);

51 
	g›î©‹
 = (c⁄° 
v1_decodî_t
&);

	@v1_encoder.cpp

20 
	~"ícodî.hµ
"

21 
	~"v1_ícodî.hµ
"

22 
	~"likñy.hµ
"

23 
	~"wúe.hµ
"

25 
	gzmq
::
v1_ícodî_t
::
	$v1_ícodî_t
 (
size_t
 
bufsize_
) :

26 
ícodî_ba£_t
 <
v1_ícodî_t
> (
bufsize_
)

29 
	`√xt_°ï
 (
NULL
, 0, &
v1_ícodî_t
::
mesßge_ªady
, 
åue
);

30 
	}
}

32 
	gzmq
::
v1_ícodî_t
::~
	$v1_ícodî_t
 ()

34 
	}
}

36 
zmq
::
v1_ícodî_t
::
	$size_ªady
 ()

39 
	`√xt_°ï
 (
ö_¥ogªss
->
	`d©a
 (), in_¥ogªss->
	`size
 (),

40 &
v1_ícodî_t
::
mesßge_ªady
, 
åue
);

41 
	}
}

43 
	gzmq
::
v1_ícodî_t
::
	$mesßge_ªady
 ()

46 
size_t
 
size
 = 
ö_¥ogªss
->
	`size
 ();

49 
size
++;

54 i‡(
size
 < 255) {

55 
tmpbuf
 [0] = (Ë
size
;

56 
tmpbuf
 [1] = (
ö_¥ogªss
->
	`Êags
 (Ë& 
msg_t
::
m‹e
);

57 
	`√xt_°ï
 (
tmpbuf
, 2, &
v1_ícodî_t
::
size_ªady
, 
Ál£
);

60 
tmpbuf
 [0] = 0xff;

61 
	`put_uöt64
 (
tmpbuf
 + 1, 
size
);

62 
tmpbuf
 [9] = (
ö_¥ogªss
->
	`Êags
 (Ë& 
msg_t
::
m‹e
);

63 
	`√xt_°ï
 (
tmpbuf
, 10, &
v1_ícodî_t
::
size_ªady
, 
Ál£
);

65 
	}
}

	@v1_encoder.hpp

20 #i‚de‡
__ZMQ_V1_ENCODER_HPP_INCLUDED__


21 
	#__ZMQ_V1_ENCODER_HPP_INCLUDED__


	)

23 
	~"ícodî.hµ
"

25 
«me•a˚
 
	gzmq


29 
˛ass
 
	gv1_ícodî_t
 : 
public
 
ícodî_ba£_t
 <
v1_ícodî_t
>

31 
public
:

33 
v1_ícodî_t
 (
size_t
 
bufsize_
);

34 ~
v1_ícodî_t
 ();

36 
	g¥iv©e
:

38 
size_ªady
 ();

39 
mesßge_ªady
 ();

41 
	gtmpbuf
 [10];

43 
v1_ícodî_t
 (const v1_encoder_t&);

44 c⁄° 
	gv1_ícodî_t
 &
	g›î©‹
 = (c⁄° 
v1_ícodî_t
&);

	@v2_decoder.cpp

20 
	~<°dlib.h
>

21 
	~<°rög.h
>

23 
	~"∂©f‹m.hµ
"

24 #ifde‡
ZMQ_HAVE_WINDOWS


25 
	~"wödows.hµ
"

28 
	~"v2_¥Ÿocﬁ.hµ
"

29 
	~"v2_decodî.hµ
"

30 
	~"likñy.hµ
"

31 
	~"wúe.hµ
"

32 
	~"îr.hµ
"

34 
	gzmq
::
v2_decodî_t
::
	$v2_decodî_t
 (
size_t
 
bufsize_
, 
öt64_t
 
maxmsgsize_
) :

35 
decodî_ba£_t
 <
v2_decodî_t
> (
bufsize_
),

36 
	`msg_Êags
 (0),

37 
	$maxmsgsize
 (
maxmsgsize_
)

39 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

40 
	`î∫o_as£π
 (
rc
 == 0);

43 
	`√xt_°ï
 (
tmpbuf
, 1, &
v2_decodî_t
::
Êags_ªady
);

44 
	}
}

46 
	gzmq
::
v2_decodî_t
::~
	$v2_decodî_t
 ()

48 
rc
 = 
ö_¥ogªss
.
	`˛o£
 ();

49 
	`î∫o_as£π
 (
rc
 == 0);

50 
	}
}

52 
	gzmq
::
v2_decodî_t
::
	$Êags_ªady
 ()

54 
msg_Êags
 = 0;

55 i‡(
tmpbuf
 [0] & 
v2_¥Ÿocﬁ_t
::
m‹e_Êag
)

56 
msg_Êags
 |
msg_t
::
m‹e
;

57 i‡(
tmpbuf
 [0] & 
v2_¥Ÿocﬁ_t
::
comm™d_Êag
)

58 
msg_Êags
 |
msg_t
::
comm™d
;

62 i‡(
tmpbuf
 [0] & 
v2_¥Ÿocﬁ_t
::
œrge_Êag
)

63 
	`√xt_°ï
 (
tmpbuf
, 8, &
v2_decodî_t
::
eight_byã_size_ªady
);

65 
	`√xt_°ï
 (
tmpbuf
, 1, &
v2_decodî_t
::
⁄e_byã_size_ªady
);

68 
	}
}

70 
	gzmq
::
v2_decodî_t
::
	$⁄e_byã_size_ªady
 ()

73 i‡(
maxmsgsize
 >= 0)

74 i‡(
	`u∆ikñy
 (
tmpbuf
 [0] > 
°©ic_ˇ°
 <
uöt64_t
> (
maxmsgsize
))) {

75 
î∫o
 = 
EMSGSIZE
;

82 
rc
 = 
ö_¥ogªss
.
	`öô_size
 (
tmpbuf
 [0]);

83 i‡(
	`u∆ikñy
 (
rc
)) {

84 
	`î∫o_as£π
 (
î∫o
 =
ENOMEM
);

85 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

86 
	`î∫o_as£π
 (
rc
 == 0);

87 
î∫o
 = 
ENOMEM
;

91 
ö_¥ogªss
.
	`£t_Êags
 (
msg_Êags
);

92 
	`√xt_°ï
 (
ö_¥ogªss
.
	`d©a
 (), in_¥ogªss.
	`size
 (),

93 &
v2_decodî_t
::
mesßge_ªady
);

96 
	}
}

98 
	gzmq
::
v2_decodî_t
::
	$eight_byã_size_ªady
 ()

102 c⁄° 
uöt64_t
 
msg_size
 = 
	`gë_uöt64
 (
tmpbuf
);

105 i‡(
maxmsgsize
 >= 0)

106 i‡(
	`u∆ikñy
 (
msg_size
 > 
°©ic_ˇ°
 <
uöt64_t
> (
maxmsgsize
))) {

107 
î∫o
 = 
EMSGSIZE
;

112 i‡(
	`u∆ikñy
 (
msg_size
 !
°©ic_ˇ°
 <
size_t
> (msg_size))) {

113 
î∫o
 = 
EMSGSIZE
;

120 
rc
 = 
ö_¥ogªss
.
	`öô_size
 (
°©ic_ˇ°
 <
size_t
> (
msg_size
));

121 i‡(
	`u∆ikñy
 (
rc
)) {

122 
	`î∫o_as£π
 (
î∫o
 =
ENOMEM
);

123 
rc
 = 
ö_¥ogªss
.
	`öô
 ();

124 
	`î∫o_as£π
 (
rc
 == 0);

125 
î∫o
 = 
ENOMEM
;

129 
ö_¥ogªss
.
	`£t_Êags
 (
msg_Êags
);

130 
	`√xt_°ï
 (
ö_¥ogªss
.
	`d©a
 (), in_¥ogªss.
	`size
 (),

131 &
v2_decodî_t
::
mesßge_ªady
);

134 
	}
}

136 
	gzmq
::
v2_decodî_t
::
	$mesßge_ªady
 ()

140 
	`√xt_°ï
 (
tmpbuf
, 1, &
v2_decodî_t
::
Êags_ªady
);

142 
	}
}

	@v2_decoder.hpp

20 #i‚de‡
__ZMQ_V2_DECODER_HPP_INCLUDED__


21 
	#__ZMQ_V2_DECODER_HPP_INCLUDED__


	)

23 
	~"decodî.hµ
"

25 
«me•a˚
 
	gzmq


28 
˛ass
 
	gv2_decodî_t
 : 
public
 
decodî_ba£_t
 <
v2_decodî_t
>

30 
public
:

32 
v2_decodî_t
 (
size_t
 
bufsize_
, 
öt64_t
 
maxmsgsize_
);

33 
	gvútuÆ
 ~
v2_decodî_t
 ();

36 
vútuÆ
 
msg_t
 *
msg
 (Ë{  &
	gö_¥ogªss
; }

38 
	g¥iv©e
:

40 
Êags_ªady
 ();

41 
⁄e_byã_size_ªady
 ();

42 
eight_byã_size_ªady
 ();

43 
mesßge_ªady
 ();

45 
	gtmpbuf
 [8];

46 
	gmsg_Êags
;

47 
msg_t
 
	gö_¥ogªss
;

49 c⁄° 
öt64_t
 
	gmaxmsgsize
;

51 
v2_decodî_t
 (const v2_decoder_t&);

52 
	g›î©‹
 = (c⁄° 
v2_decodî_t
&);

	@v2_encoder.cpp

20 
	~"v2_¥Ÿocﬁ.hµ
"

21 
	~"v2_ícodî.hµ
"

22 
	~"likñy.hµ
"

23 
	~"wúe.hµ
"

25 
	gzmq
::
v2_ícodî_t
::
	$v2_ícodî_t
 (
size_t
 
bufsize_
) :

26 
ícodî_ba£_t
 <
v2_ícodî_t
> (
bufsize_
)

29 
	`√xt_°ï
 (
NULL
, 0, &
v2_ícodî_t
::
mesßge_ªady
, 
åue
);

30 
	}
}

32 
	gzmq
::
v2_ícodî_t
::~
	$v2_ícodî_t
 ()

34 
	}
}

36 
zmq
::
v2_ícodî_t
::
	$mesßge_ªady
 ()

39 &
¥Ÿocﬁ_Êags
 = 
tmpbuf
 [0];

40 
¥Ÿocﬁ_Êags
 = 0;

41 i‡(
ö_¥ogªss
->
	`Êags
 (Ë& 
msg_t
::
m‹e
)

42 
¥Ÿocﬁ_Êags
 |
v2_¥Ÿocﬁ_t
::
m‹e_Êag
;

43 i‡(
ö_¥ogªss
->
	`size
 () > 255)

44 
¥Ÿocﬁ_Êags
 |
v2_¥Ÿocﬁ_t
::
œrge_Êag
;

45 i‡(
ö_¥ogªss
->
	`Êags
 (Ë& 
msg_t
::
comm™d
)

46 
¥Ÿocﬁ_Êags
 |
v2_¥Ÿocﬁ_t
::
comm™d_Êag
;

51 c⁄° 
size_t
 
size
 = 
ö_¥ogªss
->
	`size
 ();

52 i‡(
	`u∆ikñy
 (
size
 > 255)) {

53 
	`put_uöt64
 (
tmpbuf
 + 1, 
size
);

54 
	`√xt_°ï
 (
tmpbuf
, 9, &
v2_ícodî_t
::
size_ªady
, 
Ál£
);

57 
tmpbuf
 [1] = 
°©ic_ˇ°
 <
uöt8_t
> (
size
);

58 
	`√xt_°ï
 (
tmpbuf
, 2, &
v2_ícodî_t
::
size_ªady
, 
Ál£
);

60 
	}
}

62 
	gzmq
::
v2_ícodî_t
::
	$size_ªady
 ()

65 
	`√xt_°ï
 (
ö_¥ogªss
->
	`d©a
 (), in_¥ogªss->
	`size
 (),

66 &
v2_ícodî_t
::
mesßge_ªady
, 
åue
);

67 
	}
}

	@v2_encoder.hpp

20 #i‚de‡
__ZMQ_V2_ENCODER_HPP_INCLUDED__


21 
	#__ZMQ_V2_ENCODER_HPP_INCLUDED__


	)

23 
	~"ícodî.hµ
"

25 
«me•a˚
 
	gzmq


29 
˛ass
 
	gv2_ícodî_t
 : 
public
 
ícodî_ba£_t
 <
v2_ícodî_t
>

31 
public
:

33 
v2_ícodî_t
 (
size_t
 
bufsize_
);

34 
	gvútuÆ
 ~
v2_ícodî_t
 ();

36 
	g¥iv©e
:

38 
size_ªady
 ();

39 
mesßge_ªady
 ();

41 
	gtmpbuf
 [9];

43 
v2_ícodî_t
 (const v2_encoder_t&);

44 c⁄° 
	gv2_ícodî_t
 &
	g›î©‹
 = (c⁄° 
v2_ícodî_t
&);

	@v2_protocol.hpp

20 #i‚de‡
__ZMQ_V2_PROTOCOL_HPP_INCLUDED__


21 
	#__ZMQ_V2_PROTOCOL_HPP_INCLUDED__


	)

23 
«me•a˚
 
	gzmq


26 ˛as†
	cv2_¥Ÿocﬁ_t


28 
	gpublic
:

32 
m‹e_Êag
 = 1,

33 
	gœrge_Êag
 = 2,

34 
	gcomm™d_Êag
 = 4

	@windows.hpp

20 #i‚de‡
__ZMQ_WINDOWS_HPP_INCLUDED__


21 
	#__ZMQ_WINDOWS_HPP_INCLUDED__


	)

26 #i‚de‡
_CRT_SECURE_NO_WARNINGS


27 
	#_CRT_SECURE_NO_WARNINGS


	)

29 #i‚de‡
WIN32_LEAN_AND_MEAN


30 
	#WIN32_LEAN_AND_MEAN


	)

32 #i‚de‡
NOGDICAPMASKS


33 
	#NOGDICAPMASKS


35 #i‚de‡
NOVIRTUALKEYCODES


	)

36 
	#NOVIRTUALKEYCODES


38 #i‚de‡
NOWINMESSAGES


	)

39 
	#NOWINMESSAGES


41 #i‚de‡
NOWINSTYLES


	)

42 
	#NOWINSTYLES


44 #i‚de‡
NOSYSMETRICS


	)

45 
	#NOSYSMETRICS


47 #i‚de‡
NOMENUS


	)

48 
	#NOMENUS


50 #i‚de‡
NOICONS


	)

51 
	#NOICONS


53 #i‚de‡
NOKEYSTATES


	)

54 
	#NOKEYSTATES


56 #i‚de‡
NOSYSCOMMANDS


	)

57 
	#NOSYSCOMMANDS


59 #i‚de‡
NORASTEROPS


	)

60 
	#NORASTEROPS


62 #i‚de‡
NOSHOWWINDOW


	)

63 
	#NOSHOWWINDOW


65 #i‚de‡
OEMRESOURCE


	)

66 
	#OEMRESOURCE


68 #i‚de‡
NOATOM


	)

69 
	#NOATOM


71 #i‚de‡
NOCLIPBOARD


	)

72 
	#NOCLIPBOARD


74 #i‚de‡
NOCOLOR


	)

75 
	#NOCOLOR


77 #i‚de‡
NOCTLMGR


	)

78 
	#NOCTLMGR


80 #i‚de‡
NODRAWTEXT


	)

81 
	#NODRAWTEXT


83 #i‚de‡
NOGDI


	)

84 
	#NOGDI


86 #i‚de‡
NOKERNEL


	)

87 
	#NOKERNEL


89 #i‚de‡
NOUSER


	)

90 
	#NOUSER


92 #i‚de‡
NONLS


	)

93 
	#NONLS


95 #i‚de‡
NOMB


	)

96 
	#NOMB


98 #i‚de‡
NOMEMMGR


	)

99 
	#NOMEMMGR


101 #i‚de‡
NOMETAFILE


	)

102 
	#NOMETAFILE


104 #i‚de‡
NOMINMAX


	)

105 
	#NOMINMAX


107 #i‚de‡
NOMSG


	)

108 
	#NOMSG


110 #i‚de‡
NOOPENFILE


	)

111 
	#NOOPENFILE


113 #i‚de‡
NOSCROLL


	)

114 
	#NOSCROLL


116 #i‚de‡
NOSERVICE


	)

117 
	#NOSERVICE


119 #i‚de‡
NOSOUND


	)

120 
	#NOSOUND


122 #i‚de‡
NOTEXTMETRIC


	)

123 
	#NOTEXTMETRIC


125 #i‚de‡
NOWH


	)

126 
	#NOWH


128 #i‚de‡
NOWINOFFSETS


	)

129 
	#NOWINOFFSETS


131 #i‚de‡
NOCOMM


	)

132 
	#NOCOMM


134 #i‚de‡
NOKANJI


	)

135 
	#NOKANJI


137 #i‚de‡
NOHELP


	)

138 
	#NOHELP


140 #i‚de‡
NOPROFILER


	)

141 
	#NOPROFILER


143 #i‚de‡
NODEFERWINDOWPOS


	)

144 
	#NODEFERWINDOWPOS


146 #i‚de‡
NOMCX


	)

147 
	#NOMCX


149 

	)

151 #i‚de‡
_WIN32_WINNT


152 
	#_WIN32_WINNT
 0x0501

	)

155 #ifde‡
__MINGW32__


157 #if(
_WIN32_WINNT
 >= 0x0501)

159 #unde‡
_WIN32_WINNT


160 
	#_WIN32_WINNT
 0x0501

	)

164 
	~<wösock2.h
>

165 
	~<wödows.h
>

166 
	~<mswsock.h
>

168 #i‡!
deföed
 
__MINGW32__


169 
	~<M°˝ù.h
>

175 #i‡
deföed
 
__MINGW32__
 && !deföed 
SIO_KEEPALIVE_VALS
 && !deföed 
__MINGW64_VERSION_MAJOR


176 
	st˝_kì∑live
 {

177 
u_l⁄g
 
	m⁄off
;

178 
u_l⁄g
 
	mkì∑livëime
;

179 
u_l⁄g
 
	mkì∑liveöãrvÆ
;

181 
	#SIO_KEEPALIVE_VALS
 
	`_WSAIOW
(
IOC_VENDOR
,4)

	)

184 
	~<ws2t˝ù.h
>

185 
	~<ùexp‹t.h
>

186 #i‡!
deföed
 
_WIN32_WCE


187 
	~<¥o˚ss.h
>

191 #i‚de‡
AI_NUMERICSERV


192 
	#AI_NUMERICSERV
 0x0400

	)

	@wire.hpp

20 #i‚de‡
__ZMQ_WIRE_HPP_INCLUDED__


21 
	#__ZMQ_WIRE_HPP_INCLUDED__


	)

23 
	~"°döt.hµ
"

25 
«me•a˚
 
	gzmq


31 
ölöe
 
put_uöt8
 (*
buf„r_
, 
uöt8_t
 
vÆue
)

33 *
	gbuf„r_
 = 
vÆue
;

36 
ölöe
 
uöt8_t
 
gë_uöt8
 (c⁄° *
buf„r_
)

38  *
	gbuf„r_
;

41 
ölöe
 
put_uöt16
 (*
buf„r_
, 
uöt16_t
 
vÆue
)

43 
	gbuf„r_
 [0] = (Ë(((
vÆue
) >> 8) & 0xff);

44 
	gbuf„r_
 [1] = (Ë(
vÆue
 & 0xff);

47 
ölöe
 
uöt16_t
 
gë_uöt16
 (c⁄° *
buf„r_
)

50 (((
	guöt16_t
Ë
	gbuf„r_
 [0]) << 8) |

51 ((
	guöt16_t
Ë
	gbuf„r_
 [1]);

54 
ölöe
 
put_uöt32
 (*
buf„r_
, 
uöt32_t
 
vÆue
)

56 
	gbuf„r_
 [0] = (Ë(((
vÆue
) >> 24) & 0xff);

57 
	gbuf„r_
 [1] = (Ë(((
vÆue
) >> 16) & 0xff);

58 
	gbuf„r_
 [2] = (Ë(((
vÆue
) >> 8) & 0xff);

59 
	gbuf„r_
 [3] = (Ë(
vÆue
 & 0xff);

62 
ölöe
 
uöt32_t
 
gë_uöt32
 (c⁄° *
buf„r_
)

65 (((
	guöt32_t
Ë
	gbuf„r_
 [0]) << 24) |

66 (((
	guöt32_t
Ë
	gbuf„r_
 [1]) << 16) |

67 (((
	guöt32_t
Ë
	gbuf„r_
 [2]) << 8) |

68 ((
	guöt32_t
Ë
	gbuf„r_
 [3]);

71 
ölöe
 
put_uöt64
 (*
buf„r_
, 
uöt64_t
 
vÆue
)

73 
	gbuf„r_
 [0] = (Ë(((
vÆue
) >> 56) & 0xff);

74 
	gbuf„r_
 [1] = (Ë(((
vÆue
) >> 48) & 0xff);

75 
	gbuf„r_
 [2] = (Ë(((
vÆue
) >> 40) & 0xff);

76 
	gbuf„r_
 [3] = (Ë(((
vÆue
) >> 32) & 0xff);

77 
	gbuf„r_
 [4] = (Ë(((
vÆue
) >> 24) & 0xff);

78 
	gbuf„r_
 [5] = (Ë(((
vÆue
) >> 16) & 0xff);

79 
	gbuf„r_
 [6] = (Ë(((
vÆue
) >> 8) & 0xff);

80 
	gbuf„r_
 [7] = (Ë(
vÆue
 & 0xff);

83 
ölöe
 
uöt64_t
 
gë_uöt64
 (c⁄° *
buf„r_
)

86 (((
	guöt64_t
Ë
	gbuf„r_
 [0]) << 56) |

87 (((
	guöt64_t
Ë
	gbuf„r_
 [1]) << 48) |

88 (((
	guöt64_t
Ë
	gbuf„r_
 [2]) << 40) |

89 (((
	guöt64_t
Ë
	gbuf„r_
 [3]) << 32) |

90 (((
	guöt64_t
Ë
	gbuf„r_
 [4]) << 24) |

91 (((
	guöt64_t
Ë
	gbuf„r_
 [5]) << 16) |

92 (((
	guöt64_t
Ë
	gbuf„r_
 [6]) << 8) |

93 ((
	guöt64_t
Ë
	gbuf„r_
 [7]);

	@xpub.cpp

20 
	~<°rög.h
>

22 
	~"xpub.hµ
"

23 
	~"pùe.hµ
"

24 
	~"îr.hµ
"

25 
	~"msg.hµ
"

27 
	gzmq
::
xpub_t
::
	$xpub_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

28 
	`sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

29 
	`vîbo£
(
Ál£
),

30 
	$m‹e
 (
Ál£
)

32 
›ti⁄s
.
ty≥
 = 
ZMQ_XPUB
;

33 
	}
}

35 
	gzmq
::
xpub_t
::~
	$xpub_t
 ()

37 
	}
}

39 
zmq
::
xpub_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

41 
	`zmq_as£π
 (
pùe_
);

42 
di°
.
	`©èch
 (
pùe_
);

46 i‡(
subs¸ibe_to_Æl_
)

47 
subs¸ùti⁄s
.
	`add
 (
NULL
, 0, 
pùe_
);

51 
	`xªad_a˘iv©ed
 (
pùe_
);

52 
	}
}

54 
	gzmq
::
xpub_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

57 
msg_t
 
sub
;

58 
pùe_
->
	`ªad
 (&
sub
)) {

60 *c⁄° 
d©a
 = (*Ë
sub
.
	`d©a
 ();

61 c⁄° 
size_t
 
size
 = 
sub
.
	`size
 ();

62 i‡(
size
 > 0 && (*
d©a
 == 0 || *data == 1)) {

63 
boﬁ
 
unique
;

64 i‡(*
d©a
 == 0)

65 
unique
 = 
subs¸ùti⁄s
.
	`rm
 (
d©a
 + 1, 
size
 - 1, 
pùe_
);

67 
unique
 = 
subs¸ùti⁄s
.
	`add
 (
d©a
 + 1, 
size
 - 1, 
pùe_
);

71 i‡(
›ti⁄s
.
ty≥
 =
ZMQ_XPUB
 && (
unique
 || (*
d©a
 && 
vîbo£
))) {

72 
≥ndög_d©a
.
	`push_back
 (
	`blob_t
 (
d©a
, 
size
));

73 
≥ndög_Êags
.
	`push_back
 (0);

78 
≥ndög_d©a
.
	`push_back
 (
	`blob_t
 (
d©a
, 
size
));

79 
≥ndög_Êags
.
	`push_back
 (
sub
.
	`Êags
 ());

81 
sub
.
	`˛o£
 ();

83 
	}
}

85 
	gzmq
::
xpub_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

87 
di°
.
	`a˘iv©ed
 (
pùe_
);

88 
	}
}

90 
	gzmq
::
xpub_t
::
	$x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
,

91 
size_t
 
›tvÆÀn_
)

93 i‡(
›ti⁄_
 !
ZMQ_XPUB_VERBOSE
) {

94 
î∫o
 = 
EINVAL
;

97 i‡(
›tvÆÀn_
 ! (Ë|| *
°©ic_ˇ°
 <c⁄° *> (
›tvÆ_
) < 0) {

98 
î∫o
 = 
EINVAL
;

101 
vîbo£
 = (*
°©ic_ˇ°
 <c⁄° *> (
›tvÆ_
) != 0);

103 
	}
}

105 
	gzmq
::
xpub_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

110 
subs¸ùti⁄s
.
	`rm
 (
pùe_
, 
£nd_unsubs¸ùti⁄
, 
this
);

112 
di°
.
	`pùe_ãrmö©ed
 (
pùe_
);

113 
	}
}

115 
	gzmq
::
xpub_t
::
	$m¨k_as_m©chög
 (
pùe_t
 *
pùe_
, *
¨g_
)

117 
xpub_t
 *
£lf
 = (xpub_t*Ë
¨g_
;

118 
£lf
->
di°
.
	`m©ch
 (
pùe_
);

119 
	}
}

121 
	gzmq
::
xpub_t
::
	$x£nd
 (
msg_t
 *
msg_
)

123 
boﬁ
 
msg_m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
 ? 
åue
 : 
Ál£
;

126 i‡(!
m‹e
)

127 
subs¸ùti⁄s
.
	`m©ch
 ((*Ë
msg_
->
	`d©a
 (), msg_->
	`size
 (),

128 
m¨k_as_m©chög
, 
this
);

132 
rc
 = 
di°
.
	`£nd_to_m©chög
 (
msg_
);

133 i‡(
rc
 != 0)

134  
rc
;

138 i‡(!
msg_m‹e
)

139 
di°
.
	`unm©ch
 ();

141 
m‹e
 = 
msg_m‹e
;

144 
	}
}

146 
boﬁ
 
	gzmq
::
xpub_t
::
	$xhas_out
 ()

148  
di°
.
	`has_out
 ();

149 
	}
}

151 
	gzmq
::
xpub_t
::
	$xªcv
 (
msg_t
 *
msg_
)

154 i‡(
≥ndög_d©a
.
	`em±y
 ()) {

155 
î∫o
 = 
EAGAIN
;

159 
rc
 = 
msg_
->
	`˛o£
 ();

160 
	`î∫o_as£π
 (
rc
 == 0);

161 
rc
 = 
msg_
->
	`öô_size
 (
≥ndög_d©a
.
	`‰⁄t
 ().
	`size
 ());

162 
	`î∫o_as£π
 (
rc
 == 0);

163 
	`mem˝y
 (
msg_
->
	`d©a
 (),

164 
≥ndög_d©a
.
	`‰⁄t
 ().
	`d©a
 (),

165 
≥ndög_d©a
.
	`‰⁄t
 ().
	`size
 ());

166 
msg_
->
	`£t_Êags
 (
≥ndög_Êags
.
	`‰⁄t
 ());

167 
≥ndög_d©a
.
	`p›_‰⁄t
 ();

168 
≥ndög_Êags
.
	`p›_‰⁄t
 ();

170 
	}
}

172 
boﬁ
 
	gzmq
::
xpub_t
::
	$xhas_ö
 ()

174  !
≥ndög_d©a
.
	`em±y
 ();

175 
	}
}

177 
	gzmq
::
xpub_t
::
	$£nd_unsubs¸ùti⁄
 (*
d©a_
, 
size_t
 
size_
,

178 *
¨g_
)

180 
xpub_t
 *
£lf
 = (xpub_t*Ë
¨g_
;

182 i‡(
£lf
->
›ti⁄s
.
ty≥
 !
ZMQ_PUB
) {

185 
blob_t
 
	`unsub
 (
size_
 + 1, 0);

186 
unsub
 [0] = 0;

187 
	`mem˝y
 (&
unsub
 [1], 
d©a_
, 
size_
);

188 
£lf
->
≥ndög_d©a
.
	`push_back
 (
unsub
);

189 
£lf
->
≥ndög_Êags
.
	`push_back
 (0);

191 
	}
}

	@xpub.hpp

20 #i‚de‡
__ZMQ_XPUB_HPP_INCLUDED__


21 
	#__ZMQ_XPUB_HPP_INCLUDED__


	)

23 
	~<deque
>

24 
	~<°rög
>

26 
	~"sockë_ba£.hµ
"

27 
	~"£ssi⁄_ba£.hµ
"

28 
	~"måõ.hµ
"

29 
	~"¨øy.hµ
"

30 
	~"di°.hµ
"

32 
«me•a˚
 
	gzmq


35 
˛ass
 
	g˘x_t
;

36 
˛ass
 
	gmsg_t
;

37 
˛ass
 
	gpùe_t
;

38 
˛ass
 
	gio_thªad_t
;

40 ˛as†
	cxpub_t
 :

41 
public
 
sockë_ba£_t


43 
public
:

45 
xpub_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

46 ~
xpub_t
 ();

49 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
 = 
Ál£
);

50 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

51 
boﬁ
 
xhas_out
 ();

52 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

53 
boﬁ
 
xhas_ö
 ();

54 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

55 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

56 
x£tsock›t
 (
›ti⁄_
, c⁄° *
›tvÆ_
, 
size_t
 
›tvÆÀn_
);

57 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

59 
	g¥iv©e
:

63 
£nd_unsubs¸ùti⁄
 (*
d©a_
, 
size_t
 
size_
,

64 *
¨g_
);

67 
m¨k_as_m©chög
 (
zmq
::
pùe_t
 *
pùe_
, *
¨g_
);

70 
måõ_t
 
	gsubs¸ùti⁄s
;

73 
di°_t
 
	gdi°
;

77 
boﬁ
 
	gvîbo£
;

80 
boﬁ
 
	gm‹e
;

84 
	g°d
::
	tbasic_°rög
 <> 
	tblob_t
;

85 
	g°d
::
deque
 <
blob_t
> 
≥ndög_d©a
;

86 
	g°d
::
deque
 <> 
≥ndög_Êags
;

88 
xpub_t
 (const xpub_t&);

89 c⁄° 
	gxpub_t
 &
	g›î©‹
 = (c⁄° 
xpub_t
&);

	@xsub.cpp

20 
	~<°rög.h
>

22 
	~"xsub.hµ
"

23 
	~"îr.hµ
"

25 
	gzmq
::
xsub_t
::
	$xsub_t
 (
˛ass
 
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
) :

26 
	`sockë_ba£_t
 (
∑ª¡_
, 
tid_
, 
sid_
),

27 
	`has_mesßge
 (
Ál£
),

28 
	$m‹e
 (
Ál£
)

30 
›ti⁄s
.
ty≥
 = 
ZMQ_XSUB
;

34 
›ti⁄s
.
lögî
 = 0;

36 
rc
 = 
mesßge
.
	`öô
 ();

37 
	`î∫o_as£π
 (
rc
 == 0);

38 
	}
}

40 
	gzmq
::
xsub_t
::~
	$xsub_t
 ()

42 
rc
 = 
mesßge
.
	`˛o£
 ();

43 
	`î∫o_as£π
 (
rc
 == 0);

44 
	}
}

46 
	gzmq
::
xsub_t
::
	$x©èch_pùe
 (
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
)

49 (Ë
subs¸ibe_to_Æl_
;

51 
	`zmq_as£π
 (
pùe_
);

52 
fq
.
	`©èch
 (
pùe_
);

53 
di°
.
	`©èch
 (
pùe_
);

56 
subs¸ùti⁄s
.
	`≠∂y
 (
£nd_subs¸ùti⁄
, 
pùe_
);

57 
pùe_
->
	`Êush
 ();

58 
	}
}

60 
	gzmq
::
xsub_t
::
	$xªad_a˘iv©ed
 (
pùe_t
 *
pùe_
)

62 
fq
.
	`a˘iv©ed
 (
pùe_
);

63 
	}
}

65 
	gzmq
::
xsub_t
::
	$xwrôe_a˘iv©ed
 (
pùe_t
 *
pùe_
)

67 
di°
.
	`a˘iv©ed
 (
pùe_
);

68 
	}
}

70 
	gzmq
::
xsub_t
::
	$xpùe_ãrmö©ed
 (
pùe_t
 *
pùe_
)

72 
fq
.
	`pùe_ãrmö©ed
 (
pùe_
);

73 
di°
.
	`pùe_ãrmö©ed
 (
pùe_
);

74 
	}
}

76 
	gzmq
::
xsub_t
::
	$xhiccu≥d
 (
pùe_t
 *
pùe_
)

79 
subs¸ùti⁄s
.
	`≠∂y
 (
£nd_subs¸ùti⁄
, 
pùe_
);

80 
pùe_
->
	`Êush
 ();

81 
	}
}

83 
	gzmq
::
xsub_t
::
	$x£nd
 (
msg_t
 *
msg_
)

85 
size_t
 
size
 = 
msg_
->
	`size
 ();

86 *
d©a
 = (*Ë
msg_
->
	`d©a
 ();

88 i‡(
size
 > 0 && *
d©a
 == 1) {

94 
subs¸ùti⁄s
.
	`add
 (
d©a
 + 1, 
size
 - 1);

95  
di°
.
	`£nd_to_Æl
 (
msg_
);

98 i‡(
size
 > 0 && *
d©a
 == 0) {

100 i‡(
subs¸ùti⁄s
.
	`rm
 (
d©a
 + 1, 
size
 - 1))

101  
di°
.
	`£nd_to_Æl
 (
msg_
);

105  
di°
.
	`£nd_to_Æl
 (
msg_
);

107 
rc
 = 
msg_
->
	`˛o£
 ();

108 
	`î∫o_as£π
 (
rc
 == 0);

109 
rc
 = 
msg_
->
	`öô
 ();

110 
	`î∫o_as£π
 (
rc
 == 0);

113 
	}
}

115 
boﬁ
 
	gzmq
::
xsub_t
::
	$xhas_out
 ()

118  
åue
;

119 
	}
}

121 
	gzmq
::
xsub_t
::
	$xªcv
 (
msg_t
 *
msg_
)

125 i‡(
has_mesßge
) {

126 
rc
 = 
msg_
->
	`move
 (
mesßge
);

127 
	`î∫o_as£π
 (
rc
 == 0);

128 
has_mesßge
 = 
Ál£
;

129 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹ê? 
åue
 : 
Ál£
;

136 
åue
) {

139 
rc
 = 
fq
.
	`ªcv
 (
msg_
);

143 i‡(
rc
 != 0)

148 i‡(
m‹e
 || !
›ti⁄s
.
fûãr
 || 
	`m©ch
 (
msg_
)) {

149 
m‹e
 = 
msg_
->
	`Êags
 (Ë& 
msg_t
::m‹ê? 
åue
 : 
Ál£
;

155 
msg_
->
	`Êags
 (Ë& 
msg_t
::
m‹e
) {

156 
rc
 = 
fq
.
	`ªcv
 (
msg_
);

157 
	`î∫o_as£π
 (
rc
 == 0);

160 
	}
}

162 
boﬁ
 
	gzmq
::
xsub_t
::
	$xhas_ö
 ()

165 i‡(
m‹e
)

166  
åue
;

170 i‡(
has_mesßge
)

171  
åue
;

175 
åue
) {

178 
rc
 = 
fq
.
	`ªcv
 (&
mesßge
);

182 i‡(
rc
 != 0) {

183 
	`î∫o_as£π
 (
î∫o
 =
EAGAIN
);

184  
Ál£
;

188 i‡(!
›ti⁄s
.
fûãr
 || 
	`m©ch
 (&
mesßge
)) {

189 
has_mesßge
 = 
åue
;

190  
åue
;

195 
mesßge
.
	`Êags
 (Ë& 
msg_t
::
m‹e
) {

196 
rc
 = 
fq
.
	`ªcv
 (&
mesßge
);

197 
	`î∫o_as£π
 (
rc
 == 0);

200 
	}
}

202 
boﬁ
 
	gzmq
::
xsub_t
::
	$m©ch
 (
msg_t
 *
msg_
)

204  
subs¸ùti⁄s
.
	`check
 ((*Ë
msg_
->
	`d©a
 (), msg_->
	`size
 ());

205 
	}
}

207 
	gzmq
::
xsub_t
::
	$£nd_subs¸ùti⁄
 (*
d©a_
, 
size_t
 
size_
,

208 *
¨g_
)

210 
pùe_t
 *
pùe
 = (pùe_t*Ë
¨g_
;

213 
msg_t
 
msg
;

214 
rc
 = 
msg
.
	`öô_size
 (
size_
 + 1);

215 
	`î∫o_as£π
 (
rc
 == 0);

216 *
d©a
 = (*Ë
msg
.
	`d©a
 ();

217 
d©a
 [0] = 1;

218 
	`mem˝y
 (
d©a
 + 1, 
d©a_
, 
size_
);

221 
boﬁ
 
£¡
 = 
pùe
->
	`wrôe
 (&
msg
);

226 i‡(!
£¡
)

227 
msg
.
	`˛o£
 ();

228 
	}
}

	@xsub.hpp

20 #i‚de‡
__ZMQ_XSUB_HPP_INCLUDED__


21 
	#__ZMQ_XSUB_HPP_INCLUDED__


	)

23 
	~"sockë_ba£.hµ
"

24 
	~"£ssi⁄_ba£.hµ
"

25 
	~"di°.hµ
"

26 
	~"fq.hµ
"

27 
	~"åõ.hµ
"

29 
«me•a˚
 
	gzmq


32 
˛ass
 
	g˘x_t
;

33 
˛ass
 
	gpùe_t
;

34 
˛ass
 
	gio_thªad_t
;

36 ˛as†
	cxsub_t
 :

37 
public
 
sockë_ba£_t


39 
public
:

41 
xsub_t
 (
zmq
::
˘x_t
 *
∑ª¡_
, 
uöt32_t
 
tid_
, 
sid_
);

42 ~
xsub_t
 ();

44 
	g¥Ÿe˘ed
:

47 
x©èch_pùe
 (
zmq
::
pùe_t
 *
pùe_
, 
boﬁ
 
subs¸ibe_to_Æl_
);

48 
x£nd
 (
zmq
::
msg_t
 *
msg_
);

49 
boﬁ
 
xhas_out
 ();

50 
xªcv
 (
zmq
::
msg_t
 *
msg_
);

51 
boﬁ
 
xhas_ö
 ();

52 
xªad_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

53 
xwrôe_a˘iv©ed
 (
zmq
::
pùe_t
 *
pùe_
);

54 
xhiccu≥d
 (
pùe_t
 *
pùe_
);

55 
xpùe_ãrmö©ed
 (
zmq
::
pùe_t
 *
pùe_
);

57 
	g¥iv©e
:

60 
boﬁ
 
m©ch
 (
zmq
::
msg_t
 *
msg_
);

64 
£nd_subs¸ùti⁄
 (*
d©a_
, 
size_t
 
size_
,

65 *
¨g_
);

68 
fq_t
 
	gfq
;

71 
di°_t
 
	gdi°
;

74 
åõ_t
 
	gsubs¸ùti⁄s
;

78 
boﬁ
 
	ghas_mesßge
;

79 
msg_t
 
	gmesßge
;

83 
boﬁ
 
	gm‹e
;

85 
xsub_t
 (const xsub_t&);

86 c⁄° 
	gxsub_t
 &
	g›î©‹
 = (c⁄° 
xsub_t
&);

	@ypipe.hpp

20 #i‚de‡
__ZMQ_YPIPE_HPP_INCLUDED__


21 
	#__ZMQ_YPIPE_HPP_INCLUDED__


	)

23 
	~"©omic_±r.hµ
"

24 
	~"yqueue.hµ
"

25 
	~"∂©f‹m.hµ
"

26 
	~"ypùe_ba£.hµ
"

28 
«me•a˚
 
	gzmq


38 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
> 
˛ass
 
	gypùe_t
 : 
public
 
ypùe_ba£_t
<
T
,N>

40 
	gpublic
:

43 
ölöe
 
ypùe_t
 ()

46 
queue
.
push
 ();

50 
	gr
 = 
w
 = 
f
 = &
queue
.
back
 ();

51 
	gc
.
£t
 (&
queue
.
back
 ());

56 
ölöe
 
	gvútuÆ
 ~
ypùe_t
 ()

64 #ifde‡
ZMQ_HAVE_OPENVMS


65 #¥agm®
mesßge
 
ßve


66 #¥agm®
mesßge
 
dißbÀ
(
UNINIT
)

73 
ölöe
 
wrôe
 (c⁄° 
T
 &
vÆue_
, 
boﬁ
 
öcom∂ëe_
)

76 
	gqueue
.
back
 (Ë
vÆue_
;

77 
	gqueue
.
push
 ();

80 i‡(!
	göcom∂ëe_
)

81 
	gf
 = &
queue
.
back
 ();

84 #ifde‡
ZMQ_HAVE_OPENVMS


85 #¥agm®
mesßge
 
ª°‹e


90 
ölöe
 
boﬁ
 
unwrôe
 (
T
 *
vÆue_
)

92 i‡(
	gf
 =&
queue
.
back
 ())

93  
Ál£
;

94 
	gqueue
.
u≈ush
 ();

95 *
	gvÆue_
 = 
queue
.
back
 ();

96  
	gåue
;

102 
ölöe
 
boﬁ
 
Êush
 ()

105 i‡(
	gw
 =
f
)

106  
åue
;

109 i‡(
	gc
.
ˇs
 (
w
, 
f
) != w) {

116 
c
.
£t
 (
f
);

117 
	gw
 = 
f
;

118  
	gÁl£
;

123 
	gw
 = 
f
;

124  
	gåue
;

128 
ölöe
 
boﬁ
 
check_ªad
 ()

131 i‡(&
	gqueue
.
‰⁄t
 (Ë!
r
 &&Ñ)

132  
åue
;

138 
	gr
 = 
c
.
ˇs
 (&
queue
.
‰⁄t
 (), 
NULL
);

144 i‡(&
	gqueue
.
‰⁄t
 (Ë=
r
 || !r)

145  
Ál£
;

148  
	gåue
;

153 
ölöe
 
boﬁ
 
ªad
 (
T
 *
vÆue_
)

156 i‡(!
check_ªad
 ())

157  
	gÁl£
;

161 *
	gvÆue_
 = 
queue
.
‰⁄t
 ();

162 
	gqueue
.
p›
 ();

163  
	gåue
;

169 
ölöe
 
boﬁ
 
¥obe
 (boﬁ (*
‚
)(
T
 &))

171 
boﬁ
 
	grc
 = 
check_ªad
 ();

172 
zmq_as£π
 (
rc
);

174  (*
	g‚
Ë(
	gqueue
.
‰⁄t
 ());

177 
	g¥Ÿe˘ed
:

183 
yqueue_t
 <
T
, 
	gN
> 
	gqueue
;

187 
T
 *
	gw
;

191 
T
 *
	gr
;

194 
T
 *
	gf
;

200 
	g©omic_±r_t
 <
	gT
> 
	gc
;

203 
ypùe_t
 (const ypipe_t&);

204 c⁄° 
	gypùe_t
 &
	g›î©‹
 = (c⁄° 
ypùe_t
&);

	@ypipe_base.hpp

21 #i‚de‡
__ZMQ_YPIPE_BASE_HPP_INCLUDED__


22 
	#__ZMQ_YPIPE_BASE_HPP_INCLUDED__


	)

25 
«me•a˚
 
	gzmq


31 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
> cœs†
	cypùe_ba£_t


33 
	gpublic
:

34 
vútuÆ
 ~
ypùe_ba£_t
 () {}

35 
vútuÆ
 
wrôe
 (c⁄° 
T
 &
vÆue_
, 
boﬁ
 
öcom∂ëe_
) = 0;

36 
vútuÆ
 
boﬁ
 
unwrôe
 (
T
 *
vÆue_
) = 0;

37 
vútuÆ
 
boﬁ
 
Êush
 () = 0;

38 
vútuÆ
 
boﬁ
 
check_ªad
 () = 0;

39 
vútuÆ
 
boﬁ
 
ªad
 (
T
 *
vÆue_
) = 0;

40 
vútuÆ
 
boﬁ
 
¥obe
 (boﬁ (*
‚
)(
T
 &)) = 0;

	@ypipe_conflate.hpp

20 #i‚de‡
__ZMQ_YPIPE_CONFLATE_HPP_INCLUDED__


21 
	#__ZMQ_YPIPE_CONFLATE_HPP_INCLUDED__


	)

23 
	~"∂©f‹m.hµ
"

24 
	~"dbuf„r.hµ
"

25 
	~"ypùe_ba£.hµ
"

27 
«me•a˚
 
	gzmq


37 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
> 
˛ass
 
	gypùe_c⁄Ê©e_t
 : 
public
 
ypùe_ba£_t
<
T
,N>

39 
	gpublic
:

42 
ölöe
 
ypùe_c⁄Ê©e_t
 ()

43 : 
ªadî_awake
(
Ál£
)

49 
ölöe
 
vútuÆ
 ~
ypùe_c⁄Ê©e_t
 ()

57 #ifde‡
ZMQ_HAVE_OPENVMS


58 #¥agm®
mesßge
 
ßve


59 #¥agm®
mesßge
 
dißbÀ
(
UNINIT
)

61 
ölöe
 
wrôe
 (c⁄° 
T
 &
vÆue_
, 
boﬁ
 
öcom∂ëe_
)

63 ()
	göcom∂ëe_
;

65 
	gdbuf„r
.
wrôe
 (
vÆue_
);

68 #ifde‡
ZMQ_HAVE_OPENVMS


69 #¥agm®
mesßge
 
ª°‹e


73 
ölöe
 
boﬁ
 
unwrôe
 (
T
 *
vÆue_
)

75  
	gÁl£
;

82 
ölöe
 
boﬁ
 
Êush
 ()

84  
	gªadî_awake
;

88 
ölöe
 
boﬁ
 
check_ªad
 ()

90 
boﬁ
 
	gªs
 = 
dbuf„r
.
check_ªad
 ();

91 i‡(!
	gªs
)

92 
	gªadî_awake
 = 
Ál£
;

94  
	gªs
;

99 
ölöe
 
boﬁ
 
ªad
 (
T
 *
vÆue_
)

101 i‡(!
check_ªad
 ())

102  
	gÁl£
;

104  
	gdbuf„r
.
ªad
 (
vÆue_
);

110 
ölöe
 
boﬁ
 
¥obe
 (boﬁ (*
‚
)(
T
 &))

112  
	gdbuf„r
.
¥obe
 (
‚
);

115 
	g¥Ÿe˘ed
:

117 
dbuf„r_t
 <
T
> 
dbuf„r
;

118 
boﬁ
 
	gªadî_awake
;

121 
ypùe_c⁄Ê©e_t
 (const ypipe_conflate_t&);

122 c⁄° 
	gypùe_c⁄Ê©e_t
 &
	g›î©‹
 = (c⁄° 
ypùe_c⁄Ê©e_t
&);

	@yqueue.hpp

20 #i‚de‡
__ZMQ_YQUEUE_HPP_INCLUDED__


21 
	#__ZMQ_YQUEUE_HPP_INCLUDED__


	)

23 
	~<°dlib.h
>

24 
	~<°ddef.h
>

26 
	~"îr.hµ
"

27 
	~"©omic_±r.hµ
"

29 
«me•a˚
 
	gzmq


45 
	gãm∂©e
 <
ty≥«me
 
	gT
, 
	gN
> cœs†
	cyqueue_t


47 
	gpublic
:

50 
ölöe
 
yqueue_t
 ()

52 
begö_chunk
 = (
chunk_t
*Ë
mÆloc
 ( (chunk_t));

53 
Æloc_as£π
 (
begö_chunk
);

54 
	gbegö_pos
 = 0;

55 
	gback_chunk
 = 
NULL
;

56 
	gback_pos
 = 0;

57 
	gíd_chunk
 = 
begö_chunk
;

58 
	gíd_pos
 = 0;

62 
	gölöe
 ~
yqueue_t
 ()

64 
	gåue
) {

65 i‡(
	gbegö_chunk
 =
íd_chunk
) {

66 
‰ì
 (
begö_chunk
);

69 
chunk_t
 *
	go
 = 
begö_chunk
;

70 
	gbegö_chunk
 = 
begö_chunk
->
√xt
;

71 
‰ì
 (
o
);

74 
chunk_t
 *
	gsc
 = 
•¨e_chunk
.
xchg
 (
NULL
);

75 
‰ì
 (
sc
);

80 
ölöe
 
	gT
 &
‰⁄t
 ()

82  
	gbegö_chunk
->
	gvÆues
 [
begö_pos
];

87 
ölöe
 
	gT
 &
back
 ()

89  
	gback_chunk
->
	gvÆues
 [
back_pos
];

93 
ölöe
 
push
 ()

95 
	gback_chunk
 = 
íd_chunk
;

96 
	gback_pos
 = 
íd_pos
;

98 i‡(++
	gíd_pos
 !
N
)

101 
chunk_t
 *
	gsc
 = 
•¨e_chunk
.
xchg
 (
NULL
);

102 i‡(
	gsc
) {

103 
	gíd_chunk
->
	g√xt
 = 
sc
;

104 
	gsc
->
	g¥ev
 = 
íd_chunk
;

106 
	gíd_chunk
->
	g√xt
 = (
chunk_t
*Ë
mÆloc
 ( (chunk_t));

107 
Æloc_as£π
 (
íd_chunk
->
√xt
);

108 
	gíd_chunk
->
	g√xt
->
	g¥ev
 = 
íd_chunk
;

110 
	gíd_chunk
 = 
íd_chunk
->
√xt
;

111 
	gíd_pos
 = 0;

121 
ölöe
 
u≈ush
 ()

124 i‡(
	gback_pos
)

125 --
	gback_pos
;

127 
	gback_pos
 = 
N
 - 1;

128 
	gback_chunk
 = 
back_chunk
->
¥ev
;

135 i‡(
	gíd_pos
)

136 --
	gíd_pos
;

138 
	gíd_pos
 = 
N
 - 1;

139 
	gíd_chunk
 = 
íd_chunk
->
¥ev
;

140 
‰ì
 (
íd_chunk
->
√xt
);

141 
	gíd_chunk
->
	g√xt
 = 
NULL
;

146 
ölöe
 
p›
 ()

148 i‡(++ 
	gbegö_pos
 =
N
) {

149 
chunk_t
 *
o
 = 
begö_chunk
;

150 
	gbegö_chunk
 = 
begö_chunk
->
√xt
;

151 
	gbegö_chunk
->
	g¥ev
 = 
NULL
;

152 
	gbegö_pos
 = 0;

157 
chunk_t
 *
	gcs
 = 
•¨e_chunk
.
xchg
 (
o
);

158 
‰ì
 (
cs
);

162 
	g¥iv©e
:

165 
	schunk_t


167 
T
 
vÆues
 [
N
];

168 
chunk_t
 *
	g¥ev
;

169 
chunk_t
 *
	g√xt
;

176 
chunk_t
 *
	gbegö_chunk
;

177 
	gbegö_pos
;

178 
chunk_t
 *
	gback_chunk
;

179 
	gback_pos
;

180 
chunk_t
 *
	gíd_chunk
;

181 
	gíd_pos
;

186 
	g©omic_±r_t
<
	gchunk_t
> 
	g•¨e_chunk
;

189 
yqueue_t
 (const yqueue_t&);

190 c⁄° 
	gyqueue_t
 &
	g›î©‹
 = (c⁄° 
yqueue_t
&);

	@zmq.cpp

19 
	#ZMQ_TYPE_UNSAFE


	)

21 
	~"∂©f‹m.hµ
"

23 #i‡
deföed
 
ZMQ_FORCE_SELECT


24 
	#ZMQ_POLL_BASED_ON_SELECT


	)

25 #ñi‡
deföed
 
ZMQ_FORCE_POLL


26 
	#ZMQ_POLL_BASED_ON_POLL


	)

27 #ñi‡
deföed
 
ZMQ_HAVE_LINUX
 || deföed 
ZMQ_HAVE_FREEBSD
 ||\

28 
deföed
 
	gZMQ_HAVE_OPENBSD
 || deföed 
	gZMQ_HAVE_SOLARIS
 ||\

29 
deföed
 
	gZMQ_HAVE_OSX
 || deföed 
	gZMQ_HAVE_QNXNTO
 ||\

30 
deföed
 
	gZMQ_HAVE_HPUX
 || deföed 
	gZMQ_HAVE_AIX
 ||\

31 
deföed
 
	gZMQ_HAVE_NETBSD


32 
	#ZMQ_POLL_BASED_ON_POLL


	)

33 #ñi‡
deföed
 
ZMQ_HAVE_WINDOWS
 || deföed 
ZMQ_HAVE_OPENVMS
 ||\

34 
deföed
 
	gZMQ_HAVE_CYGWIN


35 
	#ZMQ_POLL_BASED_ON_SELECT


	)

42 #i‡
deföed
 
ZMQ_POLL_BASED_ON_POLL


43 
	~<pﬁl.h
>

47 
	~"../ö˛ude/zmq.h
"

49 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


50 
	~"wödows.hµ
"

52 
	~<uni°d.h
>

57 #i‡
deföed
 
ZMQ_HAVE_UIO


58 
	~<sys/uio.h
>

60 
	siovec
 {

61 *
	miov_ba£
;

62 
size_t
 
	miov_Àn
;

67 
	~<°rög.h
>

68 
	~<°dlib.h
>

69 
	~<√w
>

71 
	~"¥oxy.hµ
"

72 
	~"sockë_ba£.hµ
"

73 
	~"°döt.hµ
"

74 
	~"c⁄fig.hµ
"

75 
	~"likñy.hµ
"

76 
	~"˛ock.hµ
"

77 
	~"˘x.hµ
"

78 
	~"îr.hµ
"

79 
	~"msg.hµ
"

80 
	~"fd.hµ
"

82 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS


83 
	~<uni°d.h
>

86 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


87 
	#__PGM_WININT_H__


	)

88 
	~<pgm/pgm.h
>

92 
	tcheck_msg_t_size


93 [ (
zmq
::
msg_t
Ë= (
zmq_msg_t
) ? 1 : -1];

96 
	$zmq_vîsi⁄
 (*
maj‹_
, *
mö‹_
, *
∑tch_
)

98 *
maj‹_
 = 
ZMQ_VERSION_MAJOR
;

99 *
mö‹_
 = 
ZMQ_VERSION_MINOR
;

100 *
∑tch_
 = 
ZMQ_VERSION_PATCH
;

101 
	}
}

104 c⁄° *
	$zmq_°ªº‹
 (
î∫um_
)

106  
zmq
::
	`î∫o_to_°rög
 (
î∫um_
);

107 
	}
}

109 
	$zmq_î∫o
 ()

111  
î∫o
;

112 
	}
}

117 *
	$zmq_˘x_√w
 ()

119 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


125 
pgm_îr‹_t
 *
pgm_îr‹
 = 
NULL
;

126 c⁄° 
boﬁ
 
ok
 = 
	`pgm_öô
 (&
pgm_îr‹
);

127 i‡(
ok
 !
TRUE
) {

130 
	`zmq_as£π
 (
pgm_îr‹
 !
NULL
);

131 i‡(
pgm_îr‹
->
domaö
 =
PGM_ERROR_DOMAIN_TIME
 && (

132 
pgm_îr‹
->
code
 =
PGM_ERROR_FAILED
)) {

135 
	`pgm_îr‹_‰ì
 (
pgm_îr‹
);

136 
î∫o
 = 
EINVAL
;

137  
NULL
;

141 
	`zmq_as£π
 (
Ál£
);

145 #ifde‡
ZMQ_HAVE_WINDOWS


150 
WORD
 
vîsi⁄_ªque°ed
 = 
	`MAKEWORD
 (2, 2);

151 
WSADATA
 
wß_d©a
;

152 
rc
 = 
	`WSASèπup
 (
vîsi⁄_ªque°ed
, &
wß_d©a
);

153 
	`zmq_as£π
 (
rc
 == 0);

154 
	`zmq_as£π
 (
	`LOBYTE
 (
wß_d©a
.
wVîsi⁄
) == 2 &&

155 
	`HIBYTE
 (
wß_d©a
.
wVîsi⁄
) == 2);

159 
zmq
::
˘x_t
 *
˘x
 = 
	`√w
 (
°d
::
nŸhrow
) zmq::ctx_t;

160 
	`Æloc_as£π
 (
˘x
);

161  
˘x
;

162 
	}
}

164 
	$zmq_˘x_ãrm
 (*
˘x_
)

166 i‡(!
˘x_
 || !((
zmq
::
˘x_t
*Ë˘x_)->
	`check_èg
 ()) {

167 
î∫o
 = 
EFAULT
;

171 
rc
 = ((
zmq
::
˘x_t
*Ë
˘x_
)->
	`ãrmö©e
 ();

172 
í
 = 
î∫o
;

175 i‡(!
rc
 || 
í
 !
EINTR
) {

176 #ifde‡
ZMQ_HAVE_WINDOWS


178 
rc
 = 
	`WSACÀ™up
 ();

179 
	`wß_as£π
 (
rc
 !
SOCKET_ERROR
);

182 #i‡
deföed
 
ZMQ_HAVE_OPENPGM


184 i‡(
	`pgm_shutdown
 (Ë!
TRUE
)

185 
	`zmq_as£π
 (
Ál£
);

189 
î∫o
 = 
í
;

190  
rc
;

191 
	}
}

193 
	$zmq_˘x_shutdown
 (*
˘x_
)

195 i‡(!
˘x_
 || !((
zmq
::
˘x_t
*Ë˘x_)->
	`check_èg
 ()) {

196 
î∫o
 = 
EFAULT
;

200  ((
zmq
::
˘x_t
*Ë
˘x_
)->
	`shutdown
 ();

201 
	}
}

203 
	$zmq_˘x_£t
 (*
˘x_
, 
›ti⁄_
, 
›tvÆ_
)

205 i‡(!
˘x_
 || !((
zmq
::
˘x_t
*Ë˘x_)->
	`check_èg
 ()) {

206 
î∫o
 = 
EFAULT
;

209  ((
zmq
::
˘x_t
*Ë
˘x_
)->
	`£t
 (
›ti⁄_
, 
›tvÆ_
);

210 
	}
}

212 
	$zmq_˘x_gë
 (*
˘x_
, 
›ti⁄_
)

214 i‡(!
˘x_
 || !((
zmq
::
˘x_t
*Ë˘x_)->
	`check_èg
 ()) {

215 
î∫o
 = 
EFAULT
;

218  ((
zmq
::
˘x_t
*Ë
˘x_
)->
	`gë
 (
›ti⁄_
);

219 
	}
}

223 *
	$zmq_öô
 (
io_thªads_
)

225 i‡(
io_thªads_
 >= 0) {

226 *
˘x
 = 
	`zmq_˘x_√w
 ();

227 
	`zmq_˘x_£t
 (
˘x
, 
ZMQ_IO_THREADS
, 
io_thªads_
);

228  
˘x
;

230 
î∫o
 = 
EINVAL
;

231  
NULL
;

232 
	}
}

234 
	$zmq_ãrm
 (*
˘x_
)

236  
	`zmq_˘x_ãrm
 (
˘x_
);

237 
	}
}

239 
	$zmq_˘x_de°roy
 (*
˘x_
)

241  
	`zmq_˘x_ãrm
 (
˘x_
);

242 
	}
}

247 *
	$zmq_sockë
 (*
˘x_
, 
ty≥_
)

249 i‡(!
˘x_
 || !((
zmq
::
˘x_t
*Ë˘x_)->
	`check_èg
 ()) {

250 
î∫o
 = 
EFAULT
;

251  
NULL
;

253 
zmq
::
˘x_t
 *
˘x
 = (zmq::˘x_t*Ë
˘x_
;

254 
zmq
::
sockë_ba£_t
 *
s
 = 
˘x
->
	`¸óã_sockë
 (
ty≥_
);

255  (*Ë
s
;

256 
	}
}

258 
	$zmq_˛o£
 (*
s_
)

260 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

261 
î∫o
 = 
ENOTSOCK
;

264 ((
zmq
::
sockë_ba£_t
*Ë
s_
)->
	`˛o£
 ();

266 
	}
}

268 
	$zmq_£tsock›t
 (*
s_
, 
›ti⁄_
, c⁄° *
›tvÆ_
,

269 
size_t
 
›tvÆÀn_
)

271 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

272 
î∫o
 = 
ENOTSOCK
;

275 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

276 
ªsu…
 = 
s
->
	`£tsock›t
 (
›ti⁄_
, 
›tvÆ_
, 
›tvÆÀn_
);

277  
ªsu…
;

278 
	}
}

280 
	$zmq_gësock›t
 (*
s_
, 
›ti⁄_
, *
›tvÆ_
, 
size_t
 *
›tvÆÀn_
)

282 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

283 
î∫o
 = 
ENOTSOCK
;

286 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

287 
ªsu…
 = 
s
->
	`gësock›t
 (
›ti⁄_
, 
›tvÆ_
, 
›tvÆÀn_
);

288  
ªsu…
;

289 
	}
}

291 
	$zmq_sockë_m⁄ô‹
 (*
s_
, c⁄° *
addr_
, 
evíts_
)

293 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

294 
î∫o
 = 
ENOTSOCK
;

297 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

298 
ªsu…
 = 
s
->
	`m⁄ô‹
 (
addr_
, 
evíts_
);

299  
ªsu…
;

300 
	}
}

302 
	$zmq_böd
 (*
s_
, c⁄° *
addr_
)

304 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

305 
î∫o
 = 
ENOTSOCK
;

308 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

309 
ªsu…
 = 
s
->
	`böd
 (
addr_
);

310  
ªsu…
;

311 
	}
}

313 
	$zmq_c⁄√˘
 (*
s_
, c⁄° *
addr_
)

315 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

316 
î∫o
 = 
ENOTSOCK
;

319 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

320 
ªsu…
 = 
s
->
	`c⁄√˘
 (
addr_
);

321  
ªsu…
;

322 
	}
}

324 
	$zmq_unböd
 (*
s_
, c⁄° *
addr_
)

326 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

327 
î∫o
 = 
ENOTSOCK
;

330 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

331  
s
->
	`ãrm_ídpoöt
 (
addr_
);

332 
	}
}

334 
	$zmq_disc⁄√˘
 (*
s_
, c⁄° *
addr_
)

336 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

337 
î∫o
 = 
ENOTSOCK
;

340 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

341  
s
->
	`ãrm_ídpoöt
 (
addr_
);

342 
	}
}

347 
	$s_£ndmsg
 (
zmq
::
sockë_ba£_t
 *
s_
, 
zmq_msg_t
 *
msg_
, 
Êags_
)

349 
sz
 = (Ë
	`zmq_msg_size
 (
msg_
);

350 
rc
 = 
s_
->
	`£nd
 ((
zmq
::
msg_t
*Ë
msg_
, 
Êags_
);

351 i‡(
	`u∆ikñy
 (
rc
 < 0))

353  
sz
;

354 
	}
}

357 
	$zmq_£ndmsg
 (*
s_
, 
zmq_msg_t
 *
msg_
, 
Êags_
)

359  
	`zmq_msg_£nd
 (
msg_
, 
s_
, 
Êags_
);

360 
	}
}

362 
	$zmq_£nd
 (*
s_
, c⁄° *
buf_
, 
size_t
 
Àn_
, 
Êags_
)

364 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

365 
î∫o
 = 
ENOTSOCK
;

368 
zmq_msg_t
 
msg
;

369 
rc
 = 
	`zmq_msg_öô_size
 (&
msg
, 
Àn_
);

370 i‡(
rc
 != 0)

372 
	`mem˝y
 (
	`zmq_msg_d©a
 (&
msg
), 
buf_
, 
Àn_
);

374 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

375 
rc
 = 
	`s_£ndmsg
 (
s
, &
msg
, 
Êags_
);

376 i‡(
	`u∆ikñy
 (
rc
 < 0)) {

377 
îr
 = 
î∫o
;

378 
rc2
 = 
	`zmq_msg_˛o£
 (&
msg
);

379 
	`î∫o_as£π
 (
rc2
 == 0);

380 
î∫o
 = 
îr
;

386  
rc
;

387 
	}
}

389 
	$zmq_£nd_c⁄°
 (*
s_
, c⁄° *
buf_
, 
size_t
 
Àn_
, 
Êags_
)

391 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

392 
î∫o
 = 
ENOTSOCK
;

395 
zmq_msg_t
 
msg
;

396 
rc
 = 
	`zmq_msg_öô_d©a
 (&
msg
, (*)
buf_
, 
Àn_
, 
NULL
, NULL);

397 i‡(
rc
 != 0)

400 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

401 
rc
 = 
	`s_£ndmsg
 (
s
, &
msg
, 
Êags_
);

402 i‡(
	`u∆ikñy
 (
rc
 < 0)) {

403 
îr
 = 
î∫o
;

404 
rc2
 = 
	`zmq_msg_˛o£
 (&
msg
);

405 
	`î∫o_as£π
 (
rc2
 == 0);

406 
î∫o
 = 
îr
;

412  
rc
;

413 
	}
}

423 
	$zmq_£ndiov
 (*
s_
, 
iovec
 *
a_
, 
size_t
 
cou¡_
, 
Êags_
)

425 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

426 
î∫o
 = 
ENOTSOCK
;

429 
rc
 = 0;

430 
zmq_msg_t
 
msg
;

431 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

433 
size_t
 
i
 = 0; i < 
cou¡_
; ++i) {

434 
rc
 = 
	`zmq_msg_öô_size
 (&
msg
, 
a_
[
i
].
iov_Àn
);

435 i‡(
rc
 != 0) {

436 
rc
 = -1;

439 
	`mem˝y
 (
	`zmq_msg_d©a
 (&
msg
), 
a_
[
i
].
iov_ba£
,á_[i].
iov_Àn
);

440 i‡(
i
 =
cou¡_
 - 1)

441 
Êags_
 = fœgs_ & ~
ZMQ_SNDMORE
;

442 
rc
 = 
	`s_£ndmsg
 (
s
, &
msg
, 
Êags_
);

443 i‡(
	`u∆ikñy
 (
rc
 < 0)) {

444 
îr
 = 
î∫o
;

445 
rc2
 = 
	`zmq_msg_˛o£
 (&
msg
);

446 
	`î∫o_as£π
 (
rc2
 == 0);

447 
î∫o
 = 
îr
;

448 
rc
 = -1;

452  
rc
;

453 
	}
}

458 
	$s_ªcvmsg
 (
zmq
::
sockë_ba£_t
 *
s_
, 
zmq_msg_t
 *
msg_
, 
Êags_
)

460 
rc
 = 
s_
->
	`ªcv
 ((
zmq
::
msg_t
*Ë
msg_
, 
Êags_
);

461 i‡(
	`u∆ikñy
 (
rc
 < 0))

463  (Ë
	`zmq_msg_size
 (
msg_
);

464 
	}
}

467 
	$zmq_ªcvmsg
 (*
s_
, 
zmq_msg_t
 *
msg_
, 
Êags_
)

469  
	`zmq_msg_ªcv
 (
msg_
, 
s_
, 
Êags_
);

470 
	}
}

473 
	$zmq_ªcv
 (*
s_
, *
buf_
, 
size_t
 
Àn_
, 
Êags_
)

475 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

476 
î∫o
 = 
ENOTSOCK
;

479 
zmq_msg_t
 
msg
;

480 
rc
 = 
	`zmq_msg_öô
 (&
msg
);

481 
	`î∫o_as£π
 (
rc
 == 0);

483 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

484 
nbyãs
 = 
	`s_ªcvmsg
 (
s
, &
msg
, 
Êags_
);

485 i‡(
	`u∆ikñy
 (
nbyãs
 < 0)) {

486 
îr
 = 
î∫o
;

487 
rc
 = 
	`zmq_msg_˛o£
 (&
msg
);

488 
	`î∫o_as£π
 (
rc
 == 0);

489 
î∫o
 = 
îr
;

495 
size_t
 
to_c›y
 = 
	`size_t
 (
nbyãs
Ë< 
Àn_
 ? size_t (nbytes) :Üen_;

496 
	`mem˝y
 (
buf_
, 
	`zmq_msg_d©a
 (&
msg
), 
to_c›y
);

498 
rc
 = 
	`zmq_msg_˛o£
 (&
msg
);

499 
	`î∫o_as£π
 (
rc
 == 0);

501  
nbyãs
;

502 
	}
}

520 
	$zmq_ªcviov
 (*
s_
, 
iovec
 *
a_
, 
size_t
 *
cou¡_
, 
Êags_
)

522 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

523 
î∫o
 = 
ENOTSOCK
;

526 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

528 
size_t
 
cou¡
 = *
cou¡_
;

529 
ƒód
 = 0;

530 
boﬁ
 
ªcvm‹e
 = 
åue
;

532 *
cou¡_
 = 0;

534 
size_t
 
i
 = 0; 
ªcvm‹e
 && i < 
cou¡
; ++i) {

536 
zmq_msg_t
 
msg
;

537 
rc
 = 
	`zmq_msg_öô
 (&
msg
);

538 
	`î∫o_as£π
 (
rc
 == 0);

540 
nbyãs
 = 
	`s_ªcvmsg
 (
s
, &
msg
, 
Êags_
);

541 i‡(
	`u∆ikñy
 (
nbyãs
 < 0)) {

542 
îr
 = 
î∫o
;

543 
rc
 = 
	`zmq_msg_˛o£
 (&
msg
);

544 
	`î∫o_as£π
 (
rc
 == 0);

545 
î∫o
 = 
îr
;

546 
ƒód
 = -1;

550 
a_
[
i
].
iov_Àn
 = 
	`zmq_msg_size
 (&
msg
);

551 
a_
[
i
].
iov_ba£
 = 
	`mÆloc
◊_[i].
iov_Àn
);

552 i‡(
	`u∆ikñy
 (!
a_
[
i
].
iov_ba£
)) {

553 
î∫o
 = 
ENOMEM
;

556 
	`mem˝y
(
a_
[
i
].
iov_ba£
,
°©ic_ˇ°
<*> (
	`zmq_msg_d©a
 (&
msg
)),

557 
a_
[
i
].
iov_Àn
);

559 
ªcvm‹e
 = ((
zmq
::
msg_t
*Ë(*Ë&
msg
)->
	`Êags
 (Ë& zmq::msg_t::
m‹e
;

560 
rc
 = 
	`zmq_msg_˛o£
(&
msg
);

561 
	`î∫o_as£π
 (
rc
 == 0);

562 ++*
cou¡_
;

563 ++
ƒód
;

565  
ƒód
;

566 
	}
}

570 
	$zmq_msg_öô
 (
zmq_msg_t
 *
msg_
)

572  ((
zmq
::
msg_t
*Ë
msg_
)->
	`öô
 ();

573 
	}
}

575 
	$zmq_msg_öô_size
 (
zmq_msg_t
 *
msg_
, 
size_t
 
size_
)

577  ((
zmq
::
msg_t
*Ë
msg_
)->
	`öô_size
 (
size_
);

578 
	}
}

580 
	$zmq_msg_öô_d©a
 (
zmq_msg_t
 *
msg_
, *
d©a_
, 
size_t
 
size_
,

581 
zmq_‰ì_‚
 *
f‚_
, *
höt_
)

583  ((
zmq
::
msg_t
*Ë
msg_
)->
	`öô_d©a
 (
d©a_
, 
size_
, 
f‚_
, 
höt_
);

584 
	}
}

586 
	$zmq_msg_£nd
 (
zmq_msg_t
 *
msg_
, *
s_
, 
Êags_
)

588 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

589 
î∫o
 = 
ENOTSOCK
;

592 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

593 
ªsu…
 = 
	`s_£ndmsg
 (
s
, 
msg_
, 
Êags_
);

594  
ªsu…
;

595 
	}
}

597 
	$zmq_msg_ªcv
 (
zmq_msg_t
 *
msg_
, *
s_
, 
Êags_
)

599 i‡(!
s_
 || !((
zmq
::
sockë_ba£_t
*Ës_)->
	`check_èg
 ()) {

600 
î∫o
 = 
ENOTSOCK
;

603 
zmq
::
sockë_ba£_t
 *
s
 = (zmq::sockë_ba£_à*Ë
s_
;

604 
ªsu…
 = 
	`s_ªcvmsg
 (
s
, 
msg_
, 
Êags_
);

605  
ªsu…
;

606 
	}
}

608 
	$zmq_msg_˛o£
 (
zmq_msg_t
 *
msg_
)

610  ((
zmq
::
msg_t
*Ë
msg_
)->
	`˛o£
 ();

611 
	}
}

613 
	$zmq_msg_move
 (
zmq_msg_t
 *
de°_
, zmq_msg_à*
§c_
)

615  ((
zmq
::
msg_t
*Ë
de°_
)->
	`move
 (*(zmq::msg_t*Ë
§c_
);

616 
	}
}

618 
	$zmq_msg_c›y
 (
zmq_msg_t
 *
de°_
, zmq_msg_à*
§c_
)

620  ((
zmq
::
msg_t
*Ë
de°_
)->
	`c›y
 (*(zmq::msg_t*Ë
§c_
);

621 
	}
}

623 *
	$zmq_msg_d©a
 (
zmq_msg_t
 *
msg_
)

625  ((
zmq
::
msg_t
*Ë
msg_
)->
	`d©a
 ();

626 
	}
}

628 
size_t
 
	$zmq_msg_size
 (
zmq_msg_t
 *
msg_
)

630  ((
zmq
::
msg_t
*Ë
msg_
)->
	`size
 ();

631 
	}
}

633 
	$zmq_msg_m‹e
 (
zmq_msg_t
 *
msg_
)

635  
	`zmq_msg_gë
 (
msg_
, 
ZMQ_MORE
);

636 
	}
}

638 
	$zmq_msg_gë
 (
zmq_msg_t
 *
msg_
, 
›ti⁄_
)

640 
›ti⁄_
) {

641 
ZMQ_MORE
:

642  (((
zmq
::
msg_t
*Ë
msg_
)->
	`Êags
 (Ë& zmq::msg_t::
m‹e
)? 1: 0;

644 
î∫o
 = 
EINVAL
;

647 
	}
}

649 
	$zmq_msg_£t
 (
zmq_msg_t
 *, , )

652 
î∫o
 = 
EINVAL
;

654 
	}
}

658 
	$zmq_pﬁl
 (
zmq_pﬁlôem_t
 *
ôems_
, 
nôems_
, 
timeout_
)

660 #i‡
deföed
 
ZMQ_POLL_BASED_ON_POLL


661 i‡(
	`u∆ikñy
 (
nôems_
 < 0)) {

662 
î∫o
 = 
EINVAL
;

665 i‡(
	`u∆ikñy
 (
nôems_
 == 0)) {

666 i‡(
timeout_
 == 0)

668 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


669 
	`SÀï
 (
timeout_
 > 0 ?Åimeout_ : 
INFINITE
);

671 #ñi‡
deföed
 
ZMQ_HAVE_ANDROID


672 
	`u¶ìp
 (
timeout_
 * 1000);

675  
	`u¶ìp
 (
timeout_
 * 1000);

679 i‡(!
ôems_
) {

680 
î∫o
 = 
EFAULT
;

684 
zmq
::
˛ock_t
 
˛ock
;

685 
uöt64_t
 
now
 = 0;

686 
uöt64_t
 
íd
 = 0;

687 
pﬁlfd
 
•ﬁlfds
[
ZMQ_POLLITEMS_DFLT
];

688 
pﬁlfd
 *
pﬁlfds
 = 
•ﬁlfds
;

690 i‡(
nôems_
 > 
ZMQ_POLLITEMS_DFLT
) {

691 
pﬁlfds
 = (
pﬁlfd
*Ë
	`mÆloc
 (
nôems_
 *  (pollfd));

692 
	`Æloc_as£π
 (
pﬁlfds
);

696 
i
 = 0; i !
nôems_
; i++) {

700 i‡(
ôems_
 [
i
].
sockë
) {

701 
size_t
 
zmq_fd_size
 =  (
zmq
::
fd_t
);

702 i‡(
	`zmq_gësock›t
 (
ôems_
 [
i
].
sockë
, 
ZMQ_FD
, &
pﬁlfds
 [i].
fd
,

703 &
zmq_fd_size
) == -1) {

704 i‡(
pﬁlfds
 !
•ﬁlfds
)

705 
	`‰ì
 (
pﬁlfds
);

708 
pﬁlfds
 [
i
].
evíts
 = 
ôems_
 [i].evít†? 
POLLIN
 : 0;

713 
pﬁlfds
 [
i
].
fd
 = 
ôems_
 [i].fd;

714 
pﬁlfds
 [
i
].
evíts
 =

715 (
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLIN
 ? 
POLLIN
 : 0) |

716 (
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLOUT
 ? 
POLLOUT
 : 0);

720 
boﬁ
 
fú°_∑ss
 = 
åue
;

721 
√víts
 = 0;

723 
åue
) {

725 
timeout
;

726 i‡(
fú°_∑ss
)

727 
timeout
 = 0;

729 i‡(
timeout_
 < 0)

730 
timeout
 = -1;

732 
timeout
 = 
íd
 - 
now
;

735 
åue
) {

736 
rc
 = 
	`pﬁl
 (
pﬁlfds
, 
nôems_
, 
timeout
);

737 i‡(
rc
 =-1 && 
î∫o
 =
EINTR
) {

738 i‡(
pﬁlfds
 !
•ﬁlfds
)

739 
	`‰ì
 (
pﬁlfds
);

742 
	`î∫o_as£π
 (
rc
 >= 0);

746 
i
 = 0; i !
nôems_
; i++) {

748 
ôems_
 [
i
].
ªvíts
 = 0;

752 i‡(
ôems_
 [
i
].
sockë
) {

753 
size_t
 
zmq_evíts_size
 =  (
uöt32_t
);

754 
uöt32_t
 
zmq_evíts
;

755 i‡(
	`zmq_gësock›t
 (
ôems_
 [
i
].
sockë
, 
ZMQ_EVENTS
, &
zmq_evíts
,

756 &
zmq_evíts_size
) == -1) {

757 i‡(
pﬁlfds
 !
•ﬁlfds
)

758 
	`‰ì
 (
pﬁlfds
);

761 i‡((
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLOUT
) &&

762 (
zmq_evíts
 & 
ZMQ_POLLOUT
))

763 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLOUT
;

764 i‡((
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLIN
) &&

765 (
zmq_evíts
 & 
ZMQ_POLLIN
))

766 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLIN
;

771 i‡(
pﬁlfds
 [
i
].
ªvíts
 & 
POLLIN
)

772 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLIN
;

773 i‡(
pﬁlfds
 [
i
].
ªvíts
 & 
POLLOUT
)

774 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLOUT
;

775 i‡(
pﬁlfds
 [
i
].
ªvíts
 & ~(
POLLIN
 | 
POLLOUT
))

776 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLERR
;

779 i‡(
ôems_
 [
i
].
ªvíts
)

780 
√víts
++;

784 i‡(
timeout_
 == 0)

788 i‡(
√víts
)

793 i‡(
timeout_
 < 0) {

794 i‡(
fú°_∑ss
)

795 
fú°_∑ss
 = 
Ál£
;

803 i‡(
fú°_∑ss
) {

804 
now
 = 
˛ock
.
	`now_ms
 ();

805 
íd
 = 
now
 + 
timeout_
;

806 i‡(
now
 =
íd
)

808 
fú°_∑ss
 = 
Ál£
;

813 
now
 = 
˛ock
.
	`now_ms
 ();

814 i‡(
now
 >
íd
)

818 i‡(
pﬁlfds
 !
•ﬁlfds
)

819 
	`‰ì
 (
pﬁlfds
);

820  
√víts
;

822 #ñi‡
deföed
 
ZMQ_POLL_BASED_ON_SELECT


824 i‡(
	`u∆ikñy
 (
nôems_
 < 0)) {

825 
î∫o
 = 
EINVAL
;

828 i‡(
	`u∆ikñy
 (
nôems_
 == 0)) {

829 i‡(
timeout_
 == 0)

831 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


832 
	`SÀï
 (
timeout_
 > 0 ?Åimeout_ : 
INFINITE
);

835  
	`u¶ìp
 (
timeout_
 * 1000);

838 
zmq
::
˛ock_t
 
˛ock
;

839 
uöt64_t
 
now
 = 0;

840 
uöt64_t
 
íd
 = 0;

844 
	`zmq_as£π
 (
nôems_
 <
FD_SETSIZE
);

846 
fd_£t
 
pﬁl£t_ö
;

847 
	`FD_ZERO
 (&
pﬁl£t_ö
);

848 
fd_£t
 
pﬁl£t_out
;

849 
	`FD_ZERO
 (&
pﬁl£t_out
);

850 
fd_£t
 
pﬁl£t_îr
;

851 
	`FD_ZERO
 (&
pﬁl£t_îr
);

853 
zmq
::
fd_t
 
maxfd
 = 0;

856 
i
 = 0; i !
nôems_
; i++) {

860 i‡(
ôems_
 [
i
].
sockë
) {

861 
size_t
 
zmq_fd_size
 =  (
zmq
::
fd_t
);

862 
zmq
::
fd_t
 
nŸify_fd
;

863 i‡(
	`zmq_gësock›t
 (
ôems_
 [
i
].
sockë
, 
ZMQ_FD
, &
nŸify_fd
,

864 &
zmq_fd_size
) == -1)

866 i‡(
ôems_
 [
i
].
evíts
) {

867 
	`FD_SET
 (
nŸify_fd
, &
pﬁl£t_ö
);

868 i‡(
maxfd
 < 
nŸify_fd
)

869 
maxfd
 = 
nŸify_fd
;

875 i‡(
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLIN
)

876 
	`FD_SET
 (
ôems_
 [
i
].
fd
, &
pﬁl£t_ö
);

877 i‡(
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLOUT
)

878 
	`FD_SET
 (
ôems_
 [
i
].
fd
, &
pﬁl£t_out
);

879 i‡(
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLERR
)

880 
	`FD_SET
 (
ôems_
 [
i
].
fd
, &
pﬁl£t_îr
);

881 i‡(
maxfd
 < 
ôems_
 [
i
].
fd
)

882 
maxfd
 = 
ôems_
 [
i
].
fd
;

886 
boﬁ
 
fú°_∑ss
 = 
åue
;

887 
√víts
 = 0;

888 
fd_£t
 
ö£t
, 
out£t
, 
îr£t
;

890 
åue
) {

893 
timevÆ
 
timeout
;

894 
timevÆ
 *
±imeout
;

895 i‡(
fú°_∑ss
) {

896 
timeout
.
tv_£c
 = 0;

897 
timeout
.
tv_u£c
 = 0;

898 
±imeout
 = &
timeout
;

901 i‡(
timeout_
 < 0)

902 
±imeout
 = 
NULL
;

904 
timeout
.
tv_£c
 = (Ë((
íd
 - 
now
) / 1000);

905 
timeout
.
tv_u£c
 = (Ë((
íd
 - 
now
) % 1000 * 1000);

906 
±imeout
 = &
timeout
;

910 
åue
) {

911 
	`mem˝y
 (&
ö£t
, &
pﬁl£t_ö
,  (
fd_£t
));

912 
	`mem˝y
 (&
out£t
, &
pﬁl£t_out
,  (
fd_£t
));

913 
	`mem˝y
 (&
îr£t
, &
pﬁl£t_îr
,  (
fd_£t
));

914 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


915 
rc
 = 
	`£À˘
 (0, &
ö£t
, &
out£t
, &
îr£t
, 
±imeout
);

916 i‡(
	`u∆ikñy
 (
rc
 =
SOCKET_ERROR
)) {

917 
î∫o
 = 
zmq
::
	`wß_îr‹_to_î∫o
 (
	`WSAGëLa°Eº‹
 ());

918 
	`wß_as£π
 (
î∫o
 =
ENOTSOCK
);

922 
rc
 = 
	`£À˘
 (
maxfd
 + 1, &
ö£t
, &
out£t
, &
îr£t
, 
±imeout
);

923 i‡(
	`u∆ikñy
 (
rc
 == -1)) {

924 
	`î∫o_as£π
 (
î∫o
 =
EINTR
 ||Éºnÿ=
EBADF
);

932 
i
 = 0; i !
nôems_
; i++) {

934 
ôems_
 [
i
].
ªvíts
 = 0;

938 i‡(
ôems_
 [
i
].
sockë
) {

939 
size_t
 
zmq_evíts_size
 =  (
uöt32_t
);

940 
uöt32_t
 
zmq_evíts
;

941 i‡(
	`zmq_gësock›t
 (
ôems_
 [
i
].
sockë
, 
ZMQ_EVENTS
, &
zmq_evíts
,

942 &
zmq_evíts_size
) == -1)

944 i‡((
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLOUT
) &&

945 (
zmq_evíts
 & 
ZMQ_POLLOUT
))

946 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLOUT
;

947 i‡((
ôems_
 [
i
].
evíts
 & 
ZMQ_POLLIN
) &&

948 (
zmq_evíts
 & 
ZMQ_POLLIN
))

949 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLIN
;

954 i‡(
	`FD_ISSET
 (
ôems_
 [
i
].
fd
, &
ö£t
))

955 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLIN
;

956 i‡(
	`FD_ISSET
 (
ôems_
 [
i
].
fd
, &
out£t
))

957 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLOUT
;

958 i‡(
	`FD_ISSET
 (
ôems_
 [
i
].
fd
, &
îr£t
))

959 
ôems_
 [
i
].
ªvíts
 |
ZMQ_POLLERR
;

962 i‡(
ôems_
 [
i
].
ªvíts
)

963 
√víts
++;

967 i‡(
timeout_
 == 0)

971 i‡(
√víts
)

976 i‡(
timeout_
 < 0) {

977 i‡(
fú°_∑ss
)

978 
fú°_∑ss
 = 
Ál£
;

986 i‡(
fú°_∑ss
) {

987 
now
 = 
˛ock
.
	`now_ms
 ();

988 
íd
 = 
now
 + 
timeout_
;

989 i‡(
now
 =
íd
)

991 
fú°_∑ss
 = 
Ál£
;

996 
now
 = 
˛ock
.
	`now_ms
 ();

997 i‡(
now
 >
íd
)

1001  
√víts
;

1005 
î∫o
 = 
ENOTSUP
;

1008 
	}
}

1010 #i‡
deföed
 
ZMQ_POLL_BASED_ON_SELECT


1011 #unde‡
ZMQ_POLL_BASED_ON_SELECT


1013 #i‡
deföed
 
ZMQ_POLL_BASED_ON_POLL


1014 #unde‡
ZMQ_POLL_BASED_ON_POLL


1019 
	$zmq_¥oxy
 (*
‰⁄ãnd_
, *
backíd_
, *
ˇ±uª_
)

1021 i‡(!
‰⁄ãnd_
 || !
backíd_
) {

1022 
î∫o
 = 
EFAULT
;

1025  
zmq
::
	`¥oxy
 (

1026 (
zmq
::
sockë_ba£_t
*Ë
‰⁄ãnd_
,

1027 (
zmq
::
sockë_ba£_t
*Ë
backíd_
,

1028 (
zmq
::
sockë_ba£_t
*Ë
ˇ±uª_
);

1029 
	}
}

1031 
	$zmq_¥oxy_°ìøbÀ
 (*
‰⁄ãnd_
, *
backíd_
, *
ˇ±uª_
, *
c⁄åﬁ_
)

1033 i‡(!
‰⁄ãnd_
 || !
backíd_
) {

1034 
î∫o
 = 
EFAULT
;

1037  
zmq
::
	`¥oxy
 (

1038 (
zmq
::
sockë_ba£_t
*Ë
‰⁄ãnd_
,

1039 (
zmq
::
sockë_ba£_t
*Ë
backíd_
,

1040 (
zmq
::
sockë_ba£_t
*Ë
ˇ±uª_
,

1041 (
zmq
::
sockë_ba£_t
*Ë
c⁄åﬁ_
);

1042 
	}
}

1046 
	$zmq_devi˚
 (, *
‰⁄ãnd_
, *
backíd_
)

1048  
zmq
::
	`¥oxy
 (

1049 (
zmq
::
sockë_ba£_t
*Ë
‰⁄ãnd_
,

1050 (
zmq
::
sockë_ba£_t
*Ë
backíd_
, 
NULL
);

1051 
	}
}

	@zmq_utils.cpp

20 
	~"∂©f‹m.hµ
"

22 
	~"˛ock.hµ
"

23 
	~"îr.hµ
"

24 
	~"thªad.hµ
"

25 
	~<as£π.h
>

26 
	~"../ö˛ude/zmq_utûs.h
"

28 #i‡!
deföed
 
ZMQ_HAVE_WINDOWS


29 
	~<uni°d.h
>

31 
	~"wödows.hµ
"

33 #ifde‡
HAVE_LIBSODIUM


34 
	~<sodium.h
>

38 
	$zmq_¶ìp
 (
£c⁄ds_
)

40 #i‡
deföed
 
ZMQ_HAVE_WINDOWS


41 
	`SÀï
 (
£c⁄ds_
 * 1000);

43 
	`¶ìp
 (
£c⁄ds_
);

45 
	}
}

47 *
	$zmq_°›w©ch_°¨t
 ()

49 
uöt64_t
 *
w©ch
 = (uöt64_t*Ë
	`mÆloc
 ( (uint64_t));

50 
	`Æloc_as£π
 (
w©ch
);

51 *
w©ch
 = 
zmq
::
˛ock_t
::
	`now_us
 ();

52  (*Ë
w©ch
;

53 
	}
}

55 
	$zmq_°›w©ch_°›
 (*
w©ch_
)

57 
uöt64_t
 
íd
 = 
zmq
::
˛ock_t
::
	`now_us
 ();

58 
uöt64_t
 
°¨t
 = *(uöt64_t*Ë
w©ch_
;

59 
	`‰ì
 (
w©ch_
);

60  (Ë(
íd
 - 
°¨t
);

61 
	}
}

63 *
	$zmq_thªad°¨t
(
zmq_thªad_‚
* 
func
, * 
¨g
)

65 
zmq
::
thªad_t
* 
thªad
 = 
√w
 zmq::thread_t;

66 
thªad
->
	`°¨t
(
func
, 
¨g
);

67  
thªad
;

68 
	}
}

70 
	$zmq_thªad˛o£
(* 
thªad
)

72 
zmq
::
thªad_t
* 
pThªad
 = 
°©ic_ˇ°
<zmq::thªad_t*>(
thªad
);

73 
pThªad
->
	`°›
();

74 
dñëe
 
pThªad
;

75 
	}
}

80 
	gícodî
 [85 + 1] = {

88 
uöt8_t
 
	gdecodî
 [96] = {

109 *
	$zmq_z85_ícode
 (*
de°
, 
uöt8_t
 *
d©a
, 
size_t
 
size
)

111 i‡(
size
 % 4 != 0) {

112 
î∫o
 = 
EINVAL
;

113  
NULL
;

115 
ch¨_nbr
 = 0;

116 
byã_nbr
 = 0;

117 
uöt32_t
 
vÆue
 = 0;

118 
byã_nbr
 < 
size
) {

120 
vÆue
 = vÆuê* 256 + 
d©a
 [
byã_nbr
++];

121 i‡(
byã_nbr
 % 4 == 0) {

123 
divis‹
 = 85 * 85 * 85 * 85;

124 
divis‹
) {

125 
de°
 [
ch¨_nbr
++] = 
ícodî
 [
vÆue
 / 
divis‹
 % 85];

126 
divis‹
 /= 85;

128 
vÆue
 = 0;

131 
	`as£π
 (
ch¨_nbr
 =
size
 * 5 / 4);

132 
de°
 [
ch¨_nbr
] = 0;

133  
de°
;

134 
	}
}

143 
uöt8_t
 *
	$zmq_z85_decode
 (
uöt8_t
 *
de°
, *
°rög
)

145 i‡(
	`°æí
 (
°rög
) % 5 != 0) {

146 
î∫o
 = 
EINVAL
;

147  
NULL
;

149 
byã_nbr
 = 0;

150 
ch¨_nbr
 = 0;

151 
°rög_Àn
 = 
	`°æí
 (
°rög
);

152 
uöt32_t
 
vÆue
 = 0;

153 
ch¨_nbr
 < 
°rög_Àn
) {

155 
vÆue
 = vÆuê* 85 + 
decodî
 [(
uöt8_t
Ë
°rög
 [
ch¨_nbr
++] - 32];

156 i‡(
ch¨_nbr
 % 5 == 0) {

158 
divis‹
 = 256 * 256 * 256;

159 
divis‹
) {

160 
de°
 [
byã_nbr
++] = 
vÆue
 / 
divis‹
 % 256;

161 
divis‹
 /= 256;

163 
vÆue
 = 0;

166 
	`as£π
 (
byã_nbr
 =
	`°æí
 (
°rög
) * 4 / 5);

167  
de°
;

168 
	}
}

176 
	$zmq_curve_key∑ú
 (*
z85_public_key
, *
z85_£¸ë_key
)

178 #ifde‡
HAVE_LIBSODIUM


179 #i‡
¸y±o_box_PUBLICKEYBYTES
 != 32 \

180 || 
¸y±o_box_SECRETKEYBYTES
 != 32

184 
uöt8_t
 
public_key
 [32];

185 
uöt8_t
 
£¸ë_key
 [32];

187 
rc
 = 
	`¸y±o_box_key∑ú
 (
public_key
, 
£¸ë_key
);

189 i‡(
rc
)

190  
rc
;

192 
	`zmq_z85_ícode
 (
z85_public_key
, 
public_key
, 32);

193 
	`zmq_z85_ícode
 (
z85_£¸ë_key
, 
£¸ë_key
, 32);

197 
î∫o
 = 
ENOTSUP
;

200 
	}
}

	@../include/zmq.h

28 #i‚de‡
__ZMQ_H_INCLUDED__


29 
	#__ZMQ_H_INCLUDED__


	)

32 
	#ZMQ_VERSION_MAJOR
 4

	)

33 
	#ZMQ_VERSION_MINOR
 0

	)

34 
	#ZMQ_VERSION_PATCH
 5

	)

36 
	#ZMQ_MAKE_VERSION
(
maj‹
, 
mö‹
, 
∑tch
) \

37 ((
maj‹
Ë* 10000 + (
mö‹
Ë* 100 + (
∑tch
))

	)

38 
	#ZMQ_VERSION
 \

39 
	`ZMQ_MAKE_VERSION
(
ZMQ_VERSION_MAJOR
, 
ZMQ_VERSION_MINOR
, 
ZMQ_VERSION_PATCH
)

	)

41 #ifde‡
__˝lu•lus


45 #i‡!
deföed
 
_WIN32_WCE


46 
	~<î∫o.h
>

48 
	~<°ddef.h
>

49 
	~<°dio.h
>

50 #i‡
deföed
 
_WIN32


51 
	~<wösock2.h
>

55 #i‡
deföed
 
_WIN32


56 #i‡
deföed
 
ZMQ_STATIC


57 
	#ZMQ_EXPORT


	)

58 #ñi‡
deföed
 
DLL_EXPORT


59 
	#ZMQ_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

61 
	#ZMQ_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

64 #i‡
deföed
 
__SUNPRO_C
 || deföed 
__SUNPRO_CC


65 
	#ZMQ_EXPORT
 
__globÆ


	)

66 #ñi‡(
deföed
 
__GNUC__
 && __GNUC__ >4Ë|| deföed 
__INTEL_COMPILER


67 
	#ZMQ_EXPORT
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

69 
	#ZMQ_EXPORT


	)

74 #i‡
deföed
 
ZMQ_HAVE_SOLARIS
 || deföed 
ZMQ_HAVE_OPENVMS


75 
	~<öây≥s.h
>

76 #ñi‡
deföed
 
_MSC_VER
 && _MSC_VER < 1600

77 #i‚de‡
öt32_t


78 
__öt32
 
	töt32_t
;

80 #i‚de‡
uöt16_t


81 
	t__öt16
 
	tuöt16_t
;

83 #i‚de‡
uöt8_t


84 
	t__öt8
 
	tuöt8_t
;

87 
	~<°döt.h
>

97 
	#ZMQ_HAUSNUMERO
 156384712

	)

100 #i‚de‡
ENOTSUP


101 
	#ENOTSUP
 (
ZMQ_HAUSNUMERO
 + 1)

	)

103 #i‚de‡
EPROTONOSUPPORT


104 
	#EPROTONOSUPPORT
 (
ZMQ_HAUSNUMERO
 + 2)

	)

106 #i‚de‡
ENOBUFS


107 
	#ENOBUFS
 (
ZMQ_HAUSNUMERO
 + 3)

	)

109 #i‚de‡
ENETDOWN


110 
	#ENETDOWN
 (
ZMQ_HAUSNUMERO
 + 4)

	)

112 #i‚de‡
EADDRINUSE


113 
	#EADDRINUSE
 (
ZMQ_HAUSNUMERO
 + 5)

	)

115 #i‚de‡
EADDRNOTAVAIL


116 
	#EADDRNOTAVAIL
 (
ZMQ_HAUSNUMERO
 + 6)

	)

118 #i‚de‡
ECONNREFUSED


119 
	#ECONNREFUSED
 (
ZMQ_HAUSNUMERO
 + 7)

	)

121 #i‚de‡
EINPROGRESS


122 
	#EINPROGRESS
 (
ZMQ_HAUSNUMERO
 + 8)

	)

124 #i‚de‡
ENOTSOCK


125 
	#ENOTSOCK
 (
ZMQ_HAUSNUMERO
 + 9)

	)

127 #i‚de‡
EMSGSIZE


128 
	#EMSGSIZE
 (
ZMQ_HAUSNUMERO
 + 10)

	)

130 #i‚de‡
EAFNOSUPPORT


131 
	#EAFNOSUPPORT
 (
ZMQ_HAUSNUMERO
 + 11)

	)

133 #i‚de‡
ENETUNREACH


134 
	#ENETUNREACH
 (
ZMQ_HAUSNUMERO
 + 12)

	)

136 #i‚de‡
ECONNABORTED


137 
	#ECONNABORTED
 (
ZMQ_HAUSNUMERO
 + 13)

	)

139 #i‚de‡
ECONNRESET


140 
	#ECONNRESET
 (
ZMQ_HAUSNUMERO
 + 14)

	)

142 #i‚de‡
ENOTCONN


143 
	#ENOTCONN
 (
ZMQ_HAUSNUMERO
 + 15)

	)

145 #i‚de‡
ETIMEDOUT


146 
	#ETIMEDOUT
 (
ZMQ_HAUSNUMERO
 + 16)

	)

148 #i‚de‡
EHOSTUNREACH


149 
	#EHOSTUNREACH
 (
ZMQ_HAUSNUMERO
 + 17)

	)

151 #i‚de‡
ENETRESET


152 
	#ENETRESET
 (
ZMQ_HAUSNUMERO
 + 18)

	)

156 
	#EFSM
 (
ZMQ_HAUSNUMERO
 + 51)

	)

157 
	#ENOCOMPATPROTO
 (
ZMQ_HAUSNUMERO
 + 52)

	)

158 
	#ETERM
 (
ZMQ_HAUSNUMERO
 + 53)

	)

159 
	#EMTHREAD
 (
ZMQ_HAUSNUMERO
 + 54)

	)

162 
ZMQ_EXPORT
 
zmq_vîsi⁄
 (*
maj‹
, *
mö‹
, *
∑tch
);

168 
ZMQ_EXPORT
 
zmq_î∫o
 ();

171 
ZMQ_EXPORT
 c⁄° *
zmq_°ªº‹
 (
î∫um
);

179 
	#ZMQ_IO_THREADS
 1

	)

180 
	#ZMQ_MAX_SOCKETS
 2

	)

183 
	#ZMQ_IO_THREADS_DFLT
 1

	)

184 
	#ZMQ_MAX_SOCKETS_DFLT
 1023

	)

186 
ZMQ_EXPORT
 *
zmq_˘x_√w
 ();

187 
ZMQ_EXPORT
 
zmq_˘x_ãrm
 (*
c⁄ãxt
);

188 
ZMQ_EXPORT
 
zmq_˘x_shutdown
 (*
˘x_
);

189 
ZMQ_EXPORT
 
zmq_˘x_£t
 (*
c⁄ãxt
, 
›ti⁄
, 
›tvÆ
);

190 
ZMQ_EXPORT
 
zmq_˘x_gë
 (*
c⁄ãxt
, 
›ti⁄
);

193 
ZMQ_EXPORT
 *
zmq_öô
 (
io_thªads
);

194 
ZMQ_EXPORT
 
zmq_ãrm
 (*
c⁄ãxt
);

195 
ZMQ_EXPORT
 
zmq_˘x_de°roy
 (*
c⁄ãxt
);

202 
	szmq_msg_t
 {
_
 [32];} 
	tzmq_msg_t
;

204 (
zmq_‰ì_‚
Ë(*
	td©a
, *
	thöt
);

206 
ZMQ_EXPORT
 
zmq_msg_öô
 (
zmq_msg_t
 *
msg
);

207 
ZMQ_EXPORT
 
zmq_msg_öô_size
 (
zmq_msg_t
 *
msg
, 
size_t
 
size
);

208 
ZMQ_EXPORT
 
zmq_msg_öô_d©a
 (
zmq_msg_t
 *
msg
, *
d©a
,

209 
size_t
 
size
, 
zmq_‰ì_‚
 *
f‚
, *
höt
);

210 
ZMQ_EXPORT
 
zmq_msg_£nd
 (
zmq_msg_t
 *
msg
, *
s
, 
Êags
);

211 
ZMQ_EXPORT
 
zmq_msg_ªcv
 (
zmq_msg_t
 *
msg
, *
s
, 
Êags
);

212 
ZMQ_EXPORT
 
zmq_msg_˛o£
 (
zmq_msg_t
 *
msg
);

213 
ZMQ_EXPORT
 
zmq_msg_move
 (
zmq_msg_t
 *
de°
, zmq_msg_à*
§c
);

214 
ZMQ_EXPORT
 
zmq_msg_c›y
 (
zmq_msg_t
 *
de°
, zmq_msg_à*
§c
);

215 
ZMQ_EXPORT
 *
zmq_msg_d©a
 (
zmq_msg_t
 *
msg
);

216 
ZMQ_EXPORT
 
size_t
 
zmq_msg_size
 (
zmq_msg_t
 *
msg
);

217 
ZMQ_EXPORT
 
zmq_msg_m‹e
 (
zmq_msg_t
 *
msg
);

218 
ZMQ_EXPORT
 
zmq_msg_gë
 (
zmq_msg_t
 *
msg
, 
›ti⁄
);

219 
ZMQ_EXPORT
 
zmq_msg_£t
 (
zmq_msg_t
 *
msg
, 
›ti⁄
, 
›tvÆ
);

227 
	#ZMQ_PAIR
 0

	)

228 
	#ZMQ_PUB
 1

	)

229 
	#ZMQ_SUB
 2

	)

230 
	#ZMQ_REQ
 3

	)

231 
	#ZMQ_REP
 4

	)

232 
	#ZMQ_DEALER
 5

	)

233 
	#ZMQ_ROUTER
 6

	)

234 
	#ZMQ_PULL
 7

	)

235 
	#ZMQ_PUSH
 8

	)

236 
	#ZMQ_XPUB
 9

	)

237 
	#ZMQ_XSUB
 10

	)

238 
	#ZMQ_STREAM
 11

	)

241 
	#ZMQ_XREQ
 
ZMQ_DEALER


	)

242 
	#ZMQ_XREP
 
ZMQ_ROUTER


	)

245 
	#ZMQ_AFFINITY
 4

	)

246 
	#ZMQ_IDENTITY
 5

	)

247 
	#ZMQ_SUBSCRIBE
 6

	)

248 
	#ZMQ_UNSUBSCRIBE
 7

	)

249 
	#ZMQ_RATE
 8

	)

250 
	#ZMQ_RECOVERY_IVL
 9

	)

251 
	#ZMQ_SNDBUF
 11

	)

252 
	#ZMQ_RCVBUF
 12

	)

253 
	#ZMQ_RCVMORE
 13

	)

254 
	#ZMQ_FD
 14

	)

255 
	#ZMQ_EVENTS
 15

	)

256 
	#ZMQ_TYPE
 16

	)

257 
	#ZMQ_LINGER
 17

	)

258 
	#ZMQ_RECONNECT_IVL
 18

	)

259 
	#ZMQ_BACKLOG
 19

	)

260 
	#ZMQ_RECONNECT_IVL_MAX
 21

	)

261 
	#ZMQ_MAXMSGSIZE
 22

	)

262 
	#ZMQ_SNDHWM
 23

	)

263 
	#ZMQ_RCVHWM
 24

	)

264 
	#ZMQ_MULTICAST_HOPS
 25

	)

265 
	#ZMQ_RCVTIMEO
 27

	)

266 
	#ZMQ_SNDTIMEO
 28

	)

267 
	#ZMQ_LAST_ENDPOINT
 32

	)

268 
	#ZMQ_ROUTER_MANDATORY
 33

	)

269 
	#ZMQ_TCP_KEEPALIVE
 34

	)

270 
	#ZMQ_TCP_KEEPALIVE_CNT
 35

	)

271 
	#ZMQ_TCP_KEEPALIVE_IDLE
 36

	)

272 
	#ZMQ_TCP_KEEPALIVE_INTVL
 37

	)

273 
	#ZMQ_TCP_ACCEPT_FILTER
 38

	)

274 
	#ZMQ_IMMEDIATE
 39

	)

275 
	#ZMQ_XPUB_VERBOSE
 40

	)

276 
	#ZMQ_ROUTER_RAW
 41

	)

277 
	#ZMQ_IPV6
 42

	)

278 
	#ZMQ_MECHANISM
 43

	)

279 
	#ZMQ_PLAIN_SERVER
 44

	)

280 
	#ZMQ_PLAIN_USERNAME
 45

	)

281 
	#ZMQ_PLAIN_PASSWORD
 46

	)

282 
	#ZMQ_CURVE_SERVER
 47

	)

283 
	#ZMQ_CURVE_PUBLICKEY
 48

	)

284 
	#ZMQ_CURVE_SECRETKEY
 49

	)

285 
	#ZMQ_CURVE_SERVERKEY
 50

	)

286 
	#ZMQ_PROBE_ROUTER
 51

	)

287 
	#ZMQ_REQ_CORRELATE
 52

	)

288 
	#ZMQ_REQ_RELAXED
 53

	)

289 
	#ZMQ_CONFLATE
 54

	)

290 
	#ZMQ_ZAP_DOMAIN
 55

	)

293 
	#ZMQ_MORE
 1

	)

296 
	#ZMQ_DONTWAIT
 1

	)

297 
	#ZMQ_SNDMORE
 2

	)

300 
	#ZMQ_NULL
 0

	)

301 
	#ZMQ_PLAIN
 1

	)

302 
	#ZMQ_CURVE
 2

	)

305 
	#ZMQ_IPV4ONLY
 31

	)

306 
	#ZMQ_DELAY_ATTACH_ON_CONNECT
 
ZMQ_IMMEDIATE


	)

307 
	#ZMQ_NOBLOCK
 
ZMQ_DONTWAIT


	)

308 
	#ZMQ_FAIL_UNROUTABLE
 
ZMQ_ROUTER_MANDATORY


	)

309 
	#ZMQ_ROUTER_BEHAVIOR
 
ZMQ_ROUTER_MANDATORY


	)

316 
	#ZMQ_EVENT_CONNECTED
 1

	)

317 
	#ZMQ_EVENT_CONNECT_DELAYED
 2

	)

318 
	#ZMQ_EVENT_CONNECT_RETRIED
 4

	)

320 
	#ZMQ_EVENT_LISTENING
 8

	)

321 
	#ZMQ_EVENT_BIND_FAILED
 16

	)

323 
	#ZMQ_EVENT_ACCEPTED
 32

	)

324 
	#ZMQ_EVENT_ACCEPT_FAILED
 64

	)

326 
	#ZMQ_EVENT_CLOSED
 128

	)

327 
	#ZMQ_EVENT_CLOSE_FAILED
 256

	)

328 
	#ZMQ_EVENT_DISCONNECTED
 512

	)

329 
	#ZMQ_EVENT_MONITOR_STOPPED
 1024

	)

331 
	#ZMQ_EVENT_ALL
 ( 
ZMQ_EVENT_CONNECTED
 | 
ZMQ_EVENT_CONNECT_DELAYED
 | \

332 
ZMQ_EVENT_CONNECT_RETRIED
 | 
ZMQ_EVENT_LISTENING
 | \

333 
ZMQ_EVENT_BIND_FAILED
 | 
ZMQ_EVENT_ACCEPTED
 | \

334 
ZMQ_EVENT_ACCEPT_FAILED
 | 
ZMQ_EVENT_CLOSED
 | \

335 
ZMQ_EVENT_CLOSE_FAILED
 | 
ZMQ_EVENT_DISCONNECTED
 | \

336 
ZMQ_EVENT_MONITOR_STOPPED
)

	)

340 
uöt16_t
 
evít
;

341 
öt32_t
 
vÆue
 ;

342 } 
	tzmq_evít_t
;

344 
ZMQ_EXPORT
 *
zmq_sockë
 (*, 
ty≥
);

345 
ZMQ_EXPORT
 
zmq_˛o£
 (*
s
);

346 
ZMQ_EXPORT
 
zmq_£tsock›t
 (*
s
, 
›ti⁄
, c⁄° *
›tvÆ
,

347 
size_t
 
›tvÆÀn
);

348 
ZMQ_EXPORT
 
zmq_gësock›t
 (*
s
, 
›ti⁄
, *
›tvÆ
,

349 
size_t
 *
›tvÆÀn
);

350 
ZMQ_EXPORT
 
zmq_böd
 (*
s
, c⁄° *
addr
);

351 
ZMQ_EXPORT
 
zmq_c⁄√˘
 (*
s
, c⁄° *
addr
);

352 
ZMQ_EXPORT
 
zmq_unböd
 (*
s
, c⁄° *
addr
);

353 
ZMQ_EXPORT
 
zmq_disc⁄√˘
 (*
s
, c⁄° *
addr
);

354 
ZMQ_EXPORT
 
zmq_£nd
 (*
s
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
);

355 
ZMQ_EXPORT
 
zmq_£nd_c⁄°
 (*
s
, c⁄° *
buf
, 
size_t
 
Àn
, 
Êags
);

356 
ZMQ_EXPORT
 
zmq_ªcv
 (*
s
, *
buf
, 
size_t
 
Àn
, 
Êags
);

357 
ZMQ_EXPORT
 
zmq_sockë_m⁄ô‹
 (*
s
, c⁄° *
addr
, 
evíts
);

359 
ZMQ_EXPORT
 
zmq_£ndmsg
 (*
s
, 
zmq_msg_t
 *
msg
, 
Êags
);

360 
ZMQ_EXPORT
 
zmq_ªcvmsg
 (*
s
, 
zmq_msg_t
 *
msg
, 
Êags
);

363 
iovec
;

365 
ZMQ_EXPORT
 
zmq_£ndiov
 (*
s
, 
iovec
 *
iov
, 
size_t
 
cou¡
, 
Êags
);

366 
ZMQ_EXPORT
 
zmq_ªcviov
 (*
s
, 
iovec
 *
iov
, 
size_t
 *
cou¡
, 
Êags
);

372 
	#ZMQ_POLLIN
 1

	)

373 
	#ZMQ_POLLOUT
 2

	)

374 
	#ZMQ_POLLERR
 4

	)

378 *
sockë
;

379 #i‡
deföed
 
_WIN32


380 
SOCKET
 
fd
;

382 
fd
;

384 
evíts
;

385 
ªvíts
;

386 } 
	tzmq_pﬁlôem_t
;

388 
	#ZMQ_POLLITEMS_DFLT
 16

	)

390 
ZMQ_EXPORT
 
zmq_pﬁl
 (
zmq_pﬁlôem_t
 *
ôems
, 
nôems
, 
timeout
);

394 
ZMQ_EXPORT
 
zmq_¥oxy
 (*
‰⁄ãnd
, *
backíd
, *
ˇ±uª
);

395 
ZMQ_EXPORT
 
zmq_¥oxy_°ìøbÀ
 (*
‰⁄ãnd
, *
backíd
, *
ˇ±uª
, *
c⁄åﬁ
);

398 
ZMQ_EXPORT
 *
zmq_z85_ícode
 (*
de°
, 
uöt8_t
 *
d©a
, 
size_t
 
size
);

401 
ZMQ_EXPORT
 
uöt8_t
 *
zmq_z85_decode
 (uöt8_à*
de°
, *
°rög
);

404 
	#ZMQ_STREAMER
 1

	)

405 
	#ZMQ_FORWARDER
 2

	)

406 
	#ZMQ_QUEUE
 3

	)

408 
ZMQ_EXPORT
 
zmq_devi˚
 (
ty≥
, *
‰⁄ãnd
, *
backíd
);

410 #unde‡
ZMQ_EXPORT


412 #ifde‡
__˝lu•lus


	@../include/zmq_utils.h

20 #i‚de‡
__ZMQ_UTILS_H_INCLUDED__


21 
	#__ZMQ_UTILS_H_INCLUDED__


	)

23 
	~<°dio.h
>

24 
	~<°rög.h
>

25 
	~<°dlib.h
>

28 #i‡
deföed
 
ZMQ_HAVE_SOLARIS
 || deföed 
ZMQ_HAVE_OPENVMS


29 
	~<öây≥s.h
>

30 #ñi‡
deföed
 
_MSC_VER
 && _MSC_VER < 1600

31 #i‚de‡
öt32_t


32 
__öt32
 
	töt32_t
;

34 #i‚de‡
uöt16_t


35 
	t__öt16
 
	tuöt16_t
;

38 
	~<°döt.h
>

41 #ifde‡
__˝lu•lus


46 #i‡
deföed
 
_WIN32


47 #i‡
deföed
 
ZMQ_STATIC


48 
	#ZMQ_EXPORT


	)

49 #ñi‡
deföed
 
DLL_EXPORT


50 
	#ZMQ_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

52 
	#ZMQ_EXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

55 #i‡
deföed
 
__SUNPRO_C
 || deföed 
__SUNPRO_CC


56 
	#ZMQ_EXPORT
 
__globÆ


	)

57 #ñi‡(
deföed
 
__GNUC__
 && __GNUC__ >4Ë|| deföed 
__INTEL_COMPILER


58 
	#ZMQ_EXPORT
 
	`__©åibuã__
 ((
	`visibûôy
("deÁu…")))

	)

60 
	#ZMQ_EXPORT


	)

67 
ZMQ_EXPORT
 *
zmq_z85_ícode
 (*
de°
, 
uöt8_t
 *
d©a
, 
size_t
 
size
);

70 
ZMQ_EXPORT
 
uöt8_t
 *
zmq_z85_decode
 (uöt8_à*
de°
, *
°rög
);

74 
ZMQ_EXPORT
 
zmq_curve_key∑ú
 (*
z85_public_key
, *
z85_£¸ë_key
);

76 (
zmq_thªad_‚
) (*);

84 
ZMQ_EXPORT
 *
zmq_°›w©ch_°¨t
 ();

88 
ZMQ_EXPORT
 
zmq_°›w©ch_°›
 (*
w©ch_
);

91 
ZMQ_EXPORT
 
zmq_¶ìp
 (
£c⁄ds_
);

94 
ZMQ_EXPORT
 *
zmq_thªad°¨t
 (
zmq_thªad_‚
* 
func
, * 
¨g
);

97 
ZMQ_EXPORT
 
zmq_thªad˛o£
 (* 
thªad
);

99 #unde‡
ZMQ_EXPORT


101 #ifde‡
__˝lu•lus


	@
1
.
0
161
2001
address.cpp
address.hpp
array.hpp
atomic_counter.hpp
atomic_ptr.hpp
blob.hpp
clock.cpp
clock.hpp
command.hpp
config.hpp
ctx.cpp
ctx.hpp
curve_client.cpp
curve_client.hpp
curve_server.cpp
curve_server.hpp
dbuffer.hpp
dealer.cpp
dealer.hpp
decoder.hpp
devpoll.cpp
devpoll.hpp
dist.cpp
dist.hpp
encoder.hpp
epoll.cpp
epoll.hpp
err.cpp
err.hpp
fd.hpp
fq.cpp
fq.hpp
i_decoder.hpp
i_encoder.hpp
i_engine.hpp
i_poll_events.hpp
io_object.cpp
io_object.hpp
io_thread.cpp
io_thread.hpp
ip.cpp
ip.hpp
ipc_address.cpp
ipc_address.hpp
ipc_connecter.cpp
ipc_connecter.hpp
ipc_listener.cpp
ipc_listener.hpp
kqueue.cpp
kqueue.hpp
lb.cpp
lb.hpp
likely.hpp
mailbox.cpp
mailbox.hpp
mechanism.cpp
mechanism.hpp
msg.cpp
msg.hpp
mtrie.cpp
mtrie.hpp
mutex.hpp
null_mechanism.cpp
null_mechanism.hpp
object.cpp
object.hpp
options.cpp
options.hpp
own.cpp
own.hpp
pair.cpp
pair.hpp
pgm_receiver.cpp
pgm_receiver.hpp
pgm_sender.cpp
pgm_sender.hpp
pgm_socket.cpp
pgm_socket.hpp
pipe.cpp
pipe.hpp
plain_mechanism.cpp
plain_mechanism.hpp
poll.cpp
poll.hpp
poller.hpp
poller_base.cpp
poller_base.hpp
precompiled.cpp
precompiled.hpp
proxy.cpp
proxy.hpp
pub.cpp
pub.hpp
pull.cpp
pull.hpp
push.cpp
push.hpp
random.cpp
random.hpp
raw_decoder.cpp
raw_decoder.hpp
raw_encoder.cpp
raw_encoder.hpp
reaper.cpp
reaper.hpp
rep.cpp
rep.hpp
req.cpp
req.hpp
router.cpp
router.hpp
select.cpp
select.hpp
session_base.cpp
session_base.hpp
signaler.cpp
signaler.hpp
socket_base.cpp
socket_base.hpp
stdint.hpp
stream.cpp
stream.hpp
stream_engine.cpp
stream_engine.hpp
sub.cpp
sub.hpp
tcp.cpp
tcp.hpp
tcp_address.cpp
tcp_address.hpp
tcp_connecter.cpp
tcp_connecter.hpp
tcp_listener.cpp
tcp_listener.hpp
thread.cpp
thread.hpp
trie.cpp
trie.hpp
v1_decoder.cpp
v1_decoder.hpp
v1_encoder.cpp
v1_encoder.hpp
v2_decoder.cpp
v2_decoder.hpp
v2_encoder.cpp
v2_encoder.hpp
v2_protocol.hpp
windows.hpp
wire.hpp
xpub.cpp
xpub.hpp
xsub.cpp
xsub.hpp
ypipe.hpp
ypipe_base.hpp
ypipe_conflate.hpp
yqueue.hpp
zmq.cpp
zmq_utils.cpp
../include/zmq.h
../include/zmq_utils.h
